{
    "_class": "hudson.tasks.junit.TestResult",
    "suites": [
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ApiVersionsTest",
                    "duration": 0.0,
                    "name": "testMaxUsableProduceMagic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.023,
                    "name": "testResolveDnsLookupResolveCanonicalBootstrapServers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testFilterPreferredAddresses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.035,
                    "name": "testResolveUnknownHostException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testOnlyBadHostname",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.0,
                    "name": "testInvalidConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.0,
                    "name": "testResolveDnsLookupAllIps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.0,
                    "name": "testResolveDnsLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testParseAndValidateAddresses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.061,
                    "name": "testParseAndValidateAddressesWithReverseLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.0,
                    "name": "testNoPort",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testIsPreparingConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testNodeWithNewHostname",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testHostResolveChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testAuthorizationFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testMultipleIPsWithDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testThrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testExponentialReconnectBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testRemoveNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testSingleIPWithUseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testMultipleIPsWithUseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testMultipleNodeConnectionStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testClusterConnectionStateChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.002,
                    "name": "testMaxReconnectBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testSingleIPWithDefault",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.CommonClientConfigsTest",
                    "duration": 0.004,
                    "name": "testExponentialBackoffDefaults",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.003,
                    "name": "testSessionless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testVerifyFullFetchResponsePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testIncrementals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testIncrementalPartitionRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.002,
                    "name": "testFindMissing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testDoubleBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.001,
                    "name": "testCompleteNextThrowsIfNoInflights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.0,
                    "name": "testCompleteLastSentThrowsIfNoInFlights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.002,
                    "name": "testCompleteNext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.0,
                    "name": "testCompleteLastSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.001,
                    "name": "testClearAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.001,
                    "name": "testTimedOutNodes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.MetadataCacheTest",
                    "duration": 0.009,
                    "name": "testMissingLeaderEndpoint",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.0,
                    "name": "testTimeToNextUpdateRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.005,
                    "name": "testClusterCopy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.004,
                    "name": "testMetadataTopicErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.004,
                    "name": "testPartialMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testInvalidTopicError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.005,
                    "name": "testOutOfBandEpochUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.006,
                    "name": "testUpdateLastEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.0,
                    "name": "testUpdateMetadataAllowedImmediatelyAfterBootstrap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.0,
                    "name": "testFailedUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.003,
                    "name": "testRequestUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testTopicAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.015,
                    "name": "testClusterListenerGetsNotifiedOfUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.001,
                    "name": "testStaleMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.007,
                    "name": "testMetadataMerge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.003,
                    "name": "testLeaderMetadataInconsistentWithBrokerMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.001,
                    "name": "testMetadataUpdateAfterClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.005,
                    "name": "testRejectOldMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.003,
                    "name": "testIgnoreLeaderEpochInOlderMetadataResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testRequestVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.001,
                    "name": "testTimeToNextUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.001,
                    "name": "testNoEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testNodeIfOffline",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.013,
                    "name": "testDefaultRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testSimpleRequestResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testUnsupportedVersionDuringInternalMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testDisconnectDuringUserMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testConnectionDelayDisconnectedWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testLeastLoadedNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayConnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.006,
                    "name": "testAuthenticationFailureWithInFlightMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testUnsupportedApiVersionsRequestWithoutVersionProvidedByTheBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayConnectedWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testSimpleRequestResponseWithNoBrokerDiscovery",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testThrottlingNotEnabledForConnectionToOlderBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testSimpleRequestResponseWithStaticNodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testLeastLoadedNodeConsidersThrottledConnections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testClientDisconnectAfterInternalApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testCallDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.046,
                    "name": "testDnsLookupFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testConnectionDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionThrottling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testServerDisconnectAfterInternalApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testConnectionDelayWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testCorrelationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testSendToUnreadyNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayDisconnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testDisconnectWithMultipleInFlights",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testConstructionFromApiVersionsResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testLatestUsableVersionOutOfRangeHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testLatestUsableVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testUsableVersionCalculationNoKnownVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.002,
                    "name": "testVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testUnsupportedVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testLatestUsableVersionOutOfRangeLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testLatestUsableVersionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testUnknownApiVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testUsableVersionLatestVersions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.006,
                    "name": "shouldGetAllEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.001,
                    "name": "shouldImplementHashCodeProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.002,
                    "name": "shouldImplementToStringProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.0,
                    "name": "shouldReturnNullOnGetUnknownEntry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.0,
                    "name": "shouldImplementEqualsProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.0,
                    "name": "shouldGetEntry",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.004,
                    "name": "testPartitionMissingInResponseErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.0,
                    "name": "testPartitionLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.0,
                    "name": "testTopLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.0,
                    "name": "testNoErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.001,
                    "name": "testPartitionMissingInRequestErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testGetOrCreateListValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.027,
                    "name": "testOffsetCommitNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.015,
                    "name": "testListOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testIncrementalAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDescribeConsumerGroupNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testCreateTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.406,
                    "name": "testListConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDescribeNonConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testAlterReplicaLogDirsUnrequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testDescribeConfigsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testDescribeBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.106,
                    "name": "testConnectionFailureOnMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.11,
                    "name": "testDefaultApiTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.001,
                    "name": "testGetSubLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.013,
                    "name": "testDeleteConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testInvalidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.308,
                    "name": "testAlterConsumerGroupOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDescribeAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.204,
                    "name": "testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDescribeBrokerAndLogConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testDeleteConsumerGroupOffsetsFindCoordinatorNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testRequestTimeoutExceedingDefaultApiTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testCreateTopicsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testListOffsetsMetadataNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.103,
                    "name": "testCreateTopicsHandleNotControllerException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testEqualsOfClientQuotaFilterComponent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testPrettyPrintException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDescribeMultipleConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.112,
                    "name": "testAlterPartitionReassignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDescribeConsumerGroupsWithAuthorizedOperationsOmitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 1.004,
                    "name": "testTimeoutWithoutMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.203,
                    "name": "testDeleteConsumerGroupOffsetsFindCoordinatorRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListConsumerGroupOffsetsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testDeleteRecordsTopicAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testAlterClientQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testListConsumerGroupsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testDescribeConfigsUnrequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testListOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.202,
                    "name": "testListOffsetsMetadataRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListConsumerGroupsMetadataFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testRemoveMembersFromGroupNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDeleteConsumerGroupsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterReplicaLogDirsSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterReplicaLogDirsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testCloseAdminClientInCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.304,
                    "name": "testDefaultApiTimeoutOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.108,
                    "name": "testListPartitionReassignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListOffsetsWithLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.105,
                    "name": "testRemoveMembersFromGroupRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.503,
                    "name": "testDescribeConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDeleteTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testListOffsetsWithMultiplePartitionsLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDeleteConsumerGroupOffsetsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testListConsumerGroupOffsetsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterConsumerGroupOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.105,
                    "name": "testDeleteConsumerGroupOffsetsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDescribeCluster",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testAlterConsumerGroupOffsetsFindCoordinatorNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testCreateAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testCloseAdminClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.01,
                    "name": "testDefaultApiTimeoutAndRequestTimeoutConflicts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testPropagatedMetadataFetchException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testCreatePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testAdminClientApisAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.303,
                    "name": "testListConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.504,
                    "name": "testDeleteConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.108,
                    "name": "testMetadataRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testCreateTopicsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDescribeConsumerGroupRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDeleteAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.207,
                    "name": "testElectLeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDeleteRecordsMultipleSends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testDeleteConsumerGroupsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testAlterReplicaLogDirsLogDirNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testDescribeClientQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.302,
                    "name": "testDeleteConsumerGroupOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testListConsumerGroupsWithStatesOlderBrokerVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testGenerateClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testSuccessfulRetryAfterRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.104,
                    "name": "testOffsetCommitRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testDeleteTopicsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.513,
                    "name": "testRemoveMembersFromGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.001,
                    "name": "testCalcTimeoutMsRemainingAsInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.203,
                    "name": "testUnreachableBootstrapServer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDeleteConsumerGroupOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.001,
                    "name": "testEqualsWithoutGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.0,
                    "name": "testEqualsWithGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.0,
                    "name": "testNonEqual",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupOptionsTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.068,
                    "name": "testMemberLevelErrorInResponseConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.0,
                    "name": "testTopLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.001,
                    "name": "testMemberMissingErrorInRequestConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.0,
                    "name": "testMemberLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.0,
                    "name": "testNoErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.001,
                    "name": "testAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.0,
                    "name": "testMetadataReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.0,
                    "name": "testMetadataRefreshBackoff",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "testOverrideEnableAutoCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "testOverrideClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.0,
                    "name": "testDeserializerToPropertyConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "ensureDefaultThrowOnUnsupportedStableFlagToFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.0,
                    "name": "testDeserializerToMapConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.002,
                    "name": "testInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.0,
                    "name": "testAssignmentConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.001,
                    "name": "testInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.001,
                    "name": "testInvalidInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.0,
                    "name": "testGroupIdConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordTest",
                    "duration": 0.001,
                    "name": "testNullChecksumInConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordTest",
                    "duration": 0.0,
                    "name": "testOldConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordsTest",
                    "duration": 0.002,
                    "name": "iterator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.008,
                    "name": "testNoExceptionThrownWhenOnlySubscribedTopicDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testStickiness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAddRemoveConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.008,
                    "name": "testAssignmentUpdatedForDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 7.777,
                    "name": "testReassignmentWithRandomSubscriptionsAndChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testNewSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testAddRemoveTopicTwoConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testMoveExistingAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testPoorRoundRobinAssignmentScenario",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.073,
                    "name": "testReassignmentAfterOneConsumerLeaves",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 7.044,
                    "name": "testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.013,
                    "name": "testSameSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testReassignmentAfterOneConsumerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 6.866,
                    "name": "testLargeAssignmentAndGroupWithUniformSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.003,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testCloseShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testOffsetIsValidAfterSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.211,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.013,
                    "name": "testMetricConfigRecordingLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testRegexSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.011,
                    "name": "testPollWithEmptySubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.012,
                    "name": "testSubscriptionWithEmptyPartitionAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.105,
                    "name": "testCloseTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.027,
                    "name": "testOperationsBySubscribingConsumerWithDefaultGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "shouldIgnoreGroupInstanceIdForEmptyGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testPollWithEmptyUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testConstructorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testFetchStableOffsetThrowInPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testAssignOnNullTopicInPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testManualAssignmentChangeWithAutoCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testSubscriptionChangesWithAutoCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testChangingRegexSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testPollWithNoSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testFetchProgressWithMissingPartitionPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testSubscriptionOnEmptyPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsetsAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testUnsubscribeShouldTriggerPartitionsRevokedWithValidGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testCommittedAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "verifyNoCoordinatorLookupForManualAssignmentWithSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.0,
                    "name": "testInvalidSocketSendBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testConsumerJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testOffsetsForTimesAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testCommitsFetchedDuringAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testOsDefaultSocketBufferSizes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testResetToCommittedOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testPollTimeMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testCloseNoWait",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testEndOffsetsAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.207,
                    "name": "testCloseInterrupt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testPollIdleRatio",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testGetGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testAssignOnNullTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "verifyPollTimesOutDuringMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "verifyDeprecatedPollDoesNotTimeOutDuringMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testMetricsReporterAutoGeneratedClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testManualAssignmentChangeWithAutoCommitDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testOffsetOfPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testSubscriptionChangesWithAutoCommitDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testSeekNegative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testPollAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testAssignOnEmptyTopicInPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testRebalanceException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testMissingOffsetNoResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.0,
                    "name": "testInvalidSocketReceiveBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testClosingConsumerUnregistersConsumerMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testSubscriptionOnInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testAutoCommitSentBeforePositionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "fetchResponseWithUnexpectedPartitionIsIgnored",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testPollThrowsInterruptExceptionIfInterrupted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testSubscriptionOnNullPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testEnforceRebalanceTriggersRebalanceOnNextPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testEnforceRebalanceWithManualAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.012,
                    "name": "testShouldAttemptToRejoinGroupAfterSyncGroupFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testCommitSyncAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.005,
                    "name": "verifyHeartbeatSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.007,
                    "name": "verifyHeartbeatSentWhenFetchedDataReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testResetUsingAutoResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testNoCommittedOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testOperationsByAssigningConsumerWithDefaultGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testAssignOnEmptyTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testFetchStableOffsetThrowInCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.112,
                    "name": "testUnsubscribeShouldTriggerPartitionsLostWithNoGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testSubscriptionOnNullTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testInterceptorConstructorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testSubscriptionOnEmptyTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.028,
                    "name": "testWakeupWithFetchDataAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testReturnRecordsDuringRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.103,
                    "name": "testLeaveGroupTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testFetchStableOffsetThrowInPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testPartitionsForAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testSubscriptionOnNullTopicCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.207,
                    "name": "testCloseWithTimeUnit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.011,
                    "name": "testSimpleMock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.001,
                    "name": "testConsumerRecordsIsEmptyWhenReturningNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.001,
                    "name": "shouldNotClearRecordsForPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.0,
                    "name": "endOffsetsShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.001,
                    "name": "testSimpleMockDeprecated",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.008,
                    "name": "testSerializationRoundtrip",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.0,
                    "name": "testInvalidNegativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.001,
                    "name": "testDeserializationCompatibilityBeforeLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.001,
                    "name": "testDeserializationCompatibilityWithLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testStaticMemberRangeAssignmentPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoStaticConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.002,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.004,
                    "name": "testStaticMemberRoundRobinAssignmentPersistentAfterMemberIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testStaticMemberRoundRobinAssignmentPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoDynamicConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoStaticConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.008,
                    "name": "testAssignmentWithConflictingPreviousGenerations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testSchemaBackwardCompatibility",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAssignmentWithMultipleGenerations1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAssignmentWithMultipleGenerations2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testNoExceptionThrownWhenOnlySubscribedTopicDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testStickiness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testAddRemoveConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.003,
                    "name": "testAssignmentUpdatedForDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 7.433,
                    "name": "testReassignmentWithRandomSubscriptionsAndChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testNewSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testAddRemoveTopicTwoConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testMoveExistingAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testPoorRoundRobinAssignmentScenario",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.051,
                    "name": "testReassignmentAfterOneConsumerLeaves",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 5.976,
                    "name": "testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.009,
                    "name": "testSameSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testReassignmentAfterOneConsumerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 7.614,
                    "name": "testLargeAssignmentAndGroupWithUniformSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.032,
                    "name": "testPollHeartbeatAwakesHeartbeatThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.204,
                    "name": "testHeartbeatInstanceFencedResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.106,
                    "name": "testWakeupAfterSyncGroupReceivedExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.012,
                    "name": "testJoinGroupProtocolTypeAndName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDiscoveryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.0,
                    "name": "testJoinGroupRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.104,
                    "name": "testJoinGroupUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.104,
                    "name": "testSyncGroupUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testLookupCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.104,
                    "name": "testWakeupAfterJoinGroupSentExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupRequestWithMemberIdRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.013,
                    "name": "testHeartbeatRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.104,
                    "name": "testWakeupAfterJoinGroupSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testHandleLeaveGroupResponseWithException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.204,
                    "name": "testWakeupAfterJoinGroupReceivedExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.204,
                    "name": "testWakeupInOnJoinComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testNoGenerationWillNotTriggerProtocolNameCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.103,
                    "name": "testWakeupAfterSyncGroupSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testGroupMaxSizeExceptionIsFatal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.204,
                    "name": "testWakeupAfterSyncGroupSentExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.204,
                    "name": "testWakeupAfterSyncGroupReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testJoinGroupRequestWithGroupInstanceIdNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testHandleNormalLeaveGroupResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.006,
                    "name": "testLeaveGroupSentWithGroupInstanceIdUnSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testHandleMultipleMembersLeaveGroupResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.104,
                    "name": "testHeartbeatIllegalGenerationResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.105,
                    "name": "testSyncGroupIllegalGenerationResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.014,
                    "name": "testUncaughtExceptionInHeartbeatThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testHandleLeaveGroupResponseWithEmptyMemberResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testJoinGroupRequestTimeoutLowerBoundedByDefaultRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testTimeoutAndRetryJoinGroupIfNeeded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testAuthenticationErrorInEnsureCoordinatorReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.001,
                    "name": "testJoinGroupRequestMaxTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.103,
                    "name": "testWakeupAfterJoinGroupReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.006,
                    "name": "testHeartbeatUnknownMemberResponseDuringRebalancing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.105,
                    "name": "testHeartbeatUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.003,
                    "name": "testMergeSortManyMemberInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.0,
                    "name": "testMemberInfoSortingSomeGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.0,
                    "name": "testMemberInfoSortingWithAllGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.0,
                    "name": "testMemberInfoSortingWithoutGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.039,
                    "name": "testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testInvalidSessionTimeout[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testFetchCommittedOffsets[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testExcludeInternalTopicsConfigOption[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnect[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCommitAfterLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testGroupDescribeUnauthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.608,
                    "name": "testCloseNoResponseForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testThreadSafeAssignedPartitionsMetric[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetLoadInProgress[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetOnly[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testAutoCommitRetryBackoff[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSelectRebalanceProtcol[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.703,
                    "name": "testCloseCoordinatorNotKnownWithCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMaybeLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.605,
                    "name": "testHeartbeatThreadClose[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testMetadataChangeTriggersRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testRebalanceWithMetadataChange[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testPatternJoinGroupLeader[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testThrowOnUnsupportedStableFlag[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.703,
                    "name": "testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testUnknownMemberIdOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnexpectedErrorOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testUnknownMemberId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testUpdateMetadataDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testPendingMemberShouldLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.203,
                    "name": "testCloseCoordinatorUnavailableNoCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testIllegalGenerationOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.206,
                    "name": "testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetMetadata[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNoThrowWhenStableFlagIsSupported[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.104,
                    "name": "testCloseNoWait[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDisconnectInJoin[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testGetGroupMetadata[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffsetWithPendingTransactions[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRetryCommitUnknownTopicOrPartition[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testRefreshOffsetWithValidation[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testMetadataRefreshDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testCommitOffsetRebalanceInProgress[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCloseDynamicAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.705,
                    "name": "testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testIllegalGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNormalHeartbeat[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffset[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetsGroupNotAuthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitDynamicAssignmentRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testNormalJoinGroupFollower[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.705,
                    "name": "testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testConsumerRejoinAfterRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testMetadataTopicsDuringSubscriptionChange[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testMetrics[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testOutdatedCoordinatorAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.024,
                    "name": "testWakeupDuringJoin[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testPatternJoinGroupFollower[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testGroupReadUnauthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testIncludeInternalTopicsConfigOption[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnsubscribeWithInvalidGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRebalanceInProgressOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.604,
                    "name": "testCloseNoResponseForLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnsubscribeWithValidGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCloseManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetMetadataTooLarge[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testWakeupFromAssignmentCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncDisconnected[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitDynamicAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testLeaveGroupOnClose[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.069,
                    "name": "testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRejoinGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.103,
                    "name": "testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testNormalJoinGroupLeader[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitAfterCoordinatorBackToService[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testJoinGroupInvalidGroupId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetIllegalGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.202,
                    "name": "testCloseCoordinatorNotKnownNoCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitAwaitsInterval[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testInvalidSessionTimeout[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testFetchCommittedOffsets[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testExcludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnect[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitAfterLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testGroupDescribeUnauthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.604,
                    "name": "testCloseNoResponseForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testThreadSafeAssignedPartitionsMetric[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetLoadInProgress[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetOnly[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAutoCommitRetryBackoff[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testSelectRebalanceProtcol[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.702,
                    "name": "testCloseCoordinatorNotKnownWithCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMaybeLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.605,
                    "name": "testHeartbeatThreadClose[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testMetadataChangeTriggersRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testRebalanceWithMetadataChange[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testPatternJoinGroupLeader[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testThrowOnUnsupportedStableFlag[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.703,
                    "name": "testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testUnknownMemberIdOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnexpectedErrorOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnknownMemberId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testUpdateMetadataDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testPendingMemberShouldLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.202,
                    "name": "testCloseCoordinatorUnavailableNoCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testIllegalGenerationOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.104,
                    "name": "testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetMetadata[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNoThrowWhenStableFlagIsSupported[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.103,
                    "name": "testCloseNoWait[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testDisconnectInJoin[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testGetGroupMetadata[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetWithPendingTransactions[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRetryCommitUnknownTopicOrPartition[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRefreshOffsetWithValidation[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetSyncNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testMetadataRefreshDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetRebalanceInProgress[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCloseDynamicAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.704,
                    "name": "testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testIllegalGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNormalHeartbeat[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRefreshOffset[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetsGroupNotAuthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testAutoCommitDynamicAssignmentRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNormalJoinGroupFollower[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.704,
                    "name": "testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testConsumerRejoinAfterRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMetadataTopicsDuringSubscriptionChange[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testMetrics[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOutdatedCoordinatorAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testWakeupDuringJoin[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testPatternJoinGroupFollower[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testGroupReadUnauthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testIncludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnsubscribeWithInvalidGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRebalanceInProgressOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.603,
                    "name": "testCloseNoResponseForLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testUnsubscribeWithValidGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCloseManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetMetadataTooLarge[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testWakeupFromAssignmentCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncDisconnected[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitDynamicAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testLeaveGroupOnClose[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.032,
                    "name": "testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRejoinGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.103,
                    "name": "testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testNormalJoinGroupLeader[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitAfterCoordinatorBackToService[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testJoinGroupInvalidGroupId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetIllegalGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.0,
                    "name": "testCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.202,
                    "name": "testCloseCoordinatorNotKnownNoCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitAwaitsInterval[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest",
                    "duration": 0.002,
                    "name": "testOnCommitChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest",
                    "duration": 0.001,
                    "name": "testOnConsumeChain",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.001,
                    "name": "testPatternSubscriptionNoInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.0,
                    "name": "testTransientTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.002,
                    "name": "testNormalSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.0,
                    "name": "testUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.001,
                    "name": "testPatternSubscriptionIncludeInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testMetadataFailurePropagated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "testTrySend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "multiSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testInvalidTopicExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "sendWithinBlackoutPeriodAfterAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "wakeup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "testTimeoutUnsentRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testDisconnectWithInFlightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.137,
                    "name": "blockWhenPollConditionNotSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "send",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testAuthenticationExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "sendExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "blockOnlyForRetryBackoffIfNoInflightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "testAwaitForMetadataUpdateWithTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testDisconnectWakesUpPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.002,
                    "name": "testTopicAuthorizationExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.102,
                    "name": "testFutureCompletionOutsidePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.002,
                    "name": "doNotBlockIfPollConditionIsSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "testDisconnectWithUnsentRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.003,
                    "name": "deserializeFutureSubscriptionVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeNullSubscriptionUserData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeNullAssignmentUserData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.001,
                    "name": "deserializeNewSubscriptionWithOldVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeMetadataAndGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeFutureAssignmentVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeOldSubscriptionVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.014,
                    "name": "testUpdateFetchPositionResetToLatestOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetOffsetsFencedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.019,
                    "name": "testMultipleAbortMarkers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.018,
                    "name": "testEndOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testOffsetValidationSkippedForOldResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionOfPausedPartitionsWithAValidPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchUnknownTopicOrPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.008,
                    "name": "testGetOffsetByTimeWithPartitionsRetryCouldTriggerMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testResetOffsetsMetadataRefresh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testClearBufferedDataForTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOffsetErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReturnAbortedTransactionsinUncommittedMode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testConsumerPositionUpdatedWhenSkippingAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testCompletedFetchRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsUnknownLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testUpdatePositionWithLastRecordMissingFromBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdatePositionOnEmptyBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testListOffsetUpdateEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testFetchOffsetOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchDiscardedAfterPausedPartitionResumedAndSeekedToNewOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 2.312,
                    "name": "testFetcherConcurrency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.015,
                    "name": "testOffsetValidationResetOffsetForUndefinedOffsetWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testFetchedRecordsRaisesOnSerializationErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testListOffsetNoUpdateMissingEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionNoOpWithPositionSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testAssignmentChangeWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.009,
                    "name": "testQuotaMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testSeekWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchMaxPollRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testPreferredReadReplicaOffsetError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testParseInvalidRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.314,
                    "name": "testFetcherSessionEpochUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testSeekBeforeException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testUpdateFetchPositionDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testConsumingViaIncrementalFetchRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOnCompletedFetchesForPausedAndResumedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.006,
                    "name": "testGetTopicMetadataOfflinePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchResponseMetricsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetTopicMetadataInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionResetToDefaultOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testOffsetValidationResetOffsetForUndefinedEpochWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testSkippingAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testBeginningOffsetsMultipleTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testEpochSetInFetchRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testEndOffsetsMultipleTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchNonContinuousRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchRequestInternalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testReadCommittedWithCompactedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testListOffsetSendsReadUncommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchNormal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopicsTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testReadCommittedAbortMarkerWithNoData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUnauthorizedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopicsUnauthorized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testBeginningOffsetsDuplicateTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testEndOffsetsDuplicateTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchNotLeaderForPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOnCompletedFetchesForSomePausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchPositionAfterException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testOffsetValidationFencing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testEndOffsetsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetOffsetsIncludesLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationAwaitsNodeApiVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchFencedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchedRecordsAfterSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOffsetOutOfRangeException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.006,
                    "name": "testOffsetValidationRequestGrouping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchDuringCooperativeRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBatchedListOffsetsMetadataErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchOnPausedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testParseCorruptedRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.014,
                    "name": "testGetOffsetsForTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testLeaderEpochInConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testInvalidDefaultRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchResponseMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchDuringEagerRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testGetAllTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchResponseMetricsWithOnePartitionError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testUpdateFetchPositionResetToEarliestOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testMissingLeaderEpochInRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testUpdateFetchPositionOfPausedPartitionsWithoutAValidPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testStaleOutOfRangeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testChangeResetWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testReadCommittedWithCommittedAndAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testInFlightFetchOnPausedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testResetOffsetsSkipsBlackedOutConnections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.309,
                    "name": "testEarlierOffsetResetArrivesLate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testRestOffsetsAuthorizationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetcherMetricsTemplates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReturnCommittedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsForTimesTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testReadCommittedLagMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testOffsetValidationSkippedForOldBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchDisconnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopicsDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testOffsetValidationResetOffsetForUndefinedOffsetWithDefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchSkipsBlackedOutNodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationResetOffsetForUndefinedEpochWithDefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationHandlesSeekWithInflightOffsetForLeaderRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testListOffsetSendsReadCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testPartialFetchWithPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchAfterPartitionWithFetchedRecordsIsUnassigned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetTopicMetadataLeaderNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchRequestWhenRecordTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchUnknownLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testEmptyControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testOffsetValidationTriggerLogTruncationForBadOffsetWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testIdempotentResetWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetTopicMetadataUnknownTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testPreferredReadReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testCorruptMessageError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchCompletedBeforeHandlerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsetsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testSubscriptionPositionUpdatedWithEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchOnCompletedFetchesForAllPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionOfPausedPartitionsRequiringOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testTruncationDetected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetcherIgnoresControlRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetcherMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetcherLeadMetric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.001,
                    "name": "testResetSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testResetTimeouts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testShouldHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.001,
                    "name": "testTimeToNextHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testSessionTimeoutExpired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testShouldNotHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testPollTimeout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testOkResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testEmptyResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testUnauthorizedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.001,
                    "name": "testUnexpectedEmptyResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testRetriableError",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.002,
                    "name": "shouldThrowKafkaExceptionOnAssignorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.07,
                    "name": "shouldInstantiateFromListOfOldAndNewClassTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.001,
                    "name": "shouldThrowKafkaExceptionOnNonAssignor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.0,
                    "name": "shouldAdaptOldAssignors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.002,
                    "name": "testOnAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.0,
                    "name": "shouldInstantiateNewAssignors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.001,
                    "name": "testAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.009,
                    "name": "shouldThrowKafkaExceptionOnListWithNonAssignorClassType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.003,
                    "name": "invokeValueAfterFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "listenersInvokedIfAddedBeforeAndAfterFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeCompleteAfterAlreadyFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedBeforeFutureFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenersInvokedIfAddedBeforeAndAfterCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "invokeCompleteAfterAlreadyComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedBeforeFutureCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "testComposeFailureCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeExceptionAfterSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.006,
                    "name": "testComposeSuccessCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testBasicCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testRuntimeExceptionInComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeRaiseAfterAlreadyFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testBasicFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedAfterFutureCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeRaiseAfterAlreadyCompleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedAfterFutureFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testVoidFuture",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.012,
                    "name": "testMaybeCompleteValidationAfterPositionChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "unsubscribeUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "testSeekUnvalidatedWithOffsetEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribePartitionAndPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "partitionAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testGroupSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "topicSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testOffsetResetWhileAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "partitionPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "partitionReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testMaybeCompleteValidationAfterOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "unsubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testSeekUnvalidatedWithNoEpochClearsAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "patternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "partitionAssignmentChangeOnTopicSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribeTopicAndPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "invalidPositionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "unsubscribeUserSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantChangePositionForNonAssignedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testCompleteValidationShouldClearAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantAssignPartitionForUnsubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testSeekValidatedShouldClearAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "verifyAssignmentId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testTruncationDetectionWithResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "partitionAssignmentChangeOnPatternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testMaybeCompleteValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribePatternAndTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testSeekUnvalidatedWithNoOffsetEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantSubscribePatternAndPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.005,
                    "name": "testPreferredReadReplicaLease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantAssignPartitionForUnmatchedPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testMaybeValidatePositionForCurrentLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "testTruncationDetectionWithoutResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.016,
                    "name": "testInvalidGenerationIdAndMemberIdCombinedInSendOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.108,
                    "name": "testCloseIsForcedOnPendingAddOffsetRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.015,
                    "name": "closeShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.109,
                    "name": "testCloseIsForcedOnPendingInitProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.017,
                    "name": "testPartitionerClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.022,
                    "name": "testMetricConfigRecordingLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.109,
                    "name": "testCloseIsForcedOnPendingFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.085,
                    "name": "testHeadersWithExtendedClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.009,
                    "name": "testCloseWhenWaitingForMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.212,
                    "name": "testTopicExpiryInMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.196,
                    "name": "testMetadataWithPartitionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.009,
                    "name": "testTopicRefreshInMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.009,
                    "name": "testNullGroupMetadataInSendOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testNoSerializerProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.025,
                    "name": "testSendTxnOffsetsWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.525,
                    "name": "testInitTransactionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testInvalidSocketSendBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.207,
                    "name": "shouldCloseProperlyAndThrowIfInterrupted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.006,
                    "name": "testTransactionalMethodThrowsWhenSenderClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.007,
                    "name": "testOsDefaultSocketBufferSizes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.007,
                    "name": "testInterceptorConstructClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.008,
                    "name": "testPartitionsForWithNullTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.052,
                    "name": "testInterceptorPartitionSetOnTooLargeRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testMetricsReporterAutoGeneratedClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.026,
                    "name": "testMetadataFetch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.014,
                    "name": "testOnlyCanExecuteCloseAfterInitTransactionsTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testConstructorWithSerializers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.013,
                    "name": "testMetadataExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.048,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testInvalidSocketReceiveBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.0,
                    "name": "testConstructorWithNotStringKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testSerializerClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.007,
                    "name": "testInitTransactionWhileThrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.016,
                    "name": "testMetadataTimeoutWithPartitionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.012,
                    "name": "testMetadataTimeoutWithMissingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testOverwriteAcksAndRetriesForIdempotentProducers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.007,
                    "name": "testSendTxnOffsetsWithGroupMetadataDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.009,
                    "name": "testProducerJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.029,
                    "name": "testConstructorFailureCloseResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testSendTxnOffsetsWithGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.005,
                    "name": "testSendToInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.28,
                    "name": "shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.004,
                    "name": "shouldBeFlushedWithAutoCompleteIfBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlushedAfterFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnBeginTransactionIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnCommitTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.003,
                    "name": "shouldPublishLatestAndCumulativeConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnNullConsumerGroupMetadataWhenSendOffsetsToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.002,
                    "name": "shouldPublishConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnNullConsumerGroupIdWhenSendOffsetsToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionByGroupMetadataIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortForNonAutoCompleteIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.002,
                    "name": "shouldAddOffsetsWhenSendOffsetsToTransactionByGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldResetSentOffsetsFlagOnlyWhenBeginningNewTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldAddOffsetsWhenSendOffsetsToTransactionByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowSendOffsetsToTransactionByGroupIdIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInitTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldPreserveCommittedMessagesOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInitTransactionIfProducerAlreadyInitializedForTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "testManualCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "testAutoCompleteMock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnFlushProducerIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowSendOffsetsToTransactionByGroupMetadataIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlushedWithNoAutoCompleteIfBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotCountAbortedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "testPartitioner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnFenceProducerIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnCommitTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldPreserveOffsetsFromCommitByGroupIdOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowFenceProducerIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnBeginTransactionsIfTransactionInflight",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldCountCommittedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldBeFlushedIfNoBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldPublishMessagesOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldFlushOnCommitForNonAutoCompleteIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnBeginTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldDropMessagesOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnCommitIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnBeginTransactionsIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnAbortIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldBeginTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionByGroupIdIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnCommitTransactionIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldAbortEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldCommitEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldDropConsumerGroupOffsetsOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.ProducerConfigTest",
                    "duration": 0.012,
                    "name": "testSerializerToPropertyConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.ProducerConfigTest",
                    "duration": 0.0,
                    "name": "testSerializerToMapConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.ProducerRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.ProducerRecordTest",
                    "duration": 0.0,
                    "name": "testEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.002,
                    "name": "testNullChecksum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.0,
                    "name": "testConstructionWithRelativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.0,
                    "name": "testConstructionWithMissingRelativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.005,
                    "name": "testTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.052,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.051,
                    "name": "testBlocking",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.005,
                    "name": "testRoundRobinWithNullKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.001,
                    "name": "testRoundRobinWithUnavailablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.002,
                    "name": "testRoundRobinWithNullKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithUnavailablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 2.319,
                    "name": "testStressfulSituation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "testCloseAllocations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 1.503,
                    "name": "testCleanupMemoryAvailabilityWaiterOnInterruption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.015,
                    "name": "testBlockTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "testLargeAvailableMemory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 1.071,
                    "name": "testCleanupMemoryAvailabilityOnMetricsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "testCantAllocateMoreMemoryThanWeHave",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.01,
                    "name": "testCleanupMemoryAvailabilityWaiterOnBlockTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.004,
                    "name": "testDelayedAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.103,
                    "name": "testCloseNotifyWaiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "outOfMemoryOnAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.01,
                    "name": "testBufferExhaustedExceptionIsThrown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.DefaultPartitionerTest",
                    "duration": 0.001,
                    "name": "testKeyPartitionIsStable",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest",
                    "duration": 0.073,
                    "name": "testFutureGetWithSeconds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest",
                    "duration": 0.005,
                    "name": "testFutureGetWithMilliSeconds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.005,
                    "name": "testBatchExpirationAfterReenqueue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.002,
                    "name": "testChecksumNullForMagicV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testBatchExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.002,
                    "name": "testBatchAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumMagicV0AndV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testBatchCannotCompleteTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.029,
                    "name": "testSplitPreservesMagicAndCompressionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testBatchCannotAbortTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testShouldNotAttemptAppendOnceRecordsBuilderIsClosedForAppends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.017,
                    "name": "testSplitPreservesHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.004,
                    "name": "testOnAcknowledgementWithErrorChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.0,
                    "name": "testOnAcknowledgementChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.0,
                    "name": "testOnSendChain",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.027,
                    "name": "testRequestUpdateForTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.003,
                    "name": "testMetadataAwaitAfterClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.005,
                    "name": "testTopicExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 2.001,
                    "name": "testMetadataUpdateWaitTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.001,
                    "name": "testMetadataWaitAbortedOnFatalException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.003,
                    "name": "testMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.002,
                    "name": "testMetadataPartialUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.001,
                    "name": "testTimeToNextUpdateOverwriteBackoff",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.003,
                    "name": "testSplitBatchOffAccumulator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.005,
                    "name": "testNextReadyCheckDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testExpiredBatchSingle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.37,
                    "name": "testStressfulSituation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeNonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 1.002,
                    "name": "testAwaitFlushComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testSoonToExpireBatchesArePickedUpForExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testFull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 2.891,
                    "name": "testSplitFrequency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.003,
                    "name": "testAbortUnsentBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testExpiredBatchSingleMaxValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.003,
                    "name": "testStickyBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testIdempotenceWithOldMagic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeOldMessageFormatNonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.003,
                    "name": "testAbortIncompleteBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testAppendLargeCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testMutedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testExpiredBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testExpiredBatchesRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeOldMessageFormatCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.0,
                    "name": "testLinger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testPartialDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testSplitAndReenqueue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.023,
                    "name": "testIdempotenceWithMultipleInflightsWhereFirstFailsFatallyAndSequenceOfFutureBatchesIsAdjusted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.013,
                    "name": "testCancelInFlightRequestAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.013,
                    "name": "testIdempotentSplitBatchAndSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testUnknownProducerErrorShouldBeRetriedWhenLogStartOffsetIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testIdempotentUnknownProducerHandlingWhenRetentionLimitReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testEpochBumpOnOutOfOrderSequenceForNextBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testMetadataTopicExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.01,
                    "name": "testTransactionalRequestsSentOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.013,
                    "name": "testExpiryOfFirstBatchShouldCauseEpochBumpIfFutureBatchesFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testMessageFormatDownConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testTransactionalUnknownProducerHandlingWhenRetentionLimitReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testExpiryOfAllSentBatchesShouldCauseUnresolvedSequences",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.415,
                    "name": "testDoNotPollWhenNoRequestSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.008,
                    "name": "testNoDoubleDeallocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.012,
                    "name": "testQuotaMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testExpiryOfUnsentBatchesShouldNotCauseUnresolvedSequences",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testTransactionalSplitBatchAndSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testClusterAuthorizationExceptionInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testCorrectHandlingOfDuplicateSequenceError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testAppendInExpiryCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testExpiredBatchDoesNotSplitOnMessageTooLargeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testBatchesDrainedWithOldProducerIdShouldSucceedOnSubsequentRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testIdempotenceWithMultipleInflights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.21,
                    "name": "testCloseWithProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testShouldRaiseOutOfOrderSequenceExceptionToUserIfLogWasNotTruncated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testSenderMetricsTemplates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testInitProducerIdRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testForceCloseWithProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testTooLargeBatchesAreSafelyRemoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testCorrectHandlingOfOutOfOrderResponses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testCanRetryWithoutIdempotence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testRetryWhenProducerIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testInflightBatchesExpireOnDeliveryTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testResetOfProducerStateShouldAllowQueuedBatchesToDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testDownConversionForMismatchedMagicValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testSendInOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testClusterAuthorizationExceptionInInitProducerIdRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testUnsupportedVersionInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testForceShutdownWithIncompleteTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testUnresolvedSequencesAreNotFatal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testCorrectHandlingOfOutOfOrderResponsesWhenSecondSucceeds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.031,
                    "name": "testResetNextBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.008,
                    "name": "testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testUnsupportedForMessageFormatInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testIncompleteTransactionAbortOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.001,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testSequenceNumberIncrement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testExpiredBatchesInMultiplePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testBumpEpochWhenOutOfOrderSequenceReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.009,
                    "name": "testIdempotenceWithMultipleInflightsRetriedInOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testExpiredBatchDoesNotRetry",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest",
                    "duration": 0.004,
                    "name": "unavailablePartitionsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest",
                    "duration": 0.0,
                    "name": "testStickyPartitionCache",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.074,
                    "name": "testTopicAuthorizationFailureInAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "shouldFailAbortIfAddOffsetsFailsWithFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.011,
                    "name": "testDropCommitOnBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.009,
                    "name": "testSendOffsetsWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.007,
                    "name": "testBatchFailureAfterProducerReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBumpEpochAndResetSequenceNumbersAfterUnknownProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testAllowDrainInAbortableErrorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testEpochBumpAfterLastInflightBatchFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.007,
                    "name": "testTransitionToFatalErrorWhenRetriedBatchIsExpired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testNoFailedBatchHandlingWhenTxnManagerIsInFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testLookupCoordinatorOnDisconnectAfterSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.007,
                    "name": "testAbortTransactionAndResetSequenceNumberOnUnknownProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testSendOffsetWithGroupMetadataSuccessAsAutoDowngradeTxnCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithInFlightPartitionAddAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testCanBumpEpochDuringCoordinatorDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testMaybeAddPartitionToTransactionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionBeforeInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testMaybeAddPartitionToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testHandlingOfCoordinatorLoadingErrorOnTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIsSendToPartitionAllowedWithPartitionNotAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testAddPartitionToTransactionOverridesRetryBackoffForConcurrentTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIsSendToPartitionAllowedWithAddedPartitionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testProducerFencedException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIsSendToPartitionAllowedWithInFlightPartitionAddAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransactionalIdAuthorizationFailureInFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testAllowAbortOnProduceFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testCommitTransactionWithUnsentProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testFailIfNotReadyForSendNoProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testTransitionToAbortableErrorOnBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testRecoveryFromAbortableErrorTransactionStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransactionalIdAuthorizationFailureInAddOffsetsToTxn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithPendingPartitionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testTransitionToAbortableErrorOnMultipleBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testTransactionalIdAuthorizationFailureInInitProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testAbortResendsAddPartitionErrorIfRetried",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithPendingPartitionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testBumpTransactionalEpochOnRecoverableAddOffsetsRequestError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBatchCompletedAfterProducerReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testRaiseErrorWhenNoPartitionsPendingOnDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testFailIfNotReadyForSendAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testLookupCoordinatorOnDisconnectBeforeSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "shouldNotSendAbortTxnRequestWhenOnlyAddPartitionsRequestFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.006,
                    "name": "testRetryCommitTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testFailedInflightBatchAfterEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testMultipleAddPartitionsPerForOneProduce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testGroupAuthorizationFailureInFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendIdempotentProducerFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testHasOngoingTransactionAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "shouldNotAddPartitionsToTransactionWhenTopicAuthorizationFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testHealthyPartitionRetriesDuringEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testDefaultSequenceNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testDisallowCommitOnProduceFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testLookupCoordinatorOnNotCoordinatorError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testInitializeTransactionsTwiceRaisesError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHandlingOfUnknownTopicPartitionErrorOnTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testCancelUnsentAddPartitionsAndProduceOnAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionBeforeBeginTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "resendFailedProduceRequestAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testUnsupportedForMessageFormatInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlreadyAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testBumpTransactionalEpochOnRecoverableAddPartitionRequestError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.003,
                    "name": "testRetryAbortTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testSendOffsetWithGroupMetadataFailAsAutoDowngradeTxnCommitNotEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testFailIfNotReadyForSendIdempotentProducer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendNoOngoingTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.004,
                    "name": "testRetryAbortTransactionAfterCommitTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testTransactionalIdAuthorizationFailureInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testUnsupportedInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHasOngoingTransactionSuccessfulCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.003,
                    "name": "testRetryCommitTransactionAfterAbortTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithAddedPartitionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testUnknownMemberIdInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testSequenceNumberOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testHandlingOfUnknownTopicPartitionErrorOnAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testFlushPendingPartitionsOnCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testUnsupportedFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testNoDrainWhenPartitionsPending",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.008,
                    "name": "testBumpTransactionalEpochOnTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testSenderShutdownWithPendingTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotSendAbortTxnRequestWhenOnlyAddOffsetsRequestFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testRecoveryFromAbortableErrorTransactionNotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testFencedInstanceIdInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testAddPartitionToTransactionRetainsRetryBackoffForRegularRetriableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testBumpTransactionalEpochOnUnknownProducerIdError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testNoProducerIdResetAfterLastInFlightBatchSucceeds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testCommitTransactionWithInFlightProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.007,
                    "name": "testRecoveryFromAbortableErrorProduceRequestInRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testGroupAuthorizationFailureInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testBumpEpochAfterTimeoutWithoutPendingInflightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testAbortableErrorWhileAbortInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testBasicTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testCommitWithTopicAuthorizationFailureInAddPartitionsInFlight",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testAbortResendsProduceRequestIfRetried",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testHasOngoingTransactionSuccessfulAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIllegalGenerationInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testFindCoordinatorAllowedInAbortableErrorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransactionalIdAuthorizationFailureInAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testBumpTransactionalEpochOnAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testDisconnectAndRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHasOngoingTransactionFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testAbortTransactionAndReuseSequenceNumberOnError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testEndTxnNotSentIfIncompleteBatches",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.ClusterTest",
                    "duration": 0.008,
                    "name": "testReturnUnmodifiableCollections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.ClusterTest",
                    "duration": 0.0,
                    "name": "testBootstrap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.037,
                    "name": "testCompletingFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.013,
                    "name": "testThenApply",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.002,
                    "name": "testCompleteFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.005,
                    "name": "testAllOfFuturesHandlesZeroFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.003,
                    "name": "testFutureTimeoutWithZeroWait",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.031,
                    "name": "testAllOfFutures",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.PartitionInfoTest",
                    "duration": 0.0,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.TopicPartitionTest",
                    "duration": 0.007,
                    "name": "testSerializationRoundtrip",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.TopicPartitionTest",
                    "duration": 0.001,
                    "name": "testTopiPartitionSerializationCompatibility",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.01,
                    "name": "shouldThrowOnMatchPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnAnyPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "testUnknowns",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "testMatching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnAnyResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "shouldNotThrowOnUnknownResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "testMatchesAtMostOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "shouldNotThrowOnUnknownPatternType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.005,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.001,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.0,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.001,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.013,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.001,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.018,
                    "name": "shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldBeUnknownIfResourceTypeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchPrefixedIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.002,
                    "name": "shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.002,
                    "name": "shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWherePatternTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceNameIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchWherePatternTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchIfDifferentResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchLiteralWildcardAgainstOtherName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldBeUnknownIfPatternTypeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchIfDifferentPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralIfNamePrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentNameCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchLiteralWildcardTheWayAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralWildcardIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.019,
                    "name": "shouldThrowIfResourceNameIsNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfPatternTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.0,
                    "name": "shouldThrowIfPatternTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.004,
                    "name": "testEviction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.0,
                    "name": "testPutGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.345,
                    "name": "testOriginalsWithPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.031,
                    "name": "testConfigProvidersPropsAsParam",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.007,
                    "name": "testConfiguredInstances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.004,
                    "name": "testAutoConfigResolutionWithDuplicateConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.003,
                    "name": "testOriginalsWithConfigProvidersProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.003,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.023,
                    "name": "testValuesWithSecondaryPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.003,
                    "name": "testConfigProviderConfigurationWithConfigParams",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testImmutableOriginalsWithConfigProvidersProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.002,
                    "name": "testAutoConfigResolutionWithMultipleConfigProviders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testValuesWithPrefixOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testDocumentationOf",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testAutoConfigResolutionWithMissingConfigKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testDocumentationOfExpectNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.034,
                    "name": "testAutoConfigResolutionWithInvalidConfigProviderClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.002,
                    "name": "testValuesWithPrefixAllOrNothing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testAutoConfigResolutionWithMissingConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testUnused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.022,
                    "name": "testClassConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testNiceTimeUnits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.246,
                    "name": "testBasicTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNullDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.004,
                    "name": "testParseForValidate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testInvalidDefaultRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testGroupInference",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testConvertValueToStringNestedClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testConvertValueToStringInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.014,
                    "name": "testValidators",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testValidateCannotParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.003,
                    "name": "testValidate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testInternalConfigDoesntShowUpInDocs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testInvalidDefaultString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testClassWithAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.006,
                    "name": "testSslPasswords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testDynamicUpdateModeInDocs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testBaseConfigDefDependents",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringShort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "toRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testCanAddInternalConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testMissingRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testParsingEmptyDefaultValueForStringFieldShouldSucceed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringPassword",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNiceMemoryUnits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testConvertValueToStringList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testConvertValueToStringLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringBoolean",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testNullDefaultWithValidator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testMissingDependentConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "toEnrichedRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testDefinedTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNestedClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testBadInputs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testValidateMissingConfigKey",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.003,
                    "name": "shouldReturnUnknownForUnknownCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.0,
                    "name": "shouldGetTypeFromId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.002,
                    "name": "shouldRoundTripEveryType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.003,
                    "name": "testNoReplacement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceVariable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceMultipleVariablesWithoutPathInValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceVariableWithTTL",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testNullConfigValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.001,
                    "name": "testSingleLevelOfIndirection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.001,
                    "name": "testReplaceMultipleVariablesInValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.001,
                    "name": "testReplaceVariableNoPath",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.049,
                    "name": "testSaslLoginRefreshWindowJitterMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshMinPeriodSecondsMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshBufferSecondsMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshWindowFactorMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshMaxValuesAreValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshWindowJitterMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshMinPeriodSecondsMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshBufferSecondsMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshWindowFactorMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshMinValuesAreValid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.004,
                    "name": "testEmptyPathWithKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testNullPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testEmptyPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.001,
                    "name": "testNullPathWithKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.001,
                    "name": "testGetOneKeyAtPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testGetAllKeysAtPath",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.013,
                    "name": "testEmptyFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.004,
                    "name": "testToStringFinalizedFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.001,
                    "name": "testToStringSupportedFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.002,
                    "name": "testFinalizedFeaturesFromMapFailureWithInvalidMissingMaxVersionLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.001,
                    "name": "testSuppportedFeaturesFromMapFailureWithInvalidMissingMaxVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.001,
                    "name": "testFromFeaturesMapToFeaturesMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.002,
                    "name": "testNullFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.0,
                    "name": "testGetAllFeaturesAPI",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.0,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.001,
                    "name": "testGetAPI",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FeaturesTest",
                    "duration": 0.0,
                    "name": "testFromToFinalizedFeaturesMap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.feature.FinalizedVersionRangeTest",
                    "duration": 0.005,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FinalizedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testIsCompatibleWith",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FinalizedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testFromToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.FinalizedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testMinMax",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.005,
                    "name": "testFailDueToInvalidParams",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.004,
                    "name": "testFromMapFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testFromToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.feature.SupportedVersionRangeTest",
                    "duration": 0.001,
                    "name": "testMinMax",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.016,
                    "name": "shouldThrowNpeWhenAddingNullHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.006,
                    "name": "testAdd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.001,
                    "name": "testNew",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.001,
                    "name": "testReadOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.009,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.001,
                    "name": "testLastHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testAddRemoveInterleaved",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.003,
                    "name": "testSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.001,
                    "name": "testClear",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testMoveToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.001,
                    "name": "testUpdateAndMoveToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testPartitionValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.004,
                    "name": "shouldThrowOnInvalidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.012,
                    "name": "shouldAcceptValidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "testTopicHasCollision",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "testTopicHasCollisionChars",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "shouldRecognizeInvalidCharactersInTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.005,
                    "name": "testReleaseForeignBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.973,
                    "name": "testBuffersGarbageCollected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationBound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testReleaseNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testDoubleFree",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testNegativeMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationOverMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testMaxAllocationLargerThanSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testZeroMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testZeroSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testNegativeSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationNegative",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.002,
                    "name": "testUniqueness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.001,
                    "name": "testFromApiKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.0,
                    "name": "testInvalidFromApiKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.001,
                    "name": "testHeaderVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.068,
                    "name": "testOffsetCommitDefaultGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.009,
                    "name": "testResponseSchemas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.011,
                    "name": "testJoinGroupRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.012,
                    "name": "testJoinGroupResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testAddPartitionsToTxnVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.004,
                    "name": "testMessageVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.005,
                    "name": "testDefaultValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testRequestSchemas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testCompareWithUnknownTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.013,
                    "name": "testProduceResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testLeaveGroupResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.011,
                    "name": "testTxnOffsetCommitRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.007,
                    "name": "testMetadataVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testTxnOffsetCommitResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.005,
                    "name": "testSyncGroupDefaultGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.004,
                    "name": "testHeartbeatVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.016,
                    "name": "testOffsetCommitResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testAddOffsetsToTxnVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.001,
                    "name": "testDescribeAclsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testLeaderAndIsrVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.014,
                    "name": "testOffsetCommitRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.021,
                    "name": "testSimpleMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testUnknownTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testCreateTopicsVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testNonIgnorableFieldWithDefaultNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testWriteNullForNonNullableFieldRaisesException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.02,
                    "name": "testOffsetFetchVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testOffsetForLeaderEpochVersions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.012,
                    "name": "shouldRoundTripFieldThroughStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripFieldThroughStructWithNullable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.005,
                    "name": "testMyTaggedStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyNullableString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldStoreField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testMyStructUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripFieldThroughBufferWithNullable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testMyStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyTaggedIntArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfCannotWriteNonIgnorableField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldImplementEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testMyInt16",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldDefaultField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripFieldThroughBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testTaggedLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testTaggedUuid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.006,
                    "name": "testPredicateAndDynamicReload",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.002,
                    "name": "testJmxRegistration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.001,
                    "name": "testJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.006,
                    "name": "testJmxRegistrationSanitization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.001,
                    "name": "testDeprecatedJmxPrefixWithDefaultMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.013,
                    "name": "testSetAttribute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.002,
                    "name": "testSetAttributes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttribute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttributeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testInvoke",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttributesWithUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttributes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithValidNamespaceAndNoLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithValidNamespaceAndLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithNullNamespaceAndLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.001,
                    "name": "testKafkaMetricsContextLabelsAreImmutable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.001,
                    "name": "testCreationWithValidNamespaceAndNullLabelValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testSimpleRate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.011,
                    "name": "testSimpleStats",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testOldDataHasNoEffect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testQuotasEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRemoveInactiveMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRemoveChildSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.089,
                    "name": "testPercentilesWithRandomNumbersAndLinearBucketing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.003,
                    "name": "shouldPinLargerValuesToMax",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "shouldPinSmallerValuesToMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testMetricName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testSampledStatReturnsInitialValueWhenNoValuesExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.004,
                    "name": "testDeprecatedMetricValueMethod",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testRateWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.004,
                    "name": "testMetricInstances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testTimeWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.003,
                    "name": "testEventWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testSampledStatReturnsNaNWhenNoValuesExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.415,
                    "name": "testConcurrentReadUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.003,
                    "name": "testRemoveMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testBadSensorHierarchy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.005,
                    "name": "testRemoveSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.978,
                    "name": "testConcurrentReadUpdateReport",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.008,
                    "name": "testPercentiles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testDuplicateMetricName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.003,
                    "name": "testQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testHierarchicalSensors",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.001,
                    "name": "testIdempotentAdd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.013,
                    "name": "testExpiredSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.0,
                    "name": "testShouldRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.016,
                    "name": "testCheckQuotasInMultiThreads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.003,
                    "name": "shouldReturnPresenceOfMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.001,
                    "name": "testRecordLevelEnum",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.003,
                    "name": "testCreateAndRemoveMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.0,
                    "name": "testCreateAndClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.0,
                    "name": "testCreateMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.006,
                    "name": "testFrequencyCenterValueAboveMax",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.001,
                    "name": "testFrequencyCenterValueBelowMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.007,
                    "name": "testUseWithMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.002,
                    "name": "testMoreFrequencyParametersThanBuckets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.002,
                    "name": "testBooleanFrequencies",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.004,
                    "name": "testHistogram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.0,
                    "name": "testConstantBinScheme",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.001,
                    "name": "testLinearBinScheme",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.001,
                    "name": "testConstantBinSchemeWithPositiveRange",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.MeterTest",
                    "duration": 0.003,
                    "name": "testMeter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 0.019,
                    "name": "testChannelBuilderConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 0.004,
                    "name": "testCreateConfigurableKafkaPrincipalBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 1.864,
                    "name": "testCreateOldPrincipalBuilder",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.KafkaChannelTest",
                    "duration": 0.385,
                    "name": "testReceiving",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.KafkaChannelTest",
                    "duration": 0.013,
                    "name": "testSending",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.NetworkReceiveTest",
                    "duration": 1.677,
                    "name": "testBytesRead",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.559,
                    "name": "testNativeGssapiCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.002,
                    "name": "testCloseBeforeConfigureIsIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.087,
                    "name": "testCloseAfterConfigIsIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 2.103,
                    "name": "testClientChannelBuilderWithBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.001,
                    "name": "testLoginManagerReleasedIfConfigureThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.011,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.009,
                    "name": "testSendLargeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.849,
                    "name": "testLargeMessageSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.01,
                    "name": "testLowestPriorityChannel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.01,
                    "name": "testConnectDisconnectDuringInSinglePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testConnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.003,
                    "name": "registerFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.007,
                    "name": "testMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.01,
                    "name": "testCloseAllChannels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testExpireConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testCantSendWithInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testOutboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testImmediatelyConnectedCleaned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testExistingConnectionId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.002,
                    "name": "testCantSendWithoutConnecting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testCloseOldestConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testServerDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.009,
                    "name": "testMetricsCleanupOnSelectorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 2.317,
                    "name": "testPartialSendAndReceiveReflectedInMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testWriteCompletesSendWithNoBytesWritten",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.003,
                    "name": "testIdleExpiryWithoutReadyKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testConnectionsByClientMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.011,
                    "name": "testInboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.002,
                    "name": "testNoRouteToHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testClearCompletedSendsAndReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.105,
                    "name": "testPartialReceiveGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.299,
                    "name": "testNormalOperation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.01,
                    "name": "testMuteOnOOM",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.048,
                    "name": "testCloseOldestConnectionWithMultiplePendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testExpireClosedConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testConnectionRefused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.034,
                    "name": "testChannelCloseWhileProcessingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testEmptyRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 3.03,
                    "name": "testBytesBufferedChannelAfterMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.898,
                    "name": "testBytesBufferedChannelWithNoIncomingBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.479,
                    "name": "testRenegotiationFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.843,
                    "name": "testDisconnectWithIntermediateBufferedBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.281,
                    "name": "testConnectionWithCustomKeyManager",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.313,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.574,
                    "name": "testSendLargeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 64.967,
                    "name": "testLargeMessageSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.396,
                    "name": "testLowestPriorityChannel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.105,
                    "name": "testConnectDisconnectDuringInSinglePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.541,
                    "name": "testConnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.16,
                    "name": "registerFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.356,
                    "name": "testMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.365,
                    "name": "testCloseAllChannels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.659,
                    "name": "testExpireConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.41,
                    "name": "testCantSendWithInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.552,
                    "name": "testOutboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.156,
                    "name": "testImmediatelyConnectedCleaned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.383,
                    "name": "testExistingConnectionId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.494,
                    "name": "testCantSendWithoutConnecting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.798,
                    "name": "testCloseOldestConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.709,
                    "name": "testServerDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.221,
                    "name": "testMetricsCleanupOnSelectorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.555,
                    "name": "testPartialSendAndReceiveReflectedInMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.446,
                    "name": "testWriteCompletesSendWithNoBytesWritten",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.338,
                    "name": "testIdleExpiryWithoutReadyKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.233,
                    "name": "testConnectionsByClientMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.202,
                    "name": "testInboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.113,
                    "name": "testNoRouteToHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.579,
                    "name": "testClearCompletedSendsAndReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.494,
                    "name": "testPartialReceiveGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.44,
                    "name": "testNormalOperation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.538,
                    "name": "testMuteOnOOM",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.359,
                    "name": "testCloseOldestConnectionWithMultiplePendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.438,
                    "name": "testExpireClosedConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.227,
                    "name": "testConnectionRefused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.354,
                    "name": "testChannelCloseWhileProcessingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.4,
                    "name": "testEmptyRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.846,
                    "name": "testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.964,
                    "name": "testListenerConfigOverride[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.323,
                    "name": "testValidEndpointIdentificationCN[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.774,
                    "name": "testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.771,
                    "name": "testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.406,
                    "name": "testClientEndpointNotValidated[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.811,
                    "name": "testUnsupportedCiphers[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.508,
                    "name": "testUnsupportedTLSVersion[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 7.186,
                    "name": "testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.007,
                    "name": "testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 7.575,
                    "name": "testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.701,
                    "name": "testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 8.323,
                    "name": "testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.759,
                    "name": "testInvalidKeystorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.548,
                    "name": "testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.738,
                    "name": "testCustomClientSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.598,
                    "name": "testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.732,
                    "name": "testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 6.62,
                    "name": "testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 7.785,
                    "name": "testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.677,
                    "name": "testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.495,
                    "name": "testInvalidEndpointIdentification[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.332,
                    "name": "testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.81,
                    "name": "testEndpointIdentificationDisabled[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.921,
                    "name": "testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.618,
                    "name": "testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.624,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.492,
                    "name": "testNullTruststorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 6.772,
                    "name": "testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.388,
                    "name": "testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.916,
                    "name": "testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.947,
                    "name": "testTLSDefaults[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.363,
                    "name": "testSelectorPollReadSize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.009,
                    "name": "testNetReadBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.883,
                    "name": "testNetWriteBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.904,
                    "name": "testCustomServerSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.684,
                    "name": "testInvalidTruststorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.793,
                    "name": "testServerRequestMetrics[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.714,
                    "name": "testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.077,
                    "name": "testApplicationBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.68,
                    "name": "testClosePlaintext[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.902,
                    "name": "testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.025,
                    "name": "testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.517,
                    "name": "testInvalidKeyPassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.602,
                    "name": "testCloseSsl[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.46,
                    "name": "testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.45,
                    "name": "testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.712,
                    "name": "testListenerConfigOverride[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.906,
                    "name": "testValidEndpointIdentificationCN[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.901,
                    "name": "testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.648,
                    "name": "testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.627,
                    "name": "testClientEndpointNotValidated[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.275,
                    "name": "testUnsupportedCiphers[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.848,
                    "name": "testUnsupportedTLSVersion[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.442,
                    "name": "testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.341,
                    "name": "testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.141,
                    "name": "testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.952,
                    "name": "testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.842,
                    "name": "testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.472,
                    "name": "testInvalidKeystorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.478,
                    "name": "testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.793,
                    "name": "testCustomClientSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.7,
                    "name": "testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.425,
                    "name": "testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.597,
                    "name": "testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.166,
                    "name": "testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.489,
                    "name": "testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.175,
                    "name": "testInvalidEndpointIdentification[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.08,
                    "name": "testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.207,
                    "name": "testEndpointIdentificationDisabled[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.47,
                    "name": "testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.607,
                    "name": "testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.41,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.975,
                    "name": "testNullTruststorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.491,
                    "name": "testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.155,
                    "name": "testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.957,
                    "name": "testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.503,
                    "name": "testTLSDefaults[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.127,
                    "name": "testSelectorPollReadSize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.105,
                    "name": "testNetReadBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.892,
                    "name": "testNetWriteBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.497,
                    "name": "testCustomServerSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.996,
                    "name": "testInvalidTruststorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.042,
                    "name": "testServerRequestMetrics[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.105,
                    "name": "testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.713,
                    "name": "testApplicationBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.512,
                    "name": "testClosePlaintext[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.362,
                    "name": "testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.892,
                    "name": "testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.438,
                    "name": "testInvalidKeyPassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.799,
                    "name": "testCloseSsl[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.578,
                    "name": "testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.777,
                    "name": "testCiphersSuiteForTls12FailsForTls13",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.766,
                    "name": "testCiphersSuiteForTls12",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.514,
                    "name": "testCiphersSuiteForTls13",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 1.248,
                    "name": "testCiphersSuiteFailForServerTls12ClientTls13",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 5.291,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 0.82,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 0.482,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 3.114,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 3.037,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.772,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 1.186,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.954,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.502,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.452,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.517,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.384,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.763,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 3.464,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.737,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.663,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "testForIdWithInvalidIdLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "schemaVersionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.001,
                    "name": "testForIdWithInvalidIdHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "testResponseThrottleTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.001,
                    "name": "testExceptionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testForExceptionDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testUniqueExceptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testForExceptionInheritance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.001,
                    "name": "testNoneException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testUniqueErrorCodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testExceptionsAreNotGeneric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.004,
                    "name": "testCompareRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testDeepToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testByteBufferToArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testDuplicate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ProtoUtilsTest",
                    "duration": 0.0,
                    "name": "testDelayedAllocationSchemaDetection",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.002,
                    "name": "testReadWithMissingNonOptionalExtraDataAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.002,
                    "name": "testNulls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadStringSizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadCompactArraySizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testNullableDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadIgnoringExtraDataAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeStringSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadWhenOptionalDataMissingAtTheEndIsTolerated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadWhenOptionalDataMissingAtTheEndIsNotTolerated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadArraySizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadZeroCompactArraySize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeBytesSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testStructEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.002,
                    "name": "testReadBytesSizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeArraySize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testOutOfOrderTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testWritingZeroRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testInvalidNextDefinedTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.002,
                    "name": "testWritingSeveralRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.StructTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetCreateTimeNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetNoTimestampTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidWrapperOffsetV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLogAppendTimeV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetPartitionLeaderEpochNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetPartitionLeaderEpochNotAllowedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetCreateTimeV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLastOffsetCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testZStdCompressionTypeWithV0OrV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLogAppendTimeNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testIterateCompressedRecordWithWrapperOffsetZero",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.BufferSupplierTest",
                    "duration": 0.001,
                    "name": "testGrowableBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.001,
                    "name": "iteratorRaisesOnTooSmallRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.001,
                    "name": "iteratorRaisesOnInvalidMagic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.0,
                    "name": "iteratorRaisesOnTooLargeRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.001,
                    "name": "iteratorIgnoresIncompleteEntries",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.CompressionRatioEstimatorTest",
                    "duration": 0.001,
                    "name": "testUpdateEstimation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.CompressionTypeTest",
                    "duration": 0.314,
                    "name": "testLZ4FramingMagicV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.CompressionTypeTest",
                    "duration": 0.002,
                    "name": "testLZ4FramingMagicV1",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.ControlRecordTypeTest",
                    "duration": 0.0,
                    "name": "testParseUnknownType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ControlRecordTypeTest",
                    "duration": 0.001,
                    "name": "testParseUnknownVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetNoTimestampTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidRecordCountTooLittleCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidRecordCountTooLittleNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testStreamingIteratorConsistency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testDecrementSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.006,
                    "name": "testSkipKeyValueIteratorCorrectness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetLastOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "buildDefaultRecordBatchWithSequenceWrapAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidRecordSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetPartitionLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "buildDefaultRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testReadAndWriteControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidRecordCountTooManyNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "buildDefaultRecordBatchWithProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidRecordCountTooManyCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSizeInBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidCrc",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testIncrementSequence",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidHeaderKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.005,
                    "name": "testBasicSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testBasicSerdeInvalidHeaderCountTooLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidHeaderValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testNullHeaderKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.002,
                    "name": "testInvalidNumHeadersPartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidKeySizePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testBasicSerdeInvalidHeaderCountTooHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidHeaderKeyPartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidHeaderValuePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidValueSizePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testUnderflowReadingVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testUnderflowReadingTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidValueSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidNumHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidKeySize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testSerdeNoSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testNullHeaderKeyPartial",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.004,
                    "name": "testNotEnoughBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.001,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testIllegalNegativeVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.001,
                    "name": "testCannotDeserializeUnknownControlType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testUnknownControlTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testDeserializeNewerVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.043,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.043,
                    "name": "testSimpleBatchIteration[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testWriteTo[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.125,
                    "name": "testSimpleBatchIteration[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testSimpleBatchIteration[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.001,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteTo[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testSimpleBatchIteration[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.026,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.024,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.043,
                    "name": "testSimpleBatchIteration[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testSimpleBatchIteration[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.041,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.026,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testSimpleBatchIteration[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteTo[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.075,
                    "name": "testSimpleBatchIteration[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationV2[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.076,
                    "name": "testSimpleBatchIteration[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationV2[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testSimpleBatchIteration[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationV2[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testSimpleBatchIteration[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationV2[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.109,
                    "name": "testSimpleBatchIteration[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationV2[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.089,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.04,
                    "name": "testIterationOverPartialAndTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.022,
                    "name": "testRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.175,
                    "name": "testDownconversionAfterMessageFormatDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.334,
                    "name": "testAppendProtectsFromOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.026,
                    "name": "testTruncateNotCalledIfSizeIsBiggerThanTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.024,
                    "name": "testOutOfRangeSlice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.037,
                    "name": "testFileSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.031,
                    "name": "testIteratorWithLimits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.039,
                    "name": "testTruncateNotCalledIfSizeIsSameAsTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.037,
                    "name": "testPreallocateTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.034,
                    "name": "testOpenOversizeFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.034,
                    "name": "testTruncateIfSizeIsDifferentToTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.032,
                    "name": "testFormatConversionWithPartialMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.026,
                    "name": "testIterationDoesntChangePosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.025,
                    "name": "testPreallocateFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.051,
                    "name": "testPreallocateClearShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.385,
                    "name": "testConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 2.208,
                    "name": "testSliceSizeLimitWithConcurrentWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.027,
                    "name": "testSearchForTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.023,
                    "name": "testSearch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.003,
                    "name": "testDirectBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.005,
                    "name": "testBadBlockSize[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.074,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.309,
                    "name": "testConversion[compressionType=NONE, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.066,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversion[compressionType=GZIP, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.051,
                    "name": "testConversion[compressionType=NONE, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversion[compressionType=GZIP, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.051,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.051,
                    "name": "testConversion[compressionType=NONE, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.059,
                    "name": "testConversion[compressionType=GZIP, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest",
                    "duration": 0.049,
                    "name": "testConversionOfCommitMarker",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.002,
                    "name": "testChecksum[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.002,
                    "name": "testEquality[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.002,
                    "name": "testChecksum[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.002,
                    "name": "testFields[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.019,
                    "name": "testChecksum[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.016,
                    "name": "testChecksum[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.015,
                    "name": "testChecksum[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.025,
                    "name": "testChecksum[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.034,
                    "name": "testChecksum[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.027,
                    "name": "testChecksum[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.011,
                    "name": "testChecksum[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.027,
                    "name": "testChecksum[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.027,
                    "name": "testChecksum[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.011,
                    "name": "testChecksum[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.027,
                    "name": "testChecksum[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.026,
                    "name": "testChecksum[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.034,
                    "name": "testChecksum[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.037,
                    "name": "testChecksum[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.013,
                    "name": "testChecksum[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.011,
                    "name": "testChecksum[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.013,
                    "name": "testChecksum[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.012,
                    "name": "testChecksum[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.025,
                    "name": "testChecksum[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.027,
                    "name": "testChecksum[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.034,
                    "name": "testChecksum[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.012,
                    "name": "testChecksum[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.012,
                    "name": "testChecksum[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.025,
                    "name": "testChecksum[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.012,
                    "name": "testChecksum[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.012,
                    "name": "testChecksum[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.026,
                    "name": "testChecksum[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.029,
                    "name": "testChecksum[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.021,
                    "name": "testChecksum[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.028,
                    "name": "testChecksum[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.029,
                    "name": "testChecksum[479]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[479]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[479]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.006,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.01,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.008,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.003,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.336,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.439,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.198,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.185,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.003,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.004,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.25,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.166,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.68,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.173,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.173,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.181,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testNextBatchSize[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.005,
                    "name": "testFilterToAlreadyCompactedLog[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.004,
                    "name": "testFilterToBatchDiscard[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToAlreadyCompactedLog[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToBatchDiscard[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesLogAppendTime[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.066,
                    "name": "testNextBatchSize[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToAlreadyCompactedLog[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.296,
                    "name": "testChecksum[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToAlreadyCompactedLog[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethodWithHeaders[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesLogAppendTime[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testIterator[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesProducerInfo[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.031,
                    "name": "testNextBatchSize[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToAlreadyCompactedLog[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesLogAppendTime[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testFilterToWithUndersizedBuffer[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethodWithHeaders[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testFilterToPreservesProducerInfo[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethodWithHeaders[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesProducerInfo[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesLogAppendTime[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testFilterTo[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.005,
                    "name": "testFilterToPreservesProducerInfo[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MultiRecordsSendTest",
                    "duration": 0.004,
                    "name": "testSendsFreedAfterWriting",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.043,
                    "name": "testCompressedIterationWithNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.006,
                    "name": "testCompressedIterationWithEmptyRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.001,
                    "name": "testIsValidWithChecksumMismatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.001,
                    "name": "testIsValidWithTooSmallBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.replica.ReplicaSelectorTest",
                    "duration": 0.042,
                    "name": "testSameRackSelector",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnRequestTest",
                    "duration": 0.013,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest",
                    "duration": 0.003,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest",
                    "duration": 0.0,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest",
                    "duration": 0.123,
                    "name": "testErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest",
                    "duration": 0.001,
                    "name": "testPartitionDir",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsResponseTest",
                    "duration": 0.001,
                    "name": "testErrorCounts",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.01,
                    "name": "shouldReturnAllKeysWhenMagicIsCurrentValueAndThrottleMsIsDefaultThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldCreateApiResponseThatHasAllApiKeysSupportedByBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldReturnFeatureKeysWhenMagicIsCurrentValueAndThrottleMsIsDefaultThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldHaveCorrectDefaultApiVersionsResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldCreateApiResponseOnlyWithKeysSupportedByMagicValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ControlledShutdownRequestTest",
                    "duration": 0.001,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ControlledShutdownRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.003,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.007,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnV0IfPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripLiteralV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripAnyV0AsLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnUnknownElements",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.005,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.002,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.002,
                    "name": "testGetErrorWithInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.0,
                    "name": "testGetThrottleTimeMs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.001,
                    "name": "testGetErrorWithExistingGroupIds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.008,
                    "name": "shouldThrowIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripPrefixedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripAnyV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnV0IfPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripLiteralV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripLiteralV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripAnyV0AsLiteral",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.003,
                    "name": "shouldThrowIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.001,
                    "name": "testAclBindings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.002,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EndTxnRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EndTxnResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.002,
                    "name": "testWithUndefinedEndOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.0,
                    "name": "testWithUndefinedEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.HeartbeatRequestTest",
                    "duration": 0.001,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldRecognizeInvalidCharactersInGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.001,
                    "name": "testRebalanceTimeoutDefaultsToSessionTimeoutV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldAcceptValidGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.001,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInvalidGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.005,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.004,
                    "name": "testTopicPartitionGroupingSizeReduction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.003,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.008,
                    "name": "testVersionLogic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsWithTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.001,
                    "name": "testErrorCountsNoTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.006,
                    "name": "testErrorCountsFromGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.005,
                    "name": "testSingleLeaveConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.0,
                    "name": "testBuildEmptyMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.001,
                    "name": "testMultiLeaveConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.0,
                    "name": "testShouldThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.001,
                    "name": "testEqualityWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.003,
                    "name": "testEqualityWithMemberResponses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithMemberResponses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.001,
                    "name": "testEmptyMeansAllTopicsV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.001,
                    "name": "testEmptyMeansEmptyForVersionsAboveV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.002,
                    "name": "testMetadataRequestVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponseTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.002,
                    "name": "testVersionSupportForGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitResponseTest",
                    "duration": 0.105,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitResponseTest",
                    "duration": 0.002,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.002,
                    "name": "testBuildThrowForUnsupportedRequireStable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.001,
                    "name": "testConstructorFailForUnsupportedRequireStable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.001,
                    "name": "testShouldThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.003,
                    "name": "testNullableMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.004,
                    "name": "testStructBuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.0,
                    "name": "testUseDefaultLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest",
                    "duration": 0.001,
                    "name": "testForConsumerRequiresVersion3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest",
                    "duration": 0.004,
                    "name": "testDefaultReplicaId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.002,
                    "name": "testMixedTransactionalData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testMixedIdempotentData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlaggedAsIdempotentWhenRecordsNotIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV6AndBelowCannotUseZStdCompression",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "shouldBeFlaggedAsTransactionalWhenTransactionalRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlaggedAsTransactionalWhenNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV3AndAboveCannotHaveNoRecordBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testBuildWithCurrentMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testBuildWithOldMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV3AndAboveShouldContainOnlyOneRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testV3AndAboveCannotUseMagicV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testV3AndAboveCannotUseMagicV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldBeFlaggedAsIdempotentWhenIdempotentRecords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.003,
                    "name": "produceResponseVersionTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.104,
                    "name": "produceResponseV5Test",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.001,
                    "name": "produceResponseRecordErrorsTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestContextTest",
                    "duration": 0.13,
                    "name": "testSerdeUnsupportedApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.001,
                    "name": "testSerdeControlledShutdownV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.0,
                    "name": "testRequestHeaderV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.001,
                    "name": "testRequestHeaderV2",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.004,
                    "name": "testValidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "cannotUseFindCoordinatorV0ToFindTransactionCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.006,
                    "name": "testJoinGroupRequestVersion0RebalanceTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.006,
                    "name": "testFetchRequestIsolationLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "testApiVersionResponseStructParsingFallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.005,
                    "name": "testCreateTopicRequestV3FailsIfNoPartitionsOrReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "testOffsetFetchRequestBuilderToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testResponseHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.208,
                    "name": "testSerialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.005,
                    "name": "verifyFetchResponseFullWrites",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "fetchResponseVersionTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testFetchResponseV4",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testFetchRequestMaxBytesOldVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "testListGroupRequestV3FailsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "produceRequestToStringTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testCreateTopicRequestV0FailsIfValidateOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.003,
                    "name": "testControlledShutdownResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseStructParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseWithNotUnsupportedError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testFetchRequestWithMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testInitProducerIdRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionsRequestBeforeV3Validation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseStructParsingFallbackException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseWithUnsupportedError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "produceRequestGetErrorResponseTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.004,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.004,
                    "name": "testBuilderNormalizationWithAllDeletePartitionEqualToTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.0,
                    "name": "testBuilderNormalizationWithAllDeletePartitionEqualToFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.002,
                    "name": "testPartitionStatesNormalization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.005,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.001,
                    "name": "testTopicStatesNormalization",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.0,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsWithTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.001,
                    "name": "testErrorCountsNoTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsFromGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.SyncGroupRequestTest",
                    "duration": 0.001,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.005,
                    "name": "testDisableGroupMetadataAutoDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testEnableGroupMetadataAutoDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.01,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponseTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.002,
                    "name": "testVersionSupportForGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitResponseTest",
                    "duration": 0.0,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitResponseTest",
                    "duration": 0.002,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.004,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.004,
                    "name": "testTopicPartitionGroupingSizeReduction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.008,
                    "name": "testVersionLogic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersRequestTest",
                    "duration": 0.005,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersRequestTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.003,
                    "name": "shouldMatchWildcardIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchWhereResourceNameIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchWildcardAgainstOtherName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentNameCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralWildcardTheWayAround",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.002,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.001,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.001,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.001,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.007,
                    "name": "testLoadForServerWithListenerNameOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.004,
                    "name": "testMissingOptionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.003,
                    "name": "testSingleOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testNumericOptionWithoutQuotes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testConfigNoOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testLoadForServerWithWrongListenerName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testNumericOptionWithQuotes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testQuotedOptionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testMissingLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testMissingSemicolon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testInvalidControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testMultipleOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMultipleLoginModules",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMissingControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testLoadForServerWithListenerNameAndFallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testQuotedOptionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.016,
                    "name": "testControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.SaslExtensionsTest",
                    "duration": 0.0,
                    "name": "testCannotAddValueToMapReferenceAndGetFromExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.SaslExtensionsTest",
                    "duration": 0.001,
                    "name": "testReturnedMapIsImmutable",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.044,
                    "name": "testUseOldPrincipalBuilderForPlaintextIfProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.038,
                    "name": "testPrincipalBuilderScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.051,
                    "name": "testPrincipalWithSslPrincipalMapper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.001,
                    "name": "testPrincipalIfSSLPeerIsNotAuthenticated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.024,
                    "name": "testPrincipalBuilderGssapi",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.001,
                    "name": "testUseSessionPeerPrincipalForSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.002,
                    "name": "testUseOldPrincipalBuilderForSslIfProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.0,
                    "name": "testReturnAnonymousPrincipalForPlaintext",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.auth.KafkaPrincipalTest",
                    "duration": 0.0,
                    "name": "testEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.224,
                    "name": "testProducerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.158,
                    "name": "testTransactionalProducerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.27,
                    "name": "testConsumerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.213,
                    "name": "testAdminClientWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.LoginManagerTest",
                    "duration": 0.067,
                    "name": "testClientLoginManager",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.LoginManagerTest",
                    "duration": 0.005,
                    "name": "testServerLoginManager",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 0.855,
                    "name": "testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 0.487,
                    "name": "testClientConnectionClose[failedAuthenticationDelayMs=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 0.684,
                    "name": "testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 1.235,
                    "name": "testClientConnectionClose[failedAuthenticationDelayMs=200]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.355,
                    "name": "testMissingUsernameSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.214,
                    "name": "testValidSaslScramMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.603,
                    "name": "testValidSaslOauthBearerMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.742,
                    "name": "testValidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.089,
                    "name": "oldSaslScramSslServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.754,
                    "name": "oldSaslScramPlaintextServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.828,
                    "name": "oldSaslScramPlaintextServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.873,
                    "name": "testServerLoginOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.858,
                    "name": "testAuthenticateCallbackHandlerMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.081,
                    "name": "testMechanismPluggability",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.939,
                    "name": "testScramUsernameWithSpecialCharacters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.456,
                    "name": "testConvertListOffsetResponseToSaslHandshakeResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.736,
                    "name": "testMissingPasswordSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.019,
                    "name": "testClientAuthenticateCallbackHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.332,
                    "name": "testValidSaslOauthBearerMechanismWithoutServerTokens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.029,
                    "name": "testCannotReauthenticateWithDifferentPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.511,
                    "name": "testInvalidLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.529,
                    "name": "testTokenAuthenticationOverSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.567,
                    "name": "oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.9,
                    "name": "oldSaslPlainSslClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.542,
                    "name": "testClientExceptionDoesNotContainSensitiveData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.566,
                    "name": "oldSaslPlainSslClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.411,
                    "name": "testValidSaslScramSha256",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.504,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.453,
                    "name": "testClientLoginCallbackOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.693,
                    "name": "oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.568,
                    "name": "testInvalidMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.234,
                    "name": "testInsufficientScopeSaslOauthBearerMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.124,
                    "name": "testDisabledMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.542,
                    "name": "oldSaslScramSslClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.504,
                    "name": "testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.515,
                    "name": "testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.729,
                    "name": "testPacketSizeTooBig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.708,
                    "name": "testServerLoginCallbackOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.727,
                    "name": "oldSaslScramPlaintextClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.648,
                    "name": "oldSaslScramSslClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.878,
                    "name": "oldSaslScramPlaintextClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.641,
                    "name": "testInvalidUsernameSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.748,
                    "name": "testUserCredentialsUnavailableForScramMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.891,
                    "name": "testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.247,
                    "name": "testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.126,
                    "name": "testMultipleServerMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 8.366,
                    "name": "testRepeatedValidSaslPlainOverSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.064,
                    "name": "testValidSaslPlainOverPlaintext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.372,
                    "name": "testValidSaslPlainOverSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.622,
                    "name": "testInvalidApiVersionsRequestSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.938,
                    "name": "testSaslUnsupportedClientVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.27,
                    "name": "testCannotReauthenticateAgainFasterThanOneSecond",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.037,
                    "name": "testDisallowedKafkaRequestsBeforeAuthentication",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.011,
                    "name": "testClientLoginOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.714,
                    "name": "testClientDynamicJaasConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.455,
                    "name": "oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.448,
                    "name": "oldSaslPlainSslServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.663,
                    "name": "testForBrokenSaslHandshakeVersionBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.574,
                    "name": "testServerAuthenticateCallbackHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.832,
                    "name": "testInvalidPasswordSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.786,
                    "name": "testInvalidPasswordSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.847,
                    "name": "testApiVersionsRequestWithServerUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.593,
                    "name": "oldSaslPlainSslServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.257,
                    "name": "testCorrelationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.266,
                    "name": "testServerDynamicJaasConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.437,
                    "name": "testTokenReauthenticationOverSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.911,
                    "name": "testInvalidSaslPacket",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.536,
                    "name": "testSaslHandshakeRequestWithUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.786,
                    "name": "testCannotReauthenticateWithDifferentMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.645,
                    "name": "testJaasConfigurationForListener",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.837,
                    "name": "oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.589,
                    "name": "testUnknownUserSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.444,
                    "name": "oldSaslScramSslServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.008,
                    "name": "testUnexpectedRequestType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.002,
                    "name": "testOversizeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.317,
                    "name": "testOldestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.003,
                    "name": "testLatestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.009,
                    "name": "testToLowerCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.0,
                    "name": "testParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.0,
                    "name": "testToUpperCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.001,
                    "name": "testInvalidRules",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosRuleTest",
                    "duration": 0.004,
                    "name": "testReplaceParameters",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.002,
                    "name": "testCannotValidateExtensionWhichWasNotGiven",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.002,
                    "name": "testUnvalidatedExtensionsAreIgnored",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testValidatedExtensionsAreReturned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testInvalidExtensionsAndErrorMessagesAreReturned",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.089,
                    "name": "login1Commit1Login2Abort2Login3Commit3Logout3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.001,
                    "name": "commitDoesNotThrowOnUnsupportedExtensionsCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.002,
                    "name": "login1Commit1Logout1Login2Commit2Logout2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.001,
                    "name": "login1Commit1Login2Commit2Logout1Login3Commit3Logout2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.0,
                    "name": "loginAbortLoginCommitLogout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest",
                    "duration": 0.018,
                    "name": "testWithZeroTokens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest",
                    "duration": 0.004,
                    "name": "testWithPotentiallyMultipleTokens",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest",
                    "duration": 0.001,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest",
                    "duration": 0.0,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testValidateNullExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testNoExtensionsFromByteArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testAuthorizationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testRfc7688Example",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testThrowsSaslExceptionOnInvalidExtensionKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testNoExtensionsFromTokenAndNullExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testBuildClientResponseToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testBuildServerResponseToBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.008,
                    "name": "testWrapsExtensionsCallbackHandlingErrorInSaslExceptionInFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.0,
                    "name": "testNoExtensionsDoesNotAttachAnythingToFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.0,
                    "name": "testAttachesExtensionsToFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.019,
                    "name": "negotiatedProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.001,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.001,
                    "name": "savesCustomExtensionAsNegotiatedProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "unrecognizedExtensionsAreNotSaved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.001,
                    "name": "illegalToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "throwsAuthenticationExceptionOnInvalidExtensions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshConfigTest",
                    "duration": 0.0,
                    "name": "fromGoodConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.076,
                    "name": "testRefreshWithExpirationSmallerThanConfiguredBuffers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.004,
                    "name": "testRefreshWithMinPeriodIntrusion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.004,
                    "name": "testRefreshWithPreExpirationBufferIntrusion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.006,
                    "name": "testLoginExceptionCausesCorrectLogout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.027,
                    "name": "testRefresh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.004,
                    "name": "testRefreshWithExpirationSmallerThanConfiguredBuffersAndOlderCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest",
                    "duration": 0.002,
                    "name": "validScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest",
                    "duration": 0.001,
                    "name": "invalidScope",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.002,
                    "name": "blankPrincipalName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.001,
                    "name": "validCompactSerialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.001,
                    "name": "missingPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.001,
                    "name": "validClaims",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.005,
                    "name": "addsExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.001,
                    "name": "throwsErrorOnInvalidExtensionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.792,
                    "name": "validOptionsWithExplicitOptionValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.001,
                    "name": "throwsErrorOnInvalidExtensionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.002,
                    "name": "minimalToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.006,
                    "name": "tooEarlyExpirationTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.002,
                    "name": "missingRequiredScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.003,
                    "name": "validToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.003,
                    "name": "badOrMissingPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.002,
                    "name": "includesRequiredScope",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.602,
                    "name": "validateClaimForExistenceAndType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.006,
                    "name": "validateExpirationTimeAndIssuedAtConsistency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.013,
                    "name": "validateScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.004,
                    "name": "validateIssuedAt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.002,
                    "name": "validateExpirationTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.0,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.001,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.0,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.006,
                    "name": "emptyTokens",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.015,
                    "name": "missingFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.007,
                    "name": "stringConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.046,
                    "name": "generateCredential",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.014,
                    "name": "extraneousFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.089,
                    "name": "scramCredentialCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.0,
                    "name": "invalidCredential",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramFormatterTest",
                    "duration": 0.062,
                    "name": "rfc7677Example",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramFormatterTest",
                    "duration": 0.001,
                    "name": "saslName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.009,
                    "name": "validClientFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.005,
                    "name": "invalidClientFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.003,
                    "name": "validServerFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "invalidServerFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.0,
                    "name": "invalidClientFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "validClientFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "invalidServerFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "validServerFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.061,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.049,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.054,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.223,
                    "name": "testKeyStoreTrustStoreValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.79,
                    "name": "testReconfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.837,
                    "name": "testReconfigurationWithoutTruststore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.158,
                    "name": "testSslFactoryWithoutPasswordConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.995,
                    "name": "testReconfigurationWithoutKeystore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.675,
                    "name": "testKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.612,
                    "name": "staleSslEngineFactoryShouldBeClosed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.233,
                    "name": "testServerSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.869,
                    "name": "testUntrustedKeyStoreValidationFails[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.003,
                    "name": "testSslFactoryWithIncorrectProviderClassConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.471,
                    "name": "testCertificateEntriesValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.283,
                    "name": "testSslFactoryWithCustomKeyManagerConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientMode[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.768,
                    "name": "testSslFactoryConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.002,
                    "name": "testClientSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testEngineFactoryClosed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testSslFactoryWithoutProviderClassConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.186,
                    "name": "testKeyStoreTrustStoreValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.627,
                    "name": "testReconfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.66,
                    "name": "testReconfigurationWithoutTruststore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.195,
                    "name": "testSslFactoryWithoutPasswordConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 1.134,
                    "name": "testReconfigurationWithoutKeystore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.968,
                    "name": "testKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.363,
                    "name": "staleSslEngineFactoryShouldBeClosed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.335,
                    "name": "testServerSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 1.583,
                    "name": "testUntrustedKeyStoreValidationFails[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testSslFactoryWithIncorrectProviderClassConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.414,
                    "name": "testCertificateEntriesValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.132,
                    "name": "testSslFactoryWithCustomKeyManagerConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientMode[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.407,
                    "name": "testSslFactoryConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testEngineFactoryClosed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.0,
                    "name": "testSslFactoryWithoutProviderClassConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.01,
                    "name": "testRulesSplitting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.001,
                    "name": "testValidRules",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.001,
                    "name": "testCommaWithWhitespace",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.002,
                    "name": "testSslPrincipalMapper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.001,
                    "name": "testInvalidRules",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.004,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnZeroBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "testSerializeVoid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "testSerdeFromUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.02,
                    "name": "allSerdesShouldRoundtripInput",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.002,
                    "name": "allSerdesShouldSupportNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "voidDeserializerShouldThrowOnNotNullValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "floatSerdeShouldPreserveNaNValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "testSerdeFromNotNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.006,
                    "name": "stringSerdeShouldSupportDifferentEncodings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "testDeserializeVoid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnTooFewBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.AbstractIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.AbstractIteratorTest",
                    "duration": 0.0,
                    "name": "testIterator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.AppInfoParserTest",
                    "duration": 0.161,
                    "name": "testUnregisterAppInfoUnregistersMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.AppInfoParserTest",
                    "duration": 0.001,
                    "name": "testRegisterAppInfoRegistersMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.001,
                    "name": "testExpandByteBufferOnWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteDirectByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testExpandDirectByteBufferOnWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testExpandByteBufferOnPositionIncrease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testExpandDirectByteBufferOnPositionIncrease",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferUnmapperTest",
                    "duration": 0.005,
                    "name": "testUnmap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testInvalidVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testUnsignedVarintSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testVarlongSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testReadUnsignedInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testWriteUnsignedIntLEToArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testInvalidVarint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testVarintSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testReadUnsignedIntLEFromArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testReadUnsignedIntLEFromInputStream",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testWriteUnsignedIntLEToOutputStream",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.004,
                    "name": "testIncrementWithSubmap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.0,
                    "name": "testIncrement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.001,
                    "name": "testIncrementUpperBoundary",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateByteBufferWithOffsetPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testCycleCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testNullCollection",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.CollectionUtilsTest",
                    "duration": 0.002,
                    "name": "testSubtractMapRemovesSecondMapsKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CollectionUtilsTest",
                    "duration": 0.0,
                    "name": "testSubtractMapDoesntRemoveAnythingWhenEmptyMap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.Crc32CTest",
                    "duration": 0.001,
                    "name": "testValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.Crc32CTest",
                    "duration": 0.0,
                    "name": "testUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.Crc32Test",
                    "duration": 0.001,
                    "name": "testValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.Crc32Test",
                    "duration": 0.0,
                    "name": "testUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.006,
                    "name": "shouldAddShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.001,
                    "name": "shouldHaltImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.001,
                    "name": "shouldExitImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.0,
                    "name": "shouldNotInvokeShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.003,
                    "name": "shouldMaintainOrderWhenAdding",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.003,
                    "name": "shouldForbidConditionalRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.0,
                    "name": "shouldForbidRemove",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testNestedSingleEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testEmptyListAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyListInBetweenNonEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyListFollowedByNonEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.003,
                    "name": "testNestedLists",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.003,
                    "name": "testSetViewModification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testSetViewGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testInsertingTheSameObjectMultipleTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListIteratorCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testEnlargement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListIteratorTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListViewGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testFindContainsRemoveOnEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListViewModification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testNullForbidden",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testSameKeysDifferentValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testEmptyListIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testInsertDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testListIteratorRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.002,
                    "name": "testTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testCollisions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.036,
                    "name": "testManyInsertsAndDeletes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.002,
                    "name": "testFindFindAllContainsRemoveOnEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.002,
                    "name": "testEnlargement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testNullForbidden",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testInsertDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.0,
                    "name": "testTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.055,
                    "name": "testManyInsertsAndDeletes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.001,
                    "name": "testLoadKerberosLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.0,
                    "name": "testIsIBMJdk",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.0,
                    "name": "testJavaVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.LoggingSignalHandlerTest",
                    "duration": 0.005,
                    "name": "testRegister",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.MappedIteratorTest",
                    "duration": 0.002,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MappedIteratorTest",
                    "duration": 0.002,
                    "name": "testStringToInteger",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.001,
                    "name": "testAutoTickMs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.0,
                    "name": "testAdvanceClock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.007,
                    "name": "testWaitObjectTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.004,
                    "name": "testWaitObjectConditionSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SanitizerTest",
                    "duration": 0.004,
                    "name": "testSanitize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SanitizerTest",
                    "duration": 2.111,
                    "name": "testJmxSanitize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.003,
                    "name": "testParseKafkaPrincipalWithNonUserPrincipalType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.0,
                    "name": "testPrincipalNameCanContainSeparator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.001,
                    "name": "testAddCustomSecurityProvider",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.033,
                    "name": "testEchoHello",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.007,
                    "name": "testRunProgramWithErrorReturn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.016,
                    "name": "testHeadDevZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.005,
                    "name": "testAttemptToRunNonExistentProgram",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SystemTimeTest",
                    "duration": 0.103,
                    "name": "testWaitObjectTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SystemTimeTest",
                    "duration": 0.004,
                    "name": "testWaitObjectConditionSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.002,
                    "name": "testThreadNameWithNumberNoDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.001,
                    "name": "testThreadNameWithoutNumberDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.0,
                    "name": "testThreadNameWithNumberDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.0,
                    "name": "testThreadNameWithoutNumberNoDemon",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.002,
                    "name": "testTimerUpdateAndReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerSleep",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerResetUsesCurrentTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimeoutOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testNonMonotonicUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.006,
                    "name": "testCloseAllQuietly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testIntersectionOfOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testAbs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testPropsToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testIntersectionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testUnion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "toArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "utf8ByteBufferSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testDiff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testJoin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.008,
                    "name": "testReadFullyOrFailWithPartialFileChannelReads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "toArrayDirectByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.004,
                    "name": "testReadBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testGetHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testGetPort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.004,
                    "name": "testReadFullyWithPartialFileChannelReads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.011,
                    "name": "testRecursiveDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testUnionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testUnionOfNone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.035,
                    "name": "testReadFullyOrFailWithRealFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "writeToBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.01,
                    "name": "testFileAsStringNamedPipe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testConvertTo32BitField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testReadFullyIfEofIsReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testHostPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testDisjointIntersectionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testFormatBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testMurmur2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testIntersection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "utf8ByteArraySerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testFileAsStringSimpleFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testCloseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testLoadProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testUnionOfOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testFormatAddress",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.connector.ConnectorReconfigurationTest",
                    "duration": 0.004,
                    "name": "testReconfigureStopException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.connector.ConnectorReconfigurationTest",
                    "duration": 0.0,
                    "name": "testDefaultReconfigure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testStructEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchMapValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchStructWrongSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchMapSomeValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchBoolean",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testFieldsOnStructSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchFloat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchInt16",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchInt32",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchInt64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testMapEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testPrimitiveEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchStructWrongNestedSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchDecimal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testArrayDefaultValueEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testEmptyStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchMapSomeKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchArraySomeMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchInt8",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.001,
                    "name": "testValidateValueMismatchMapKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMismatchString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMatchingType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testArrayEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testFieldsOnlyValidForStructs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ConnectSchemaTest",
                    "duration": 0.0,
                    "name": "testValidateValueMatchingLogicalType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.003,
                    "name": "testFromLogicalInvalidHasTimeComponents",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.002,
                    "name": "testFromLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.0,
                    "name": "testToLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.0,
                    "name": "testFromLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.001,
                    "name": "testBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DateTest",
                    "duration": 0.0,
                    "name": "testToLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.DecimalTest",
                    "duration": 0.0,
                    "name": "testToLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DecimalTest",
                    "duration": 0.004,
                    "name": "testFromLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.DecimalTest",
                    "duration": 0.0,
                    "name": "testBuilder",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.FieldTest",
                    "duration": 0.0,
                    "name": "testEquality",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testTypeNotNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testStringBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testDefaultFieldsDifferentValueOverwriting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testMapValueSchemaNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testBytesBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testNonStructCantHaveFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testDoubleBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testFloatBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testFieldNameNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testBooleanBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testInt16Builder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt16BuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testBytesBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testStructBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt64Builder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testDefaultFieldsSameValueOverwriting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testMapBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testParameters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testArrayBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testArrayBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testDuplicateFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testStringBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testEmptyStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testMapBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testInt64BuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt8Builder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testFieldSchemaNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt32BuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt8BuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.001,
                    "name": "testMapKeySchemaNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testFloatBuilderInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testInt32Builder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testBooleanBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testArraySchemaNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaBuilderTest",
                    "duration": 0.0,
                    "name": "testDoubleBuilder",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.012,
                    "name": "testNestedSchemaProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.003,
                    "name": "testNumericTypeProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testLogicalTypeProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.0,
                    "name": "testProjectMissingRequiredField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.0,
                    "name": "testPrimitiveTypeProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testMapProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testArrayProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testStructAddField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testStructRemoveField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.001,
                    "name": "testStructDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.0,
                    "name": "testProjectMissingDefaultValuedStructField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.003,
                    "name": "testPrimitiveOptionalProjection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.0,
                    "name": "testProjectMissingOptionalStructField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.SchemaProjectorTest",
                    "duration": 0.0,
                    "name": "testMaybeCompatible",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testEqualsAndHashCodeWithByteArrayValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.003,
                    "name": "testValidateFieldWithInvalidValueType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testFlatStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testInvalidStructFieldSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.0,
                    "name": "testMissingFieldWithoutDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testMissingFieldWithDefaultValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.0,
                    "name": "testInvalidFieldType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.0,
                    "name": "testMissingOptionalFieldValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.002,
                    "name": "testValidateStructWithNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testInvalidPutIncludesFieldName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testPutNullField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testMissingFieldValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.0,
                    "name": "testMissingFieldWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.0,
                    "name": "testInvalidStructFieldValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testComplexStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.002,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testInvalidArrayFieldElements",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.StructTest",
                    "duration": 0.001,
                    "name": "testInvalidMapKeyElements",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.005,
                    "name": "testFromLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.0,
                    "name": "testToLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.001,
                    "name": "testFromLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.0,
                    "name": "testBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.001,
                    "name": "testToLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimeTest",
                    "duration": 0.001,
                    "name": "testFromLogicalInvalidHasDateComponents",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.TimestampTest",
                    "duration": 0.001,
                    "name": "testFromLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimestampTest",
                    "duration": 0.0,
                    "name": "testToLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimestampTest",
                    "duration": 0.001,
                    "name": "testFromLogical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimestampTest",
                    "duration": 0.0,
                    "name": "testBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.TimestampTest",
                    "duration": 0.001,
                    "name": "testToLogicalInvalidSchema",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.255,
                    "name": "shouldConvertStringWithQuotesAndOtherDelimiterCharacters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseFalseAsBooleanIfSurroundedByWhitespace",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldNotParseAsMapWithNullKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.006,
                    "name": "shouldParseTimestampStringAsTimestampInArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.003,
                    "name": "shouldParseQuotedTimeStringAsTimeInMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.005,
                    "name": "shouldParseStringsWithSingleDelimiter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.006,
                    "name": "shouldConvertMapWithStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseDateStringAsDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConsumeMultipleTokens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseTimeStringWithEscapedColonsAsDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseBooleanLiteralsEmbeddedInMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseNullArrayElements",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldNotParseUnquotedEmbeddedMapValuesAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithStringValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldConvertMapWithStringKeysAndShortValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithStringValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldConvertSimpleString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertEmptyString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseEmptyMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.009,
                    "name": "shouldParseMultipleTimestampStringAsTimestampInArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldNotParseUnquotedArrayElementsAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseDateStringAsDateInArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringsBeginningWithTrueAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldFailToParseStringOfMapWithIntValuesWithOnlyBlankEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertBooleanValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldNotParseAsMapWithoutCommas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldNotParseStringsBeginningWithNullAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseStringsBeginningWithFalseAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldParseTimestampStringWithEscapedColonsAsTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "canConsume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldParseStringOfMapWithIntValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringListWithExtraDelimitersAndReturnString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldParseTimeStringAsTimeInMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldFailToConvertToListFromStringWithExtraDelimiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithShortValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringsWithoutDelimiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertStringOfNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldFailToParseStringOfMapWithIntValuesWithBlankEntry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldFailToParseStringOfMapWithIntValuesWithBlankEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldConvertMapWithStringKeysAndIntegerValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertDateValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldFailToParseInvalidBooleanValueString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldConvertTimestampValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseNullAsNullIfSurroundedByWhitespace",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldConvertTimeValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldFailToParseStringOfMalformedMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseNullMapValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseStringOfMapWithShortValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseTimeStringAsTimeInArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldConvertListWithStringValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringsWithEscapedDelimiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertStringOfListWithOnlyNumericElementTypesIntoListOfLargestNumericType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithIntValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.002,
                    "name": "shouldConvertListWithIntegerValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseEmptyArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseTrueAsBooleanIfSurroundedByWhitespace",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldConvertStringOfListWithMixedElementTypesIntoListWithDifferentElementTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldNotParseAsArrayWithoutCommas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseTimeStringAsDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseTimestampStringAsTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldEscapeStringsWithEmbeddedQuotesAndBackslashes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldNotParseUnquotedEmbeddedMapKeysAsStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseStringListWithMultipleElementTypesAndReturnListWithNoSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldParseBooleanLiteralsEmbeddedInArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.001,
                    "name": "shouldFailToConvertToListFromStringWithNonCommonElementTypeAndBlankElement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.data.ValuesTest",
                    "duration": 0.0,
                    "name": "shouldParseStringsWithMultipleDelimiters",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeaderTest",
                    "duration": 0.05,
                    "name": "shouldGetSchemaFromStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeaderTest",
                    "duration": 0.001,
                    "name": "shouldAllowNonNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeaderTest",
                    "duration": 0.001,
                    "name": "shouldSatisfyEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeaderTest",
                    "duration": 0.0,
                    "name": "shouldAllowNullSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeaderTest",
                    "duration": 0.001,
                    "name": "shouldAllowNullValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.046,
                    "name": "shouldNotAllowNullKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.013,
                    "name": "shouldValidateLogicalTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldHaveToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.006,
                    "name": "shouldRemoveAllHeadersWithSameKeyWhenEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.002,
                    "name": "shouldTransformHeadersWithKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.267,
                    "name": "shouldAddDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldAddTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldNotAddHeadersWithObjectValuesAndMismatchedSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.005,
                    "name": "shouldNotValidateMismatchedValuesWithBuiltInTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldRemoveAllHeadersWithSameKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.003,
                    "name": "shouldTransformAndRemoveHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldBeEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.006,
                    "name": "shouldValidateBuildInTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldRemoveAllHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.0,
                    "name": "shouldTransformHeadersWhenEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.005,
                    "name": "shouldNotValidateNullValuesWithBuiltInTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldTransformHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldAddMultipleHeadersWithSameKeyAndRetainLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.0,
                    "name": "shouldRetainLatestWhenEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.0,
                    "name": "shouldAddHeadersWithPrimitiveValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldNotAddHeadersWithNullObjectValuesWithNonOptionalSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.0,
                    "name": "shouldDuplicateAndAlwaysReturnEquivalentButDifferentObject",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.001,
                    "name": "shouldAddTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.002,
                    "name": "shouldAddDecimal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.header.ConnectHeadersTest",
                    "duration": 0.0,
                    "name": "shouldAddHeadersWithNullObjectValuesWithOptionalSchema",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.sink.SinkConnectorTest",
                    "duration": 0.002,
                    "name": "shouldStopAndStartWhenReconfigure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkConnectorTest",
                    "duration": 0.0,
                    "name": "shouldInitializeContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkConnectorTest",
                    "duration": 0.0,
                    "name": "shouldInitializeContextWithTaskConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.sink.SinkRecordTest",
                    "duration": 0.002,
                    "name": "shouldDuplicateRecordAndCloneHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkRecordTest",
                    "duration": 0.0,
                    "name": "shouldCreateSinkRecordWithEmptyHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkRecordTest",
                    "duration": 0.001,
                    "name": "shouldDuplicateRecordUsingNewHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkRecordTest",
                    "duration": 0.0,
                    "name": "shouldModifyRecordHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.sink.SinkRecordTest",
                    "duration": 0.001,
                    "name": "shouldCreateSinkRecordWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.source.SourceConnectorTest",
                    "duration": 0.004,
                    "name": "shouldStopAndStartWhenReconfigure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceConnectorTest",
                    "duration": 0.0,
                    "name": "shouldInitializeContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceConnectorTest",
                    "duration": 0.001,
                    "name": "shouldInitializeContextWithTaskConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.source.SourceRecordTest",
                    "duration": 0.002,
                    "name": "shouldDuplicateRecordAndCloneHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceRecordTest",
                    "duration": 0.001,
                    "name": "shouldDuplicateRecordUsingNewHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceRecordTest",
                    "duration": 0.0,
                    "name": "shouldModifyRecordHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceRecordTest",
                    "duration": 0.001,
                    "name": "shouldCreateSinkRecordWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.source.SourceRecordTest",
                    "duration": 0.0,
                    "name": "shouldCreateSinkRecordWithEmtpyHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.ConverterTypeTest",
                    "duration": 0.003,
                    "name": "shouldFindByName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.036,
                    "name": "shouldConvertStringWithQuotesAndOtherDelimiterCharacters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertListWithMixedValuesToListWithoutSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertMapWithStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertMapWithStringKeysAndMixedValuesToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithStringValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertMapWithStringKeysAndShortValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertEmptyMapToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithStringValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.0,
                    "name": "shouldConvertSimpleString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertEmptyString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.0,
                    "name": "shouldConvertEmptyListToList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.002,
                    "name": "shouldParseStringOfMapWithIntValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.0,
                    "name": "shouldParseStringOfMapWithShortValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertMapWithStringKeysAndIntegerValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.0,
                    "name": "shouldConvertNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.003,
                    "name": "shouldParseStringOfMapWithShortValuesWithoutWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldConvertListWithStringValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.001,
                    "name": "shouldParseStringOfMapWithIntValuesWithWhitespaceAsMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.SimpleHeaderConverterTest",
                    "duration": 0.002,
                    "name": "shouldConvertListWithIntegerValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.009,
                    "name": "testBytesNullToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.067,
                    "name": "testToBytesNonUtf8Encoding",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.0,
                    "name": "testNonStringToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.001,
                    "name": "testBytesToStringNonUtf8Encoding",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.001,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.0,
                    "name": "testNullHeaderValueToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.0,
                    "name": "testStringHeaderValueToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.001,
                    "name": "testToBytesIgnoresSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.0,
                    "name": "testNonStringHeaderValueToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.0,
                    "name": "testStringToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.StringConverterTest",
                    "duration": 0.001,
                    "name": "testBytesToString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.ConnectorUtilsTest",
                    "duration": 0.003,
                    "name": "testGroupPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConnectorUtilsTest",
                    "duration": 0.001,
                    "name": "testGroupPartitionsInvalidCount",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.586,
                    "name": "testSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.456,
                    "name": "testBadCredential",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.01,
                    "name": "testBadPassword",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.01,
                    "name": "testUnknownBearer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.011,
                    "name": "testUnknownLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.056,
                    "name": "testUnknownCredentialsFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.011,
                    "name": "testEmptyCredentialsFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.01,
                    "name": "testNoFileOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.004,
                    "name": "testPostWithoutAppropriateCredential",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.004,
                    "name": "testPostNotChangingConnectorTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.rest.basic.auth.extension.JaasBasicAuthFilterTest",
                    "duration": 0.01,
                    "name": "testUnsupportedCallback",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkConnectorTest",
                    "duration": 0.36,
                    "name": "testSinkTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkConnectorTest",
                    "duration": 0.006,
                    "name": "testTaskClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkConnectorTest",
                    "duration": 0.005,
                    "name": "testConnectorConfigValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkConnectorTest",
                    "duration": 0.001,
                    "name": "testSinkTasksStdout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkTaskTest",
                    "duration": 0.016,
                    "name": "testPutFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSinkTaskTest",
                    "duration": 0.007,
                    "name": "testStart",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.004,
                    "name": "testBlankTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testSourceTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.001,
                    "name": "testMissingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testSourceTasksStdin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.011,
                    "name": "testTaskClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.001,
                    "name": "testInvalidBatchSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testConnectorConfigValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testMultipleSourcesInvalid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceTaskTest",
                    "duration": 2.372,
                    "name": "testNormalLifecycle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceTaskTest",
                    "duration": 1.302,
                    "name": "testBatchSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.file.FileStreamSourceTaskTest",
                    "duration": 0.002,
                    "name": "testMissingFile",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterConfigTest",
                    "duration": 0.285,
                    "name": "shouldBeCaseInsensitiveForDecimalFormatConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 1.408,
                    "name": "testJsonSchemaCacheSizeFromConfigFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.117,
                    "name": "longToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.086,
                    "name": "testCacheSchemaToJsonConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.014,
                    "name": "nullSchemaAndMapNonStringKeysToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.013,
                    "name": "floatToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "booleanToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "nullSchemaAndMapToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "stringToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "timestampToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "timestampToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "timestampToConnectWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "timeToConnectOptional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "dateToConnectWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "nullValueToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "decimalToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.005,
                    "name": "stringHeaderToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "mapToJsonNonStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "longToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "mismatchSchemaJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.005,
                    "name": "structWithOptionalFieldToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "mapToConnectNonStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.006,
                    "name": "testJsonSchemaMetadataTranslation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "highPrecisionNumericDecimalToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "bytesToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "shortToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "intToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "nullSchemaAndNullValueToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "timestampToConnectOptional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "structToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "stringToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "nullSchemaAndArrayToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "byteToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.007,
                    "name": "nullSchemaPrimitiveToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.004,
                    "name": "decimalToNumericJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "numericDecimalToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "byteToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "intToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "dateToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "noSchemaToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "decimalToJsonWithoutSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "noSchemaToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "nullSchemaAndPrimitiveToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "decimalToConnectOptionalWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "mapToJsonStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "arrayToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "nullToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "timeToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "structToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "testConnectSchemaMetadataTranslation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "shortToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "dateToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "doubleToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "testStringHeaderToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "numericDecimalWithTrailingZerosToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "decimalToConnectOptional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "structSchemaIdentical",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "timeToConnectWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "timeToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "dateToConnectOptionalWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.002,
                    "name": "mapToConnectStringKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "dateToConnectOptional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "timeToConnectOptionalWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.003,
                    "name": "decimalWithTrailingZerosToNumericJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "floatToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "decimalToConnectWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.008,
                    "name": "decimalToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "arrayToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "testCacheSchemaToConnectConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "booleanToJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "bytesToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "doubleToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.json.JsonConverterTest",
                    "duration": 0.001,
                    "name": "timestampToConnectOptionalWithDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.201,
                    "name": "upstreamClustersTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.001,
                    "name": "countHopsForTopicTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.001,
                    "name": "testIsHeartbeatTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.0,
                    "name": "testIsCheckpointTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.001,
                    "name": "remoteTopicsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.002,
                    "name": "heartbeatTopicsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.001,
                    "name": "remoteTopicsSeparatorTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.002,
                    "name": "checkpointsTopicsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorClientTest",
                    "duration": 0.008,
                    "name": "replicationHopsTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.CheckpointTest",
                    "duration": 0.001,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.HeartbeatTest",
                    "duration": 0.004,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorCheckpointConnectorTest",
                    "duration": 0.014,
                    "name": "testNoConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorCheckpointConnectorTest",
                    "duration": 0.007,
                    "name": "testReplicationDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorCheckpointConnectorTest",
                    "duration": 0.007,
                    "name": "testMirrorCheckpointConnectorDisabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorCheckpointTaskTest",
                    "duration": 0.01,
                    "name": "testCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorCheckpointTaskTest",
                    "duration": 0.001,
                    "name": "testDownstreamTopicRenaming",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.396,
                    "name": "testTaskConfigConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.015,
                    "name": "testTopicMatching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.025,
                    "name": "testTaskConfigTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.009,
                    "name": "testGroupMatching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.01,
                    "name": "testConfigPropertyMatching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.004,
                    "name": "testAllTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.002,
                    "name": "testNonMutationOfConfigDef",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.003,
                    "name": "testListOfTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorConfigTest",
                    "duration": 0.003,
                    "name": "testNoTopics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorConnectorsIntegrationTest",
                    "duration": 84.648,
                    "name": "testReplication",
                    "skipped": false,
                    "status": "REGRESSION"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorHeartBeatConnectorTest",
                    "duration": 0.414,
                    "name": "testReplicationDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorHeartBeatConnectorTest",
                    "duration": 0.015,
                    "name": "testMirrorHeartbeatConnectorDisabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 4.469,
                    "name": "testIncludesConnectorConfigProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 1.128,
                    "name": "testClientConfigProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 1.02,
                    "name": "testIncludesTopicFilterProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 0.985,
                    "name": "testClusterConfigProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 1.001,
                    "name": "testWorkerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorMakerConfigTest",
                    "duration": 0.984,
                    "name": "testReplicationConfigProperties",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.067,
                    "name": "testAclTransformation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.008,
                    "name": "testMirrorSourceConnectorTaskConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.003,
                    "name": "testAclFiltering",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 2.203,
                    "name": "testRefreshTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testReplicatesHeartbeatsByDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testNoCycles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.002,
                    "name": "testReplicatesHeartbeatsDespiteFilter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceConnectorTest",
                    "duration": 0.011,
                    "name": "testConfigPropertyFiltering",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceTaskTest",
                    "duration": 0.002,
                    "name": "testOffsetSync",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceTaskTest",
                    "duration": 0.063,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.mirror.MirrorSourceTaskTest",
                    "duration": 0.0,
                    "name": "testZeroOffsetSync",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.OffsetSyncStoreTest",
                    "duration": 0.05,
                    "name": "testOffsetTranslation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.mirror.OffsetSyncTest",
                    "duration": 0.068,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.connector.policy.NoneConnectorClientConfigOverridePolicyTest",
                    "duration": 0.003,
                    "name": "testNoOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.connector.policy.NoneConnectorClientConfigOverridePolicyTest",
                    "duration": 0.001,
                    "name": "testWithOverrides",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.connector.policy.PrincipalConnectorClientConfigOverridePolicyTest",
                    "duration": 0.003,
                    "name": "testPrincipalPlusOtherConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.connector.policy.PrincipalConnectorClientConfigOverridePolicyTest",
                    "duration": 0.001,
                    "name": "testPrincipalOnly",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.001,
                    "name": "testFromConnectSchemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testToConnectNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testFromConnectBadSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testFromConnectNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testToConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testFromConnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ByteArrayConverterTest",
                    "duration": 0.0,
                    "name": "testFromConnectInvalidValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.002,
                    "name": "testBytesNullToNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.001,
                    "name": "testSerializingIncorrectType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingHeaderWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.001,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingDataWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.DoubleConverterTest",
                    "duration": 0.0,
                    "name": "testConvertingSamplesToAndFromBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.002,
                    "name": "testBytesNullToNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.001,
                    "name": "testDeserializingHeaderWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.0,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingDataWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.FloatConverterTest",
                    "duration": 0.002,
                    "name": "testConvertingSamplesToAndFromBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.002,
                    "name": "testBytesNullToNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.001,
                    "name": "testSerializingIncorrectType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingHeaderWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.0,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.001,
                    "name": "testDeserializingDataWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.IntegerConverterTest",
                    "duration": 0.0,
                    "name": "testConvertingSamplesToAndFromBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.002,
                    "name": "testBytesNullToNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.001,
                    "name": "testSerializingIncorrectType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingHeaderWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.0,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.001,
                    "name": "testDeserializingDataWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.LongConverterTest",
                    "duration": 0.0,
                    "name": "testConvertingSamplesToAndFromBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.003,
                    "name": "testBytesNullToNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.0,
                    "name": "testSerializingIncorrectType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingHeaderWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.0,
                    "name": "testNullToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.001,
                    "name": "testSerializingIncorrectHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.0,
                    "name": "testDeserializingDataWithTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.converters.ShortConverterTest",
                    "duration": 0.0,
                    "name": "testConvertingSamplesToAndFromBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 21.197,
                    "name": "testBlockInConnectorStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 19.389,
                    "name": "testBlockInConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 17.156,
                    "name": "testBlockInConnectorValidate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 19.144,
                    "name": "testBlockInConnectorStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 26.155,
                    "name": "testWorkerRestartWithBlockInConnectorStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 20.139,
                    "name": "testBlockInConnectorInitialize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.BlockingConnectorTest",
                    "duration": 22.164,
                    "name": "testWorkerRestartWithBlockInConnectorStop",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.ConnectWorkerIntegrationTest",
                    "duration": 54.362,
                    "name": "testBrokerCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectWorkerIntegrationTest",
                    "duration": 25.192,
                    "name": "testAddAndRemoveWorker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectWorkerIntegrationTest",
                    "duration": 18.18,
                    "name": "testRestartFailedTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectWorkerIntegrationTest",
                    "duration": 20.241,
                    "name": "testTaskStatuses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorClientPolicyIntegrationTest",
                    "duration": 12.195,
                    "name": "testCreateWithNotAllowedOverridesForPrincipalPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorClientPolicyIntegrationTest",
                    "duration": 10.158,
                    "name": "testCreateWithAllowedOverridesForAllPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorClientPolicyIntegrationTest",
                    "duration": 13.146,
                    "name": "testCreateWithAllowedOverridesForPrincipalPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorClientPolicyIntegrationTest",
                    "duration": 9.155,
                    "name": "testCreateWithOverridesForNonePolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorTopicsIntegrationTest",
                    "duration": 30.217,
                    "name": "testGetActiveTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorTopicsIntegrationTest",
                    "duration": 24.436,
                    "name": "testTopicTrackingResetIsDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ConnectorTopicsIntegrationTest",
                    "duration": 19.16,
                    "name": "testTopicTrackingIsDisabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.ErrorHandlingIntegrationTest",
                    "duration": 12.156,
                    "name": "testErrantRecordReporter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ErrorHandlingIntegrationTest",
                    "duration": 12.144,
                    "name": "testSkipRetryAndDLQWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.ExampleConnectIntegrationTest",
                    "duration": 15.203,
                    "name": "testSourceConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.ExampleConnectIntegrationTest",
                    "duration": 24.364,
                    "name": "testSinkConnector",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.InternalTopicsIntegrationTest",
                    "duration": 19.496,
                    "name": "testFailToStartWhenInternalTopicsAreNotCompacted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.InternalTopicsIntegrationTest",
                    "duration": 28.61,
                    "name": "testCreateInternalTopicsWithFewerReplicasThanBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.InternalTopicsIntegrationTest",
                    "duration": 39.733,
                    "name": "testCreateInternalTopicsWithDefaultSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.InternalTopicsIntegrationTest",
                    "duration": 8.172,
                    "name": "testStartWhenInternalTopicsCreatedManuallyWithCompactForBrokersDefaultCleanupPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.InternalTopicsIntegrationTest",
                    "duration": 3.146,
                    "name": "testFailToCreateInternalTopicsWithMoreReplicasThanBrokers",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest",
                    "duration": 18.155,
                    "name": "testStartTwoConnectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest",
                    "duration": 25.151,
                    "name": "testDeleteConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest",
                    "duration": 20.155,
                    "name": "testAddingWorker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest",
                    "duration": 23.144,
                    "name": "testRemovingWorker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest",
                    "duration": 20.149,
                    "name": "testReconfigConnector",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.RestExtensionIntegrationTest",
                    "duration": 14.173,
                    "name": "testRestExtensionApi",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.SessionedProtocolIntegrationTest",
                    "duration": 0.0,
                    "name": "ensureInternalEndpointIsSecured",
                    "skipped": true,
                    "status": "SKIPPED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.SourceConnectorsIntegrationTest",
                    "duration": 26.259,
                    "name": "testTopicsAreCreatedWhenTopicCreationIsEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.SourceConnectorsIntegrationTest",
                    "duration": 18.214,
                    "name": "testTopicsAreCreatedWhenAutoCreateTopicsIsEnabledAtTheBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.SourceConnectorsIntegrationTest",
                    "duration": 29.206,
                    "name": "testSwitchingToTopicCreationEnabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopCounterTest",
                    "duration": 0.101,
                    "name": "shouldFailToWaitForRestartThatNeverHappens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopCounterTest",
                    "duration": 0.0,
                    "name": "shouldRecordStarts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopCounterTest",
                    "duration": 0.001,
                    "name": "shouldExpectRestarts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopCounterTest",
                    "duration": 0.0,
                    "name": "shouldRecordStops",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopLatchTest",
                    "duration": 0.106,
                    "name": "shouldReturnFalseWhenAwaitingForDependentLatchToComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopLatchTest",
                    "duration": 0.002,
                    "name": "shouldReturnTrueWhenAwaitingForStartAndStopAndDependentLatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopLatchTest",
                    "duration": 0.102,
                    "name": "shouldReturnFalseWhenAwaitingForStartToNeverComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopLatchTest",
                    "duration": 0.102,
                    "name": "shouldReturnFalseWhenAwaitingForStopToNeverComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.StartAndStopLatchTest",
                    "duration": 0.002,
                    "name": "shouldReturnTrueWhenAwaitingForStartAndStopToComplete",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.integration.TransformationIntegrationTest",
                    "duration": 19.165,
                    "name": "testFilterOnHasHeaderKeyWithSourceConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.TransformationIntegrationTest",
                    "duration": 20.162,
                    "name": "testFilterOnTombstonesWithSinkConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.integration.TransformationIntegrationTest",
                    "duration": 25.544,
                    "name": "testFilterOnTopicNameWithSinkConnector",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.824,
                    "name": "taskStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.007,
                    "name": "connectorStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.004,
                    "name": "testConnectorStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.15,
                    "name": "testConfigValidationAllOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.01,
                    "name": "testReverseTransformConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.006,
                    "name": "testConfigProviderRegex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.002,
                    "name": "testConnectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.009,
                    "name": "testConfigValidationEmptyConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.016,
                    "name": "testConfigValidationMissingName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.013,
                    "name": "testConfigValidationInvalidTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.009,
                    "name": "testConfigValidationTopicsWithDlq",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.005,
                    "name": "testConfigValidationTopicsRegexWithDlq",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.113,
                    "name": "testConfigValidationTransformsExtendResults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.043,
                    "name": "testConfigValidationPredicatesExtendResults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.AbstractHerderTest",
                    "duration": 0.026,
                    "name": "testConfigValidationPrincipalOnlyOverride",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.019,
                    "name": "testGettingGroupMultipleTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.004,
                    "name": "testCreatingTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.003,
                    "name": "testMetricGroupIdWithoutTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.003,
                    "name": "testCreatingTagsWithOddNumberOfTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.001,
                    "name": "testGettingGroupWithOddNumberOfTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.002,
                    "name": "testMetricGroupIdIdentity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.005,
                    "name": "testRecreateWithoutClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.003,
                    "name": "testGettingGroupWithTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.003,
                    "name": "testRecreateWithClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectMetricsTest",
                    "duration": 0.003,
                    "name": "testKafkaMetricsNotNull",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 4.116,
                    "name": "wrongPredicateType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.003,
                    "name": "abstractKeyValueTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "missingPredicateAliasProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "unconfiguredTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "multipleTransformsOneDangling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "testEnrichedConfigDef",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "abstractTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "missingPredicateConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "negatedButNoPredicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "misconfiguredTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "noTransforms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "danglingTransformAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.0,
                    "name": "emptyConnectorName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "abstractPredicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "misconfiguredPredicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.003,
                    "name": "singleConditionalTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "multipleTransforms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.002,
                    "name": "predicateNegationDefaultsToFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.001,
                    "name": "singleTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ConnectorConfigTest",
                    "duration": 0.003,
                    "name": "wrongTransformationType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 3.152,
                    "name": "testSinkTasksCloseErrorReporters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 0.225,
                    "name": "testSourceTasksCloseErrorReporters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 0.026,
                    "name": "testCloseErrorReportersExceptionPropagation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 1.129,
                    "name": "testErrorHandlingInSinkTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 1.902,
                    "name": "testErrorHandlingInSourceTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskTest",
                    "duration": 3.675,
                    "name": "testErrorHandlingInSourceTasksWthBadConverter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 2.648,
                    "name": "testCloseErrorReportersExceptionPropagation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 0.228,
                    "name": "testSinkTasksCloseErrorReporters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 0.022,
                    "name": "testSourceTasksCloseErrorReporters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 1.123,
                    "name": "testErrorHandlingInSinkTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 1.895,
                    "name": "testErrorHandlingInSourceTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.ErrorHandlingTaskWithTopicCreationTest",
                    "duration": 3.673,
                    "name": "testErrorHandlingInSourceTasksWthBadConverter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.PredicatedTransformationTest",
                    "duration": 0.01,
                    "name": "apply",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.SourceConnectorConfigTest",
                    "duration": 0.014,
                    "name": "shouldNotAllowZeroPartitionsOrReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceConnectorConfigTest",
                    "duration": 0.139,
                    "name": "shouldNotAllowPartitionsOrReplicationFactorLessThanNegativeOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceConnectorConfigTest",
                    "duration": 0.006,
                    "name": "shouldAllowSettingTopicProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceConnectorConfigTest",
                    "duration": 0.001,
                    "name": "noTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceConnectorConfigTest",
                    "duration": 0.163,
                    "name": "shouldAllowNegativeOneAndPositiveForReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.SourceTaskOffsetCommitterTest",
                    "duration": 1.026,
                    "name": "testSchedule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceTaskOffsetCommitterTest",
                    "duration": 0.038,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.SourceTaskOffsetCommitterTest",
                    "duration": 0.038,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.StateTrackerTest",
                    "duration": 0.001,
                    "name": "calculateDurations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.StateTrackerTest",
                    "duration": 0.0,
                    "name": "currentState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.StateTrackerTest",
                    "duration": 0.0,
                    "name": "currentStateIsNullWhenNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.069,
                    "name": "testEmbeddedConfigCast",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.004,
                    "name": "testEmbeddedConfigRegexRouter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.006,
                    "name": "testEmbeddedConfigSetSchemaMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.018,
                    "name": "testEmbeddedConfigTimestampConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.005,
                    "name": "testEmbeddedConfigHoistField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.013,
                    "name": "testEmbeddedConfigMaskField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.006,
                    "name": "testEmbeddedConfigInsertField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.006,
                    "name": "testEmbeddedConfigFlatten",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.006,
                    "name": "testEmbeddedConfigReplaceField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.003,
                    "name": "testEmbeddedConfigTimestampRouter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.004,
                    "name": "testEmbeddedConfigValueToKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.TransformationConfigTest",
                    "duration": 0.003,
                    "name": "testEmbeddedConfigExtractField",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTest",
                    "duration": 0.52,
                    "name": "testAdminListenersConfigAllowedValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTest",
                    "duration": 0.003,
                    "name": "testAdminListenersNotAllowingBlankStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTest",
                    "duration": 0.002,
                    "name": "testAdminListenersNotAllowingEmptyStrings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTest",
                    "duration": 0.009,
                    "name": "testInvalidHeaderConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTest",
                    "duration": 0.002,
                    "name": "testValidHeaderConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTransformerTest",
                    "duration": 0.704,
                    "name": "testReplaceVariable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTransformerTest",
                    "duration": 0.023,
                    "name": "testReplaceVariableWithTTL",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTransformerTest",
                    "duration": 0.025,
                    "name": "testReplaceVariableWithTTLAndScheduleRestart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTransformerTest",
                    "duration": 0.008,
                    "name": "testReplaceVariableWithTTLFirstCancelThenScheduleRestart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConfigTransformerTest",
                    "duration": 0.002,
                    "name": "testTransformNullConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.19,
                    "name": "testStartupFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.011,
                    "name": "testOnResume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.009,
                    "name": "testStartupPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.01,
                    "name": "testTransitionPausedToPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.009,
                    "name": "testFailureIsFinalState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.007,
                    "name": "testInitializeFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.009,
                    "name": "testStartupAndPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.009,
                    "name": "testFailConnectorThatIsNeitherSourceNorSink",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.009,
                    "name": "testStartupAndShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.006,
                    "name": "testTransitionStartedToStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerConnectorTest",
                    "duration": 0.007,
                    "name": "testShutdownFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 1.403,
                    "name": "testWakeupInCommitSyncCausesRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.034,
                    "name": "testStartPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.052,
                    "name": "testPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.062,
                    "name": "testPollRedelivery",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.031,
                    "name": "testErrorInRebalancePartitionRevocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.038,
                    "name": "testErrorInRebalancePartitionAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.051,
                    "name": "testRequestCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.042,
                    "name": "testPreCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.031,
                    "name": "testIgnoredCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.041,
                    "name": "testLongRunningCommitWithoutTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.034,
                    "name": "testSinkTasksHandleCloseErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.028,
                    "name": "testSuppressCloseErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.067,
                    "name": "testCommitWithOutOfOrderCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.045,
                    "name": "testDeliveryWithMutatingTransform",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.037,
                    "name": "testMissingTimestampPropagation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.054,
                    "name": "testTimestampPropagation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.057,
                    "name": "testTopicsRegex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.031,
                    "name": "testMetricsGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.029,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskTest",
                    "duration": 0.058,
                    "name": "testHeadersWithCustomConverter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 2.417,
                    "name": "testPollsInBackground",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.092,
                    "name": "testCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.082,
                    "name": "testCommitFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.065,
                    "name": "testCommitSuccessFollowedByFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.055,
                    "name": "testCommitConsumerFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.054,
                    "name": "testCommitTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.061,
                    "name": "testAssignmentPauseResume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.051,
                    "name": "testRewind",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSinkTaskThreadedTest",
                    "duration": 0.041,
                    "name": "testRewindOnRebalanceDuringPoll",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 5.21,
                    "name": "testSendRecordsPropagatesTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.091,
                    "name": "testSendRecordsCorruptTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.042,
                    "name": "testSendRecordsNoTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.019,
                    "name": "testSendRecordsRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.964,
                    "name": "testSendRecordsTaskCommitRecordFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.993,
                    "name": "testStartPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.026,
                    "name": "testFailureInPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.034,
                    "name": "testPollReturnsNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.98,
                    "name": "testCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.953,
                    "name": "testCommitFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.996,
                    "name": "testSendRecordsConvertsData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.953,
                    "name": "testHeadersWithCustomConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.988,
                    "name": "testSendRecordsProducerCallbackFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.214,
                    "name": "testPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.146,
                    "name": "testPollsInBackground",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 0.98,
                    "name": "testSlowTaskStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.051,
                    "name": "testCancel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.019,
                    "name": "testMetricsGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskTest",
                    "duration": 1.038,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 7.032,
                    "name": "testPollsInBackground",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.299,
                    "name": "testCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.125,
                    "name": "testCommitFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.023,
                    "name": "testStartPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.201,
                    "name": "testPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.947,
                    "name": "testMetricsGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.968,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.982,
                    "name": "testHeadersWithCustomConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.99,
                    "name": "testPollReturnsNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.958,
                    "name": "testCancel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.003,
                    "name": "testTopicCreateWhenTopicExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.96,
                    "name": "testSendRecordsTopicDescribeRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.985,
                    "name": "testSendRecordsTopicCreateRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.993,
                    "name": "testSendRecordsTopicDescribeRetriesMidway",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.999,
                    "name": "testSendRecordsTopicCreateRetriesMidway",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.011,
                    "name": "testTopicDescribeFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.027,
                    "name": "testTopicCreateFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.97,
                    "name": "testTopicCreateFailsWithExceptionWhenCreateReturnsFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.977,
                    "name": "testFailureInPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.954,
                    "name": "testSendRecordsConvertsData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.04,
                    "name": "testSendRecordsPropagatesTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.891,
                    "name": "testSendRecordsCorruptTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.918,
                    "name": "testSendRecordsNoTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 1.0,
                    "name": "testSendRecordsRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.928,
                    "name": "testSendRecordsProducerCallbackFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.896,
                    "name": "testSendRecordsProducerSendFailsImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.935,
                    "name": "testSendRecordsTaskCommitRecordFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerSourceTaskWithTopicCreationTest",
                    "duration": 0.945,
                    "name": "testSlowTaskStart",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTaskTest",
                    "duration": 0.905,
                    "name": "cancelBeforeStopping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTaskTest",
                    "duration": 0.016,
                    "name": "standardStartup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTaskTest",
                    "duration": 1.013,
                    "name": "stopBeforeStarting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTaskTest",
                    "duration": 0.015,
                    "name": "updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTaskTest",
                    "duration": 0.014,
                    "name": "updateMetricsOnListenerEventsForStartupPauseResumeAndFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 1.665,
                    "name": "testStartAndStopConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.058,
                    "name": "testStartConnectorFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.062,
                    "name": "testAddConnectorByAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.057,
                    "name": "testAddConnectorByShortAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.023,
                    "name": "testStopInvalidConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.072,
                    "name": "testReconfigureConnectorTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.678,
                    "name": "testAddRemoveTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.088,
                    "name": "testTaskStatusMetricsStatuses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.036,
                    "name": "testConnectorStatusMetricsGroup_taskStatusCounter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.041,
                    "name": "testStartTaskFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.068,
                    "name": "testCleanupTasksOnStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.074,
                    "name": "testConverterOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.01,
                    "name": "testProducerConfigsWithoutOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.011,
                    "name": "testProducerConfigsWithOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.011,
                    "name": "testProducerConfigsWithClientOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.015,
                    "name": "testConsumerConfigsWithoutOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.013,
                    "name": "testConsumerConfigsWithOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.014,
                    "name": "testConsumerConfigsWithClientOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.01,
                    "name": "testConsumerConfigsClientOverridesWithNonePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.019,
                    "name": "testAdminConfigsClientOverridesWithAllPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.016,
                    "name": "testAdminConfigsClientOverridesWithNonePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerTest",
                    "duration": 0.033,
                    "name": "testWorkerMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 1.293,
                    "name": "testProducerConfigsWithoutOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.24,
                    "name": "testStartAndStopConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.062,
                    "name": "testStartConnectorFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.069,
                    "name": "testAddConnectorByAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.034,
                    "name": "testAddConnectorByShortAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.023,
                    "name": "testStopInvalidConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.051,
                    "name": "testReconfigureConnectorTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.731,
                    "name": "testAddRemoveTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.133,
                    "name": "testTaskStatusMetricsStatuses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.027,
                    "name": "testStartTaskFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.064,
                    "name": "testCleanupTasksOnStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.075,
                    "name": "testConverterOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.015,
                    "name": "testProducerConfigsWithOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.013,
                    "name": "testConsumerConfigsWithOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.008,
                    "name": "testConsumerConfigsWithClientOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.019,
                    "name": "testConsumerConfigsClientOverridesWithNonePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.015,
                    "name": "testAdminConfigsClientOverridesWithAllPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.014,
                    "name": "testAdminConfigsClientOverridesWithNonePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.012,
                    "name": "testProducerConfigsWithClientOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.008,
                    "name": "testConsumerConfigsWithoutOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.WorkerWithTopicCreationTest",
                    "duration": 0.01,
                    "name": "testConnectorStatusMetricsGroup_taskStatusCounter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 1.714,
                    "name": "testCoopToCoopMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.003,
                    "name": "testCoopToEagerAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.003,
                    "name": "testCoopToCoopAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.002,
                    "name": "testEagerToCoopAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.002,
                    "name": "testEagerToEagerAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.004,
                    "name": "testCoopToEagerMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.003,
                    "name": "testSessionedToEagerMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.003,
                    "name": "testEagerToEagerMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.004,
                    "name": "testSessionedToCoopMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.ConnectProtocolCompatibilityTest",
                    "duration": 0.003,
                    "name": "testEagerToCoopMetadata",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.005,
                    "name": "shouldFailIfKeyAlgorithmNotInVerificationAlgorithmsList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.385,
                    "name": "shouldAllowNegativeOneAndPositiveForPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.013,
                    "name": "shouldValidateAllVerificationAlgorithms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldAllowSettingOffsetTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldAllowSettingStatusTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.002,
                    "name": "shouldNotAllowZeroPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.066,
                    "name": "shouldNotAllowNegativeReplicationFactorLessThanNegativeOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.004,
                    "name": "shouldRemoveCompactionFromOffsetTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldRemoveCompactionFromStatusTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.004,
                    "name": "shouldCreateKeyGeneratorWithSpecificSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowZeroReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.004,
                    "name": "shouldAllowSettingConfigTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.002,
                    "name": "shouldFailWithInvalidKeyAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.005,
                    "name": "shouldRemoveCompactionFromConfigTopicSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldFailWithInvalidKeySize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.003,
                    "name": "shouldCreateKeyGeneratorWithDefaultSettings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.326,
                    "name": "shouldAllowNegativeOneAndPositiveForReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.028,
                    "name": "shouldNotAllowNegativePartitionsLessThanNegativeOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedConfigTest",
                    "duration": 0.0,
                    "name": "shouldFailWithEmptyListOfVerificationAlgorithms",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 2.259,
                    "name": "testJoinAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.104,
                    "name": "testRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.066,
                    "name": "testIncrementalCooperativeRebalanceForNewMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.062,
                    "name": "testIncrementalCooperativeRebalanceWithDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.068,
                    "name": "testRebalanceFailedConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.032,
                    "name": "testHaltCleansUpWorker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.071,
                    "name": "testCreateConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.054,
                    "name": "testCreateConnectorFailedValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.058,
                    "name": "testConnectorNameConflictsWithWorkerGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.045,
                    "name": "testCreateConnectorAlreadyExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.078,
                    "name": "testDestroyConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.077,
                    "name": "testRestartConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.045,
                    "name": "testRestartUnknownConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.057,
                    "name": "testRestartConnectorRedirectToLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.035,
                    "name": "testRestartConnectorRedirectToOwner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.043,
                    "name": "testRestartTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.031,
                    "name": "testRestartUnknownTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.025,
                    "name": "testRequestProcessingOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.042,
                    "name": "testRestartTaskRedirectToLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.048,
                    "name": "testRestartTaskRedirectToOwner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.043,
                    "name": "testConnectorConfigAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.042,
                    "name": "testConnectorConfigUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.039,
                    "name": "testConnectorPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.046,
                    "name": "testConnectorResumed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.032,
                    "name": "testUnknownConnectorPaused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.041,
                    "name": "testConnectorPausedRunningTaskOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.054,
                    "name": "testConnectorResumedRunningTaskOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.044,
                    "name": "testTaskConfigAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.071,
                    "name": "testJoinLeaderCatchUpFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.065,
                    "name": "testJoinLeaderCatchUpFailsForIncrementalCooperative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.049,
                    "name": "testAccessors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.051,
                    "name": "testPutConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.025,
                    "name": "testPutTaskConfigsSignatureNotRequiredV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.02,
                    "name": "testPutTaskConfigsSignatureNotRequiredV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.017,
                    "name": "testPutTaskConfigsMissingRequiredSignature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.048,
                    "name": "testPutTaskConfigsDisallowedSignatureAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.024,
                    "name": "testPutTaskConfigsInvalidSignature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.026,
                    "name": "testPutTaskConfigsValidRequiredSignature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.028,
                    "name": "testKeyExceptionDetection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.022,
                    "name": "testInconsistentConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.018,
                    "name": "testThreadNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.073,
                    "name": "testJoinLeaderCatchUpRetriesForIncrementalCooperative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.DistributedHerderTest",
                    "duration": 0.044,
                    "name": "testIncrementalCooperativeRebalanceForExistingMember",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 1.901,
                    "name": "testLostAssignmentHandlingWhenWorkerLeavesPermanently",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.19,
                    "name": "testTaskAssignmentWhenLeaderBounces",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.089,
                    "name": "testTaskAssignmentWhenWorkerBounces",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.005,
                    "name": "testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.007,
                    "name": "testLostAssignmentHandlingWhenWorkerBounces",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.072,
                    "name": "testTaskAssignmentWhenWorkerJoins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.005,
                    "name": "testLostAssignmentHandlingWithMoreThanOneCandidates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.007,
                    "name": "testAssignTasksWhenBalanced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.066,
                    "name": "testTaskAssignmentWhenWorkerLeavesPermanently",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.012,
                    "name": "testAssignConnectorsWhenImbalanced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.042,
                    "name": "testTaskAssignmentWhenConnectorsAreDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.053,
                    "name": "testTaskAssignmentWhenSubsequentAssignmentAttemptFailsOutsideTheAssignor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.007,
                    "name": "testAssignConnectorsWhenBalanced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.066,
                    "name": "testTaskAssignmentWhenSubsequentAssignmentAttemptFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.041,
                    "name": "testTaskAssignmentWhenFirstAssignmentAttemptFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.07,
                    "name": "testTaskAssignmentWhenTasksDuplicatedInWorkerAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.044,
                    "name": "testTaskAssignmentWhenLeaderLeavesPermanently",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.IncrementalCooperativeAssignorTest",
                    "duration": 0.065,
                    "name": "testDuplicatedAssignmentHandleWhenTheDuplicatedAssignmentsDeleted",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.168,
                    "name": "testMetadataWithExistingAssignmentButOlderProtocolSelection[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.007,
                    "name": "testMetadataWithExistingAssignment[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.141,
                    "name": "testTaskAssignmentWhenWorkerBounces[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.041,
                    "name": "testTaskAssignmentWhenWorkerJoins[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.056,
                    "name": "testTaskAssignmentWhenWorkerLeavesPermanently[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.005,
                    "name": "testMetadata[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.006,
                    "name": "testMetadataWithExistingAssignmentButOlderProtocolSelection[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.007,
                    "name": "testMetadataWithExistingAssignment[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.059,
                    "name": "testTaskAssignmentWhenWorkerBounces[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.038,
                    "name": "testTaskAssignmentWhenWorkerJoins[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.074,
                    "name": "testTaskAssignmentWhenWorkerLeavesPermanently[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorIncrementalTest",
                    "duration": 0.006,
                    "name": "testMetadata[1]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 1.313,
                    "name": "testLeaderPerformAssignmentSingleTaskConnectors[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.179,
                    "name": "testNormalJoinGroupFollower[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMetadata[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testLeaderPerformAssignment1[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testLeaderPerformAssignment2[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.015,
                    "name": "testJoinLeaderCannotAssign[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.018,
                    "name": "testRejoinGroup[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.014,
                    "name": "testNormalJoinGroupLeader[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testLeaderPerformAssignmentSingleTaskConnectors[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testNormalJoinGroupFollower[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testMetadata[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testLeaderPerformAssignment1[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testLeaderPerformAssignment2[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.017,
                    "name": "testJoinLeaderCannotAssign[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.014,
                    "name": "testRejoinGroup[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerCoordinatorTest",
                    "duration": 0.013,
                    "name": "testNormalJoinGroupLeader[1]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.distributed.WorkerGroupMemberTest",
                    "duration": 1.469,
                    "name": "testMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 1.115,
                    "name": "testLogOnEnabledLogReporter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.016,
                    "name": "testLogMessageWithNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.018,
                    "name": "testLogMessageWithSinkRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.013,
                    "name": "testLogReportAndReturnFuture",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.015,
                    "name": "testSetDLQConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.031,
                    "name": "testDlqHeaderConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.013,
                    "name": "testDlqHeaderOnNullExceptionMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.017,
                    "name": "testDlqHeaderIsAppended",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.014,
                    "name": "initializeDLQWithNullMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.025,
                    "name": "testDLQConfigWithEmptyTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.029,
                    "name": "testDLQConfigWithValidTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.011,
                    "name": "testReportDLQTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.009,
                    "name": "testDLQReportAndReturnFuture",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.012,
                    "name": "testCloseDLQ",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.ErrorReporterTest",
                    "duration": 0.012,
                    "name": "testLogOnDisabledLogReporter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.848,
                    "name": "testExecAndHandleRetriableErrorOnce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.01,
                    "name": "testExecAndHandleRetriableErrorThrice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.007,
                    "name": "testExecAndHandleNonRetriableErrorOnce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.004,
                    "name": "testExecAndHandleNonRetriableErrorThrice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.002,
                    "name": "testCheckRetryLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.005,
                    "name": "testBackoffLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testToleranceLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.039,
                    "name": "testDefaultConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.015,
                    "name": "testSetConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.036,
                    "name": "testThrowExceptionInKafkaConsume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testExecuteFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testExecuteFailedNoTolerance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testHandleExceptionInKeyConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.004,
                    "name": "testHandleExceptionInTaskPut",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.005,
                    "name": "testHandleExceptionInTaskPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.007,
                    "name": "testThrowExceptionInTaskPut",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.004,
                    "name": "testThrowExceptionInTaskPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.004,
                    "name": "testThrowExceptionInKafkaProduce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.004,
                    "name": "testHandleExceptionInHeaderConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testHandleExceptionInTransformations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperatorTest",
                    "duration": 0.003,
                    "name": "testHandleExceptionInValueConverter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.errors.WorkerErrantRecordReporterTest",
                    "duration": 0.807,
                    "name": "testGetAllFutures",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.health.ConnectClusterStateImplTest",
                    "duration": 0.165,
                    "name": "connectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.health.ConnectClusterStateImplTest",
                    "duration": 0.006,
                    "name": "connectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.health.ConnectClusterStateImplTest",
                    "duration": 0.001,
                    "name": "kafkaClusterId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.health.ConnectClusterStateImplTest",
                    "duration": 0.007,
                    "name": "connectorsFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 1.073,
                    "name": "testLoadingNoPlugins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 0.0,
                    "name": "testWhiteListedManifestResources",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 1.078,
                    "name": "testLoadingPluginDirContainsInvalidJarsOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 5.725,
                    "name": "testLoadingPluginClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 1.03,
                    "name": "testLoadingInvalidUberJar",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 1.049,
                    "name": "testLoadingPluginDirEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 1.071,
                    "name": "testLoadingMixOfValidAndInvalidPlugins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 0.001,
                    "name": "testOtherResources",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.DelegatingClassLoaderTest",
                    "duration": 0.979,
                    "name": "testLoadingUnloadedPluginClass",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginDescTest",
                    "duration": 0.046,
                    "name": "testPluginDescWithNullVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginDescTest",
                    "duration": 0.003,
                    "name": "testPluginDescComparison",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginDescTest",
                    "duration": 0.0,
                    "name": "testRegularPluginDesc",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginDescTest",
                    "duration": 0.001,
                    "name": "testPluginDescEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginDescTest",
                    "duration": 0.001,
                    "name": "testPluginDescWithSystemClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.018,
                    "name": "testPluginUrlsWithRelativeSymlinkForwards",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.002,
                    "name": "testTransformsClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.006,
                    "name": "testOrderOfPluginUrlsWithJars",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.007,
                    "name": "testPluginUrlsWithClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testThirdPartyClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.002,
                    "name": "testConnectApiClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testKafkaDependencyClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testAllowedJsonConverterClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testClientConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.0,
                    "name": "testConnectRuntimeClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testAllowedFileConnectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testJavaLibraryClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testAllowedRuntimeClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testEmptyPluginUrls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.005,
                    "name": "testPluginUrlsWithJars",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.006,
                    "name": "testPluginUrlsWithZips",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.005,
                    "name": "testPluginUrlsWithRelativeSymlinkBackwards",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testMirrorClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.006,
                    "name": "testPluginUrlsWithAbsoluteSymlink",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.004,
                    "name": "testEmptyStructurePluginUrls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginUtilsTest",
                    "duration": 0.001,
                    "name": "testAllowedBasicAuthExtensionClasses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.031,
                    "name": "shouldFailToFindConverterInCurrentClassloader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.076,
                    "name": "shouldInstantiateAndConfigureConnectRestExtension",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.039,
                    "name": "newPluginShouldServiceLoadWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.015,
                    "name": "shouldInstantiateAndConfigureConverters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.044,
                    "name": "shouldThrowIfPluginThrows",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.027,
                    "name": "newPluginShouldInstantiateWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.052,
                    "name": "newHeaderConverterShouldConfigureWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.077,
                    "name": "newPluginsShouldConfigureWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.564,
                    "name": "shouldInstantiateAndConfigureInternalConverters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.073,
                    "name": "shouldShareStaticValuesBetweenSamePlugin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 0.978,
                    "name": "newConfigProviderShouldConfigureWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 0.997,
                    "name": "shouldInstantiateAndConfigureDefaultHeaderConverter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.016,
                    "name": "shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.isolation.PluginsTest",
                    "duration": 1.006,
                    "name": "newConverterShouldConfigureWithPluginClassLoader",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.206,
                    "name": "addToRequestShouldAddHeadersOnValidSignatureAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.038,
                    "name": "fromHeadersShouldReturnNullIfSignatureAlgorithmHeaderMissing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.001,
                    "name": "addToRequestShouldThrowExceptionOnInvalidSignatureAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.007,
                    "name": "fromHeadersShouldThrowExceptionOnInvalidSignatureAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.002,
                    "name": "fromHeadersShouldReturnNonNullResultOnValidSignatureAndSignatureAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.003,
                    "name": "testSignatureValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.0,
                    "name": "fromHeadersShouldReturnNullOnNullHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.001,
                    "name": "fromHeadersShouldThrowExceptionOnInvalidBase64Signature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.InternalRequestSignatureTest",
                    "duration": 0.001,
                    "name": "fromHeadersShouldReturnNullIfSignatureHeaderMissing",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 9.017,
                    "name": "testCORSEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.329,
                    "name": "testCORSDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.073,
                    "name": "testParseListeners",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.035,
                    "name": "testAdvertisedUri",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.317,
                    "name": "testOptionsDoesNotIncludeWadlOutput",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.263,
                    "name": "testStandaloneConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.643,
                    "name": "testLoggersEndpointWithDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.364,
                    "name": "testIndependentAdminEndpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.186,
                    "name": "testDisableAdminEndpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.225,
                    "name": "testValidCustomizedHttpResponseHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.RestServerTest",
                    "duration": 0.227,
                    "name": "testDefaultCustomizedHttpResponseHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.entities.ConnectorTypeTest",
                    "duration": 0.001,
                    "name": "testToStringIsLowerCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.entities.ConnectorTypeTest",
                    "duration": 0.0,
                    "name": "testForValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 2.217,
                    "name": "testValidateConfigWithNonExistentAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.013,
                    "name": "testListConnectorPlugins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.27,
                    "name": "testConnectorPluginsIncludesTypeAndVersionInformation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.011,
                    "name": "testValidateConfigWithNonExistentName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.009,
                    "name": "testValidateConfigWithSingleErrorDueToMissingConnectorClassname",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.005,
                    "name": "testValidateConfigWithSimpleName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResourceTest",
                    "duration": 0.007,
                    "name": "testValidateConfigWithAlias",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 1.939,
                    "name": "testPutConnectorConfigWithSpecialCharsInName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testPutConnectorConfigWithControlSequenceInName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testCreateConnectorConfigNameMismatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.01,
                    "name": "testGetConnectorTaskConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.007,
                    "name": "testGetConnectorTaskConfigsConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testListConnectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.021,
                    "name": "testExpandConnectorsStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.027,
                    "name": "testExpandConnectorsInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.013,
                    "name": "testFullExpandConnectors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testCreateConnectorNameAllWhitespaces",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testDeleteConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.028,
                    "name": "testDeleteConnectorNotLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testDeleteConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testGetConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testGetConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testGetConnectorConfigConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testCreateConnectorWithSpecialCharsInName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testCreateConnectorWithControlSequenceInName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.001,
                    "name": "testPutConnectorConfigNameMismatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testConnectorActiveTopicsWithTopicTrackingDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.006,
                    "name": "testResetConnectorActiveTopicsWithTopicTrackingDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testResetConnectorActiveTopicsWithTopicTrackingEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testResetConnectorActiveTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testCompleteOrForwardWithErrorAndNoForwardUrl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testCreateConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.018,
                    "name": "testPutConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.226,
                    "name": "testPutConnectorTaskConfigsWithInternalRequestSignature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.008,
                    "name": "testPutConnectorTaskConfigsConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testRestartConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.007,
                    "name": "testRestartConnectorLeaderRedirect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testRestartConnectorOwnerRedirect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testRestartTaskNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testRestartTaskLeaderRedirect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testRestartTaskOwnerRedirect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testConnectorActiveTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.007,
                    "name": "testPutConnectorTaskConfigsNoInternalRequestSignature",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.037,
                    "name": "testExpandConnectorsWithConnectorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.006,
                    "name": "testCreateConnectorNotLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testCreateConnectorWithHeaderAuthorization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.004,
                    "name": "testCreateConnectorWithoutHeaderAuthorization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testCreateConnectorExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.003,
                    "name": "testCreateConnectorNameTrimWhitespaces",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.ConnectorsResourceTest",
                    "duration": 0.005,
                    "name": "testCreateConnectorNoName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.181,
                    "name": "setLevelWithEmptyArgTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.04,
                    "name": "getLoggersIgnoresNullLevelsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.005,
                    "name": "setLevelTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.004,
                    "name": "setRootLevelTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.004,
                    "name": "getUnknownLoggerTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.003,
                    "name": "setLevelWithInvalidArgTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.LoggingResourceTest",
                    "duration": 0.003,
                    "name": "getLoggerFallsbackToEffectiveLogLevelTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.resources.RootResourceTest",
                    "duration": 0.019,
                    "name": "testRootGet",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.rest.util.SSLUtilsTest",
                    "duration": 0.037,
                    "name": "testCreateClientSideSslContextFactory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.util.SSLUtilsTest",
                    "duration": 0.001,
                    "name": "testGetOrDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.util.SSLUtilsTest",
                    "duration": 0.006,
                    "name": "testCreateServerSideSslContextFactory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.util.SSLUtilsTest",
                    "duration": 0.004,
                    "name": "testCreateServerSideSslContextFactoryDefaultValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.rest.util.SSLUtilsTest",
                    "duration": 0.004,
                    "name": "testCreateClientSideSslContextFactoryDefaultValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneConfigTest",
                    "duration": 0.007,
                    "name": "testRestServerNonPrefixedSslConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneConfigTest",
                    "duration": 0.001,
                    "name": "testRestServerPrefixedSslConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 1.445,
                    "name": "testCreateSinkConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.078,
                    "name": "testRestartConnectorFailureOnStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.039,
                    "name": "testRestartTaskFailureOnStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.054,
                    "name": "testCreateAndStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.006,
                    "name": "testPutTaskConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.041,
                    "name": "testCorruptConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.03,
                    "name": "testCreateSourceConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.024,
                    "name": "testCreateConnectorFailedValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.048,
                    "name": "testCreateConnectorAlreadyExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.048,
                    "name": "testDestroyConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.041,
                    "name": "testRestartConnector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.036,
                    "name": "testRestartTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.044,
                    "name": "testAccessors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.runtime.standalone.StandaloneHerderTest",
                    "duration": 0.045,
                    "name": "testPutConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.FileOffsetBackingStoreTest",
                    "duration": 0.44,
                    "name": "testGetSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.FileOffsetBackingStoreTest",
                    "duration": 0.007,
                    "name": "testSaveRestore",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.FileOffsetBackingStoreTest",
                    "duration": 0.004,
                    "name": "testThreadName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.816,
                    "name": "testExceptionOnStartWhenConfigTopicHasMultiplePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.015,
                    "name": "testStartStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.027,
                    "name": "testRestoreZeroTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.02,
                    "name": "testRestoreConnectorDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.041,
                    "name": "testPutTaskConfigsDoesNotResolveAllInconsistencies",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.024,
                    "name": "testRestore",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.024,
                    "name": "testPutConnectorConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.016,
                    "name": "testRestoreTargetState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.026,
                    "name": "testPutTaskConfigsStartsOnlyReconfiguredTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.019,
                    "name": "testBackgroundUpdateTargetState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.019,
                    "name": "testBackgroundConnectorDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.013,
                    "name": "testPutTaskConfigsZeroTasks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.015,
                    "name": "testRestoreTargetStateUnexpectedDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaConfigBackingStoreTest",
                    "duration": 0.017,
                    "name": "testPutTaskConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.KafkaOffsetBackingStoreTest",
                    "duration": 0.627,
                    "name": "testGetSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaOffsetBackingStoreTest",
                    "duration": 0.006,
                    "name": "testReloadOnStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaOffsetBackingStoreTest",
                    "duration": 0.009,
                    "name": "testStartStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaOffsetBackingStoreTest",
                    "duration": 0.01,
                    "name": "testSetFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaOffsetBackingStoreTest",
                    "duration": 0.012,
                    "name": "testGetSetNull",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 1.581,
                    "name": "readTopicStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.018,
                    "name": "readInvalidStatusValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.006,
                    "name": "readInvalidStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.003,
                    "name": "deleteTopicStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.024,
                    "name": "putTopicState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.005,
                    "name": "putTopicStateRetriableFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.003,
                    "name": "putTopicStateNonRetriableFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreFormatTest",
                    "duration": 0.006,
                    "name": "putTopicStateShouldOverridePreviousState",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.645,
                    "name": "putConnectorStateRetriableFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.002,
                    "name": "putSafeWithNoPreviousValueIsPropagated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.018,
                    "name": "putConnectorStateNonRetriableFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.004,
                    "name": "putConnectorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.01,
                    "name": "putSafeConnectorIgnoresStaleStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.013,
                    "name": "deleteTaskState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.002,
                    "name": "misconfigurationOfStatusBackingStore",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.003,
                    "name": "putSafeOverridesValueSetBySameWorker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.004,
                    "name": "putConnectorStateShouldOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.002,
                    "name": "readConnectorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.003,
                    "name": "putTaskState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.001,
                    "name": "readTaskState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.KafkaStatusBackingStoreTest",
                    "duration": 0.003,
                    "name": "deleteConnectorState",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.MemoryStatusBackingStoreTest",
                    "duration": 0.003,
                    "name": "putAndGetConnectorStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.MemoryStatusBackingStoreTest",
                    "duration": 0.0,
                    "name": "putAndGetTaskStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.MemoryStatusBackingStoreTest",
                    "duration": 0.0,
                    "name": "deleteTaskStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.MemoryStatusBackingStoreTest",
                    "duration": 0.0,
                    "name": "deleteConnectorStatus",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.303,
                    "name": "testCancelAfterAwaitFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.007,
                    "name": "testWriteNullValueFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.004,
                    "name": "testWriteNullKeyFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.002,
                    "name": "testNoOffsetsToFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.005,
                    "name": "testFlushFailureReplacesOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.004,
                    "name": "testAlreadyFlushing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.002,
                    "name": "testCancelBeforeAwaitFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.storage.OffsetStorageWriterTest",
                    "duration": 0.004,
                    "name": "testWriteFlush",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.ConnectUtilsTest",
                    "duration": 0.016,
                    "name": "testLookupNullKafkaClusterId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConnectUtilsTest",
                    "duration": 0.002,
                    "name": "testAddMetricsContextPropertiesDistributed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConnectUtilsTest",
                    "duration": 0.001,
                    "name": "testLookupKafkaClusterId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConnectUtilsTest",
                    "duration": 0.001,
                    "name": "testLookupKafkaClusterIdTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConnectUtilsTest",
                    "duration": 0.001,
                    "name": "testAddMetricsContextPropertiesStandalone",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.0,
                    "name": "shouldNotConvertBeforeGetOnFailedCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.001,
                    "name": "shouldBlockUntilCancellation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.0,
                    "name": "shouldConvertOnlyOnceBeforeGetOnSuccessfulCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.001,
                    "name": "shouldBlockUntilSuccessfulCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.0,
                    "name": "shouldConvertBeforeGetOnSuccessfulCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.002,
                    "name": "shouldNotCancelIfMayNotCancelWhileRunning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.001,
                    "name": "shouldCancelBeforeGetIfMayCancelWhileRunning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.0,
                    "name": "shouldRecordOnlyFirstErrorBeforeGetOnFailedCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ConvertingFutureCallbackTest",
                    "duration": 0.001,
                    "name": "shouldBlockUntilFailedCompletion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.91,
                    "name": "testStartStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.023,
                    "name": "testReloadOnStart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.011,
                    "name": "testReloadOnStartWithNoNewRecordsPresent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.036,
                    "name": "testSendAndReadToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.244,
                    "name": "testPollConsumerError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.017,
                    "name": "testGetOffsetsConsumerErrorOnReadToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.KafkaBasedLogTest",
                    "duration": 0.009,
                    "name": "testProducerError",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.004,
                    "name": "shouldCreateConnectorLoggingContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.001,
                    "name": "shouldCreateTaskLoggingContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullConnectorNameForConnectorContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.001,
                    "name": "shouldAllowNestedLoggingContexts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullTaskIdForTaskContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.0,
                    "name": "shouldCreateAndCloseLoggingContextEvenWithNullContextMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullTaskIdForOffsetContext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.LoggingContextTest",
                    "duration": 0.0,
                    "name": "shouldCreateOffsetsLoggingContext",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.ShutdownableThreadTest",
                    "duration": 0.012,
                    "name": "testGracefulShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.ShutdownableThreadTest",
                    "duration": 0.002,
                    "name": "testForcibleShutdown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.TableTest",
                    "duration": 0.001,
                    "name": "basicOperations",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.442,
                    "name": "verifyingTopicCleanupPolicyShouldReturnFalseWhenBrokerVersionIsUnsupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.014,
                    "name": "shouldNotCreateTopicWhenItAlreadyExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.007,
                    "name": "verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeleteAndCompactPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.006,
                    "name": "describeTopicConfigShouldReturnEmptyMapWhenUnsupportedVersionFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.02,
                    "name": "returnNullWithTopicAuthorizationFailureOnCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "describeTopicConfigShouldReturnTopicConfigWhenTopicExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.0,
                    "name": "createShouldReturnFalseWhenSuppliedNullTopicDescription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.003,
                    "name": "describeShouldReturnEmptyWhenTopicDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.005,
                    "name": "returnNullWithApiVersionMismatchOnCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.004,
                    "name": "verifyingTopicCleanupPolicyShouldReturnFalseWhenTopicAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.011,
                    "name": "describeTopicConfigShouldReturnEmptyMapWhenNoTopicsAreSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.024,
                    "name": "throwsWithApiVersionMismatchOnDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.354,
                    "name": "shouldCreateTopicWithPartitionsWhenItDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.005,
                    "name": "throwsWithTopicAuthorizationFailureOnDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "verifyingGettingTopicCleanupPolicies",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.005,
                    "name": "throwsWithClusterAuthorizationFailureOnDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.005,
                    "name": "returnNullWithClusterAuthorizationFailureOnCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "shouldCreateOneTopicWhenProvidedMultipleDefinitionsWithSameTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.003,
                    "name": "describeTopicConfigShouldReturnEmptyMapWhenClusterAuthorizationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "shouldCreateTopicWithDefaultPartitionsAndReplicationFactorWhenItDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "describeShouldReturnTopicDescriptionWhenTopicExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.0,
                    "name": "describeTopicConfigShouldReturnMapWithNullValueWhenTopicDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.001,
                    "name": "verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.039,
                    "name": "shouldCreateTopicWithReplicationFactorWhenItDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.006,
                    "name": "verifyingTopicCleanupPolicyShouldReturnFalseWhenClusterAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.009,
                    "name": "describeTopicConfigShouldReturnEmptyMapWhenTopicAuthorizationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicAdminTest",
                    "duration": 0.0,
                    "name": "verifyingTopicCleanupPolicyShouldReturnTrueWhenTopicHasCorrectPolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.007,
                    "name": "topicCreationWithOneGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.003,
                    "name": "topicCreationWithOneGroupAndCombinedRegex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.002,
                    "name": "topicCreationWithDefaultGroupAndCustomProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.002,
                    "name": "testTopicCreationWhenTopicCreationIsEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.002,
                    "name": "withDefaultTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.003,
                    "name": "testTopicCreationWhenTopicCreationIsDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.004,
                    "name": "topicCreationWithTwoGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.util.TopicCreationTest",
                    "duration": 0.001,
                    "name": "testEmptyTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.058,
                    "name": "castWholeDateRecordValueWithSchemaString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessBooleanTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "testConfigInvalidTargetType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "testConfigMixWholeAndFieldTransformation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessFloat32",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueSchemalessFloat64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.002,
                    "name": "castWholeRecordValueSchemalessUnsupportedType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordKeySchemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.013,
                    "name": "castLogicalToPrimitive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueWithSchemaFloat32",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueWithSchemaFloat64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueWithSchemaString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "testConfigEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessInt16",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessInt32",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.002,
                    "name": "castWholeRecordValueSchemalessInt64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castFieldsSchemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "testUnsupportedTargetType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueWithSchemaInt16",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueWithSchemaInt32",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueWithSchemaInt64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeBigDecimalRecordValueWithSchemaString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueWithSchemaBooleanFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "testConfigInvalidMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueWithSchemaBooleanTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordDefaultValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueWithSchemaInt8",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordKeyWithSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessInt8",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.001,
                    "name": "castWholeRecordValueSchemalessBooleanFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.002,
                    "name": "testConfigInvalidSchemaType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.0,
                    "name": "castWholeRecordValueSchemalessString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.003,
                    "name": "castFieldsWithSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.CastTest",
                    "duration": 0.003,
                    "name": "castLogicalToString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.002,
                    "name": "withSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.001,
                    "name": "testNullWithSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.0,
                    "name": "nonExistentFieldWithSchemaShouldFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.001,
                    "name": "schemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.0,
                    "name": "nonExistentFieldSchemalessShouldReturnNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ExtractFieldTest",
                    "duration": 0.0,
                    "name": "testNullSchemaless",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.002,
                    "name": "tombstoneEventWithoutSchemaShouldPassThrough",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.002,
                    "name": "testKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.001,
                    "name": "testOptionalAndDefaultValuesNested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.001,
                    "name": "topLevelMapRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.0,
                    "name": "topLevelStructRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.001,
                    "name": "testOptionalFieldStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.0,
                    "name": "tombstoneEventWithSchemaShouldPassThrough",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.001,
                    "name": "testOptionalNestedStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.006,
                    "name": "testNestedMapWithDelimiter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.0,
                    "name": "testOptionalFieldMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.0,
                    "name": "testUnsupportedTypeInMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.0,
                    "name": "testOptionalStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.FlattenTest",
                    "duration": 0.002,
                    "name": "testNestedStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.HoistFieldTest",
                    "duration": 0.002,
                    "name": "withSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.HoistFieldTest",
                    "duration": 0.001,
                    "name": "schemaless",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.006,
                    "name": "insertConfiguredFieldsIntoTombstoneEventWithSchemaLeavesValueUnchanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.002,
                    "name": "schemalessInsertConfiguredFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.001,
                    "name": "insertConfiguredFieldsIntoTombstoneEventWithoutSchemaLeavesValueUnchanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.001,
                    "name": "topLevelStructRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.0,
                    "name": "insertKeyFieldsIntoTombstoneEvent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.001,
                    "name": "insertIntoNullKeyLeavesRecordUnchanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.InsertFieldTest",
                    "duration": 0.002,
                    "name": "copySchemaAndInsertConfiguredFields",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.346,
                    "name": "testWithSchemaUnsupportedReplacementType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.027,
                    "name": "testSchemalessWithReplacement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.001,
                    "name": "testSchemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.013,
                    "name": "testReplacementTypeMismatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.001,
                    "name": "testEmptyStringReplacementValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.0,
                    "name": "testWithSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.003,
                    "name": "testWithSchemaAndReplacement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.MaskFieldTest",
                    "duration": 0.004,
                    "name": "testSchemalessUnsupportedReplacementType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.006,
                    "name": "doesntMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.0,
                    "name": "identity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.0,
                    "name": "addPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.0,
                    "name": "addSuffix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.001,
                    "name": "slice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.RegexRouterTest",
                    "duration": 0.001,
                    "name": "staticReplacement",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.ReplaceFieldTest",
                    "duration": 0.003,
                    "name": "withSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ReplaceFieldTest",
                    "duration": 0.0,
                    "name": "tombstoneSchemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ReplaceFieldTest",
                    "duration": 0.0,
                    "name": "schemaless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ReplaceFieldTest",
                    "duration": 0.0,
                    "name": "tombstoneWithSchema",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.016,
                    "name": "schemaNameUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.002,
                    "name": "schemaNameAndVersionUpdateWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.0,
                    "name": "updateSchemaOfStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.001,
                    "name": "schemaNameAndVersionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.0,
                    "name": "updateSchemaOfNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.0,
                    "name": "schemaVersionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.SetSchemaMetadataTest",
                    "duration": 0.0,
                    "name": "updateSchemaOfNonStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.011,
                    "name": "testSchemalessFieldConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.019,
                    "name": "testConfigInvalidTargetType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.013,
                    "name": "testSchemalessStringToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testSchemalessDateToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.002,
                    "name": "testSchemalessTimestampToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testSchemalessTimeToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaTimestampToDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testWithSchemaTimestampToTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testWithSchemaTimestampToUnix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.003,
                    "name": "testWithSchemaNullValueToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.002,
                    "name": "testWithSchemaNullValueToDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.002,
                    "name": "testWithSchemaNullValueToTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaNullValueToUnix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaUnixToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.003,
                    "name": "testWithSchemaNullValueToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testSchemalessIdentity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.005,
                    "name": "testWithSchemaNullFieldToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaFieldConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.005,
                    "name": "testWithSchemaNullFieldToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessNullValueToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessNullValueToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaDateToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testWithSchemaIdentity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessTimestampToDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessTimestampToTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testSchemalessTimestampToUnix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testConfigMissingFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessNullValueToDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessNullValueToTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testSchemalessNullValueToUnix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.004,
                    "name": "testWithSchemaNullFieldToDate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.004,
                    "name": "testWithSchemaNullFieldToTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.002,
                    "name": "testWithSchemaNullFieldToUnix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testConfigNoTargetType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaStringToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testWithSchemaTimeToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testSchemalessUnixToTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.001,
                    "name": "testWithSchemaTimestampToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampConverterTest",
                    "duration": 0.0,
                    "name": "testConfigInvalidFormat",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.TimestampRouterTest",
                    "duration": 0.265,
                    "name": "defaultConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.ValueToKeyTest",
                    "duration": 0.01,
                    "name": "withSchema",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ValueToKeyTest",
                    "duration": 0.003,
                    "name": "nonExistingField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.ValueToKeyTest",
                    "duration": 0.0,
                    "name": "schemaless",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.HasHeaderKeyTest",
                    "duration": 0.006,
                    "name": "testNameRequiredInConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.HasHeaderKeyTest",
                    "duration": 0.01,
                    "name": "testTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.HasHeaderKeyTest",
                    "duration": 0.002,
                    "name": "testNameMayNotBeEmptyInConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.HasHeaderKeyTest",
                    "duration": 0.003,
                    "name": "testConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.TopicNameMatchesTest",
                    "duration": 0.006,
                    "name": "testTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.TopicNameMatchesTest",
                    "duration": 0.002,
                    "name": "testPatternIsValidRegexInConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.TopicNameMatchesTest",
                    "duration": 0.004,
                    "name": "testConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.TopicNameMatchesTest",
                    "duration": 0.001,
                    "name": "testPatternMayNotBeEmptyInConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.predicates.TopicNameMatchesTest",
                    "duration": 0.001,
                    "name": "testPatternRequiredInConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.connect.transforms.util.NonEmptyListValidatorTest",
                    "duration": 0.001,
                    "name": "testNullList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.util.NonEmptyListValidatorTest",
                    "duration": 0.0,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.connect.transforms.util.NonEmptyListValidatorTest",
                    "duration": 0.001,
                    "name": "testValidList",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.009,
                    "name": "testZookeeperKeyStorePassword",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.002,
                    "name": "testConnectionsMaxReauthMsExplicit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.001,
                    "name": "testKafkaSslPasswordsWithSymbols",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.004,
                    "name": "testZkSslProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslCipherSuites",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.004,
                    "name": "testZkSslKeyStoreType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslOcspEnable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.001,
                    "name": "testConnectionsMaxReauthMsDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslTrustStoreLocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslEnabledProtocols",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.001,
                    "name": "testKafkaSslPasswords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.004,
                    "name": "testGetKafkaConfigFromArgs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslClientEnable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZookeeperTrustStorePassword",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.015,
                    "name": "testGetKafkaConfigFromArgsNonArgsAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.004,
                    "name": "testGetKafkaConfigFromArgsNonArgsOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.001,
                    "name": "testGetKafkaConfigFromArgsNonArgsAtTheBegging",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.003,
                    "name": "testZkSslKeyStoreLocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.005,
                    "name": "testZkSslCrlEnable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.008,
                    "name": "testZkSslEndpointIdentificationAlgorithm",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.KafkaTest",
                    "duration": 0.005,
                    "name": "testZkSslTrustStoreType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 11.878,
                    "name": "testAclCliWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 0.13,
                    "name": "testInvalidAuthorizerProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 2.189,
                    "name": "testAclsOnPrefixedResourcesWithAdminAPI",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 2.459,
                    "name": "testPatternTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 8.19,
                    "name": "testProducerConsumerCliWithAdminAPI",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 0.904,
                    "name": "testAclsOnPrefixedResourcesWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 12.752,
                    "name": "testProducerConsumerCliWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AclCommandTest",
                    "duration": 7.189,
                    "name": "testAclCliWithAdminAPI",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 4.319,
                    "name": "testReplicaPlacementAllServers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 4.527,
                    "name": "testMissingPartition0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 4.506,
                    "name": "testWrongReplicaCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 4.548,
                    "name": "testReplicaPlacementPartialServers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 4.586,
                    "name": "testIncrementPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AddPartitionsTest",
                    "duration": 5.182,
                    "name": "testManualAssignmentOfReplicas",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.004,
                    "name": "testAssignmentWithRackAwareWithUnevenRacks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testAssignmentWith2ReplicasRackAware",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.002,
                    "name": "testAssignmentWithRackAwareWithUnevenReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testSkipBrokerWithReplicaAlreadyAssigned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testAssignmentWithRackAware",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.002,
                    "name": "testRackAwareExpansion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testAssignmentWith2ReplicasRackAwareWith6Partitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.0,
                    "name": "testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.003,
                    "name": "testReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.0,
                    "name": "testGetRackAlternatedBrokerListAndAssignReplicasToBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.002,
                    "name": "testMoreReplicasThanRacks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.002,
                    "name": "testSingleRack",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testAssignmentWithRackAwareWithRandomStartIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.007,
                    "name": "testLargeNumberPartitionsAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminRackAwareTest",
                    "duration": 0.001,
                    "name": "testLessReplicasThanRacks",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.11,
                    "name": "testMockedConcurrentTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.167,
                    "name": "testGetBrokerMetadatas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 2.206,
                    "name": "testBootstrapClientIdConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 2.199,
                    "name": "testTopicConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.161,
                    "name": "testManualReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.157,
                    "name": "testConcurrentTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 2.464,
                    "name": "shouldPropagateDynamicBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.155,
                    "name": "testTopicCreationWithCollision",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.AdminZkClientTest",
                    "duration": 0.174,
                    "name": "testTopicCreationInZK",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.BrokerApiVersionsCommandTest",
                    "duration": 2.189,
                    "name": "checkBrokerApiVersionCommandOutput",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.129,
                    "name": "testEntityDefaultOptionWithDescribeBrokerLoggerIsNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "testNoSpecifiedEntityOptionWithDescribeBrokersInBootstrapServerIsAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.22,
                    "name": "testScramCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldFailIfBrokerEntityTypeIsNotAnIntegerUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldFailIfUnrecognisedEntityTypeUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedConfigUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.194,
                    "name": "shouldParseArgumentsForTopicsEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.185,
                    "name": "testQuotaConfigEntityUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.124,
                    "name": "testOptionEntityTypeNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.179,
                    "name": "shouldParseArgumentsForUsersEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.111,
                    "name": "shouldFailIfMixedEntityTypeFlagsUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.12,
                    "name": "shouldFailIfBrokerEntityTypeIsNotAnInteger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.129,
                    "name": "shouldAddBrokerDynamicConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldFailIfMixedEntityTypeFlags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.121,
                    "name": "shouldParseArgumentsForBrokersEntityTypeUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedEntityNameUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.224,
                    "name": "shouldExitWithNonZeroStatusOnZkCommandError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "testUserClientQuotaOpts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "shouldAlterTopicConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.144,
                    "name": "shouldAddClientConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.114,
                    "name": "shouldAddClientConfigUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.124,
                    "name": "shouldDeleteBrokerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "shouldParseArgumentsForTopicsEntityTypeUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.117,
                    "name": "shouldDescribeConfigBrokerWithoutEntityName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.114,
                    "name": "shouldSupportCommaSeparatedValuesUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldAddDefaultBrokerDynamicConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.128,
                    "name": "testQuotaConfigEntity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedBracketConfigUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "testDescribeAllTopicConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedBracketConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "shouldAddBrokerLoggerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldFailIfAddAndAddFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldFailIfUnrecognisedEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "testUserClientQuotaOptsUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldFailIfShortBrokerEntityTypeIsNotAnIntegerUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.126,
                    "name": "shouldAddBrokerQuotaConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "shouldParseArgumentsForClientsEntityTypeUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldNotUpdateConfigIfNonExistingConfigIsDeletedUsingZookeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedEntityName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldRaiseInvalidConfigurationExceptionWhenAddingInvalidBrokerLoggerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.118,
                    "name": "testOptionEntityTypeNamesUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.115,
                    "name": "shouldDescribeConfigSynonyms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.121,
                    "name": "shouldParseArgumentsForUsersEntityTypeUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "testEntityDefaultOptionWithAlterBrokerLoggerIsNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.115,
                    "name": "shouldNotUpdateBrokerConfigIfMalformedConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "testParseConfigsToBeAddedForAddConfigFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.123,
                    "name": "shouldParseArgumentsForBrokerLoggersEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.115,
                    "name": "shouldNotUpdateConfigIfNonExistingConfigIsDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldFailIfShortBrokerEntityTypeIsNotAnInteger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "testDescribeAllBrokerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldExitWithNonZeroStatusOnBrokerCommandError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.119,
                    "name": "shouldParseArgumentsForBrokersEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.338,
                    "name": "testDynamicBrokerConfigUpdateUsingZooKeeper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.111,
                    "name": "testNoSpecifiedEntityOptionWithDescribeBrokersInZKIsAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.123,
                    "name": "testQuotaDescribeEntities",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.123,
                    "name": "shouldParseArgumentsForClientsEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.111,
                    "name": "testDescribeAllBrokerConfigBootstrapServerRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.112,
                    "name": "shouldAlterTopicConfigFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.115,
                    "name": "shouldExitWithNonZeroStatusOnArgError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ConfigCommandTest",
                    "duration": 0.113,
                    "name": "shouldAddTopicConfigUsingZookeeper",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.DelegationTokenCommandTest",
                    "duration": 3.199,
                    "name": "testDelegationTokenRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.199,
                    "name": "testDeleteNonEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.225,
                    "name": "testDeleteCmdWithMixOfSuccessAndError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.204,
                    "name": "testDeleteWithTopicOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.192,
                    "name": "testDeleteNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.209,
                    "name": "testDeleteCmdNonEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.203,
                    "name": "testDeleteCmdNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.197,
                    "name": "testDeleteEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.223,
                    "name": "testDeleteWithMixOfSuccessAndError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 2.203,
                    "name": "testDeleteWithUnrecognizedNewConsumerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.193,
                    "name": "testDeleteCmdAllGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteConsumerGroupsTest",
                    "duration": 3.192,
                    "name": "testDeleteCmdEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.209,
                    "name": "testDeleteOffsetsOfStableConsumerGroupWithTopicOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.209,
                    "name": "testDeleteOffsetsOfEmptyConsumerGroupWithUnknownTopicOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.297,
                    "name": "testDeleteOffsetsOfStableConsumerGroupWithUnknownTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 3.192,
                    "name": "testDeleteOffsetsOfEmptyConsumerGroupWithUnknownTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.192,
                    "name": "testDeleteOffsetsOfEmptyConsumerGroupWithTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.195,
                    "name": "testDeleteOffsetsOfEmptyConsumerGroupWithTopicOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.203,
                    "name": "testDeleteOffsetsOfStableConsumerGroupWithTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 3.188,
                    "name": "testDeleteOffsetsNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteOffsetsConsumerGroupCommandIntegrationTest",
                    "duration": 2.183,
                    "name": "testDeleteOffsetsOfStableConsumerGroupWithUnknownTopicOnly",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 26.317,
                    "name": "testDeleteTopicWithCleaner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 7.361,
                    "name": "testResumeDeleteTopicOnControllerFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 5.319,
                    "name": "testResumeDeleteTopicWithRecoveredFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 2.439,
                    "name": "testDeleteTopicAlreadyMarkedAsDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 6.529,
                    "name": "testIncreasePartitionCountDuringDeleteTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 5.304,
                    "name": "testPartitionReassignmentDuringDeleteTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 2.418,
                    "name": "testDeleteNonExistingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 3.186,
                    "name": "testRecreateTopicAfterDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 2.46,
                    "name": "testDisableDeleteTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 2.438,
                    "name": "testAddPartitionDuringDeleteTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 2.46,
                    "name": "testDeleteTopicWithAllAliveReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 5.591,
                    "name": "testDeleteTopicDuringAddPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DeleteTopicTest",
                    "duration": 7.803,
                    "name": "testDeletingPartiallyDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.2,
                    "name": "testDescribeMembersOfNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.196,
                    "name": "testDescribeStateOfExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.2,
                    "name": "testDescribeExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 4.196,
                    "name": "testDescribeStateWithConsumersWithoutAssignedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.197,
                    "name": "testDescribeWithMultipleSubActions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.189,
                    "name": "testDescribeGroupOffsetsWithShortInitializationTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.195,
                    "name": "testDescribeOffsetsOfExistingGroupWithNoMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.194,
                    "name": "testDescribeGroupMembersWithShortInitializationTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.196,
                    "name": "testDescribeMembersOfExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.197,
                    "name": "testDescribeOffsetsOfExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.191,
                    "name": "testDescribeOffsetsWithConsumersWithoutAssignedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 11.206,
                    "name": "testDescribeWithMultiPartitionTopicAndMultipleConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 8.198,
                    "name": "testDescribeSimpleConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.196,
                    "name": "testDescribeStateOfNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.231,
                    "name": "testDescribeMembersWithConsumersWithoutAssignedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.206,
                    "name": "testDescribeMembersOfExistingGroupWithNoMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.202,
                    "name": "testDescribeWithUnrecognizedNewConsumerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.2,
                    "name": "testDescribeGroupStateWithShortInitializationTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.21,
                    "name": "testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.201,
                    "name": "testDescribeExistingGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.219,
                    "name": "testDescribeNonOffsetCommitGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.203,
                    "name": "testDescribeNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.205,
                    "name": "testDescribeStateWithMultiPartitionTopicAndMultipleConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.202,
                    "name": "testDescribeStateOfExistingGroupWithRoundRobinAssignor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.199,
                    "name": "testDescribeOffsetsOfNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.201,
                    "name": "testDescribeExistingGroupWithNoMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.202,
                    "name": "testDescribeAllExistingGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 13.203,
                    "name": "testDescribeWithConsumersWithoutAssignedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.199,
                    "name": "testDescribeGroupWithShortInitializationTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.221,
                    "name": "testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 3.216,
                    "name": "testDescribeStateOfExistingGroupWithNoMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.DescribeConsumerGroupTest",
                    "duration": 2.199,
                    "name": "testDescribeWithStateValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 8.372,
                    "name": "testAllTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 2.397,
                    "name": "testTopicWithoutPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 8.328,
                    "name": "testPathToJsonFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 2.396,
                    "name": "testTopicDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 11.397,
                    "name": "testPreferredReplicaElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 3.396,
                    "name": "testInvalidBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 2.426,
                    "name": "testPartitionWithoutTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 2.4,
                    "name": "testMissingElectionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 2.408,
                    "name": "testMissingTopicPartitionSelection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.LeaderElectionCommandTest",
                    "duration": 9.35,
                    "name": "testTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ListConsumerGroupTest",
                    "duration": 8.19,
                    "name": "testListConsumerGroupsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ListConsumerGroupTest",
                    "duration": 2.187,
                    "name": "testListWithUnrecognizedNewConsumerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ListConsumerGroupTest",
                    "duration": 7.185,
                    "name": "testListConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ListConsumerGroupTest",
                    "duration": 2.183,
                    "name": "testConsumerGroupStatesFromString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ListConsumerGroupTest",
                    "duration": 7.191,
                    "name": "testListGroupCommand",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 2.438,
                    "name": "testBasicPreferredReplicaElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 2.124,
                    "name": "testInvalidBrokerGiven",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 0.12,
                    "name": "testPreferredReplicaJsonData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 15.414,
                    "name": "testTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 11.427,
                    "name": "testAuthzFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 2.465,
                    "name": "testNoopElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 12.496,
                    "name": "testSingletonPartitionGiven",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 10.454,
                    "name": "testMultiplePartitionsSameAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 2.418,
                    "name": "testTopicDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 11.19,
                    "name": "testWithOfflinePreferredReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 10.181,
                    "name": "testNoPartitionsGiven",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.PreferredReplicaLeaderElectionCommandTest",
                    "duration": 11.189,
                    "name": "testMultipleBrokersGiven",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.021,
                    "name": "testInvalidCommandConfigArgumentForLegacyGenerate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.005,
                    "name": "shouldFailIfBlankArg",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "shouldNotAllowVerifyWithoutReassignmentOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.002,
                    "name": "testCancelWithPreserveThrottlesOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowZooKeeperWithListOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "shouldNotAllowCancelWithoutBootstrapServerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowGenerateWithoutBrokersOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowTopicsOptionWithVerify",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "testList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "testMissingBootstrapServerArgumentForExecute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowGenerateWithThrottleOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldFailIfNoArgs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowExecuteWithoutReassignmentOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "shouldNotAllowBrokersListWithVerifyOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldCorrectlyParseValidMinimumExecuteOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.006,
                    "name": "shouldNotAllowGenerateWithReassignmentOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.002,
                    "name": "shouldCorrectlyParseValidMinimumLegacyExecuteOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldCorrectlyParseValidMinimumGenerateOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "shouldNotAllowGenerateWithoutBrokersAndTopicsOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowThrottleWithVerifyOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.004,
                    "name": "shouldFailIfMultipleActions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldUseDefaultsIfEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowExecuteWithBrokerList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldAllowThrottleOptionOnExecute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowExecuteWithTopicsOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldCorrectlyParseValidMinimumVerifyOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.001,
                    "name": "shouldCorrectlyParseValidMinimumLegacyVerifyOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowCancelWithoutReassignmentJsonFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsCommandArgsTest",
                    "duration": 0.003,
                    "name": "shouldNotAllowGenerateWithoutTopicsOption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 8.516,
                    "name": "testProduceAndConsumeWithReassignmentInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 4.615,
                    "name": "testReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 4.602,
                    "name": "testLegacyReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 5.625,
                    "name": "testCancellation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 7.388,
                    "name": "testThrottledReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 5.616,
                    "name": "testHighWaterMarkAfterPartitionReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsIntegrationTest",
                    "duration": 29.448,
                    "name": "testReplicaDirectoryMoves",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.009,
                    "name": "testCurrentPartitionReplicaAssignmentToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.011,
                    "name": "testParseExecuteAssignmentArgs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.005,
                    "name": "testExecuteWithInvalidBrokerIdFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.01,
                    "name": "testModifyBrokerThrottles",
                    "skipped": false,
                    "status": "FAILED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.011,
                    "name": "testGetReplicaAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.001,
                    "name": "testCompareTopicPartitionReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.007,
                    "name": "testReplicaMoveStatesToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.002,
                    "name": "testExecuteWithInvalidPartitionsFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.012,
                    "name": "testGenerateAssignmentWithFewerBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.003,
                    "name": "testParseGenerateAssignmentArgs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.002,
                    "name": "testFindLogDirMoveStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.002,
                    "name": "testAlterReplicaLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.081,
                    "name": "testMoveMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.004,
                    "name": "testPartitionReassignStatesToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.002,
                    "name": "testGetBrokerRackInformation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.009,
                    "name": "testModifyTopicThrottles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.006,
                    "name": "testCurReassignmentsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.003,
                    "name": "testGenerateAssignmentWithInconsistentRacks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.0,
                    "name": "testCompareTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.011,
                    "name": "testFindPartitionReassignmentStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ReassignPartitionsUnitTest",
                    "duration": 0.001,
                    "name": "testGenerateAssignmentFailsWithoutEnoughReplicas",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.198,
                    "name": "testResetOffsetsExportImportPlanSingleGroupArg",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.198,
                    "name": "testResetOffsetsShiftByHigherThanLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.189,
                    "name": "testResetOffsetsShiftMinus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.208,
                    "name": "testResetOffsetsToCurrentOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.189,
                    "name": "testResetOffsetsToEarliestOnOneTopicAndPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 2.19,
                    "name": "testResetWithUnrecognizedNewConsumerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.192,
                    "name": "testResetOffsetsByDurationToEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.189,
                    "name": "testResetOffsetsToEarliestOnOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 3.18,
                    "name": "testResetOffsetsNotExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 18.186,
                    "name": "testResetOffsetsExistingTopicSelectedGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 7.187,
                    "name": "testResetOffsetsToZonedDateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.201,
                    "name": "testResetOffsetsToEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 15.197,
                    "name": "testResetOffsetsExportImportPlan",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 10.189,
                    "name": "testResetOffsetsToSpecificOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.198,
                    "name": "testResetOffsetsShiftPlus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.193,
                    "name": "testResetOffsetsToLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 9.189,
                    "name": "testResetOffsetsShiftByLowerThanEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 19.189,
                    "name": "testResetOffsetsExistingTopicAllGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.194,
                    "name": "testResetOffsetsByDuration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 8.189,
                    "name": "testResetOffsetsToLocalDateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 3.187,
                    "name": "testResetOffsetsExistingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 35.202,
                    "name": "testResetOffsetsAllTopicsAllGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 13.205,
                    "name": "testResetOffsetsToEarliestOnTopicsAndPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.ResetConsumerGroupOffsetTest",
                    "duration": 14.202,
                    "name": "testResetOffsetsToEarliestOnTopics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.TimeConversionTests",
                    "duration": 0.003,
                    "name": "testDateTimeFormats",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.TopicCommandTest",
                    "duration": 0.008,
                    "name": "testIsNotUnderReplicatedWhenAdding",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.688,
                    "name": "testAlterPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 63.629,
                    "name": "testAlterWhenTopicDoesntExistWithIfExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.18,
                    "name": "testCreateWithDefaultReplication",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 8.798,
                    "name": "testDescribeAtMinIsrPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.186,
                    "name": "testParseAssignmentDuplicateEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.689,
                    "name": "testCreateWithNegativeReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.709,
                    "name": "testCreateWithInvalidReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.413,
                    "name": "testListTopicsWithExcludeInternal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 5.199,
                    "name": "testDescribeUnderReplicatedPartitionsWhenReassignmentIsInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.736,
                    "name": "testCreateWithNegativePartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 33.598,
                    "name": "testAlterWhenTopicDoesntExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.686,
                    "name": "testParseAssignmentPartitionsOfDifferentSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 5.288,
                    "name": "testCreateAlterTopicWithRackAware",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 4.186,
                    "name": "testTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.768,
                    "name": "testCreateWithDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.498,
                    "name": "testDescribeReportOverriddenConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.748,
                    "name": "testCreateWithAssignmentAndPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.532,
                    "name": "testListTopicsWithWhitelist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.766,
                    "name": "testDescribeWhenTopicDoesntExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.305,
                    "name": "testAlterAssignmentWithMoreAssignmentThanPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.754,
                    "name": "testDescribeWhenTopicDoesntExistWithIfExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 4.189,
                    "name": "testCreateWithDefaultPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 32.783,
                    "name": "testListTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.724,
                    "name": "testDeleteWhenTopicDoesntExistWithIfExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.754,
                    "name": "testCreateWhenAlreadyExistsWithIfNotExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.736,
                    "name": "testDeleteInternalTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.747,
                    "name": "testParseAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.739,
                    "name": "testInvalidTopicLevelConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.299,
                    "name": "testAlterAssignmentWithMorePartitionsThanAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.204,
                    "name": "testConfigPreservationAcrossPartitionAlteration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.19,
                    "name": "testCreateWithConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 4.749,
                    "name": "testDescribeUnderReplicatedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 4.642,
                    "name": "testDescribeUnderMinIsrPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.319,
                    "name": "testDeleteWhenTopicDoesntExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.444,
                    "name": "testDescribeAndListTopicsWithoutInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 5.589,
                    "name": "testDescribeUnavailablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.861,
                    "name": "testCreateWithAssignmentAndReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.45,
                    "name": "testCreateWithReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.341,
                    "name": "testAlterWithInvalidPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.762,
                    "name": "testCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 5.471,
                    "name": "testDescribeUnderMinIsrPartitionsMixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.815,
                    "name": "testConfigOptWithBootstrapServers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.328,
                    "name": "testAlterWithUnspecifiedPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 2.809,
                    "name": "testCreateWhenAlreadyExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.195,
                    "name": "testDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithAdminClientTest",
                    "duration": 3.199,
                    "name": "testAlterAssignment",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.382,
                    "name": "testAlterPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.259,
                    "name": "testAlterInternalTopicPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.137,
                    "name": "testCreateWithNegativeReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.126,
                    "name": "testCreateWithInvalidReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.168,
                    "name": "testListTopicsWithExcludeInternal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.127,
                    "name": "testCreateWithNegativePartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.165,
                    "name": "testCreateIfNotExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.196,
                    "name": "testCreateAlterTopicWithRackAware",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.173,
                    "name": "testTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.147,
                    "name": "testDescribeIfTopicNotExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.175,
                    "name": "testDescribeReportOverriddenConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.167,
                    "name": "testListTopicsWithWhitelist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.148,
                    "name": "testListTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.156,
                    "name": "testDeleteInternalTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.125,
                    "name": "testInvalidTopicLevelConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.185,
                    "name": "testAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.155,
                    "name": "testConfigPreservationAcrossPartitionAlteration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.202,
                    "name": "testTopicOperationsWithRegexSymbolInTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.433,
                    "name": "testCreateWithConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.23,
                    "name": "testAlterIfExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.317,
                    "name": "testDescribeAndListTopicsWithoutInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.13,
                    "name": "testCreateWithUnspecifiedReplicationFactorAndPartitionsWithZkClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.166,
                    "name": "testCreateWithReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.151,
                    "name": "testAlterWithInvalidPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.146,
                    "name": "testCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.169,
                    "name": "testDescribeAndListTopicsMarkedForDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.13,
                    "name": "testDeleteIfExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.165,
                    "name": "testDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.admin.TopicCommandWithZKClientTest",
                    "duration": 0.162,
                    "name": "testAlterAssignment",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.AdminClientWithPoliciesIntegrationTest",
                    "duration": 2.526,
                    "name": "testInvalidAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AdminClientWithPoliciesIntegrationTest",
                    "duration": 3.201,
                    "name": "testValidAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AdminClientWithPoliciesIntegrationTest",
                    "duration": 4.213,
                    "name": "testInvalidAlterConfigsDueToPolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ApiUtilsTest",
                    "duration": 0.259,
                    "name": "testShortStringNonASCII",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ApiUtilsTest",
                    "duration": 0.124,
                    "name": "testShortStringASCII",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ApiVersionTest",
                    "duration": 0.002,
                    "name": "testApiVersionUniqueIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ApiVersionTest",
                    "duration": 0.0,
                    "name": "testMinSupportedVersionFor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ApiVersionTest",
                    "duration": 0.0,
                    "name": "testShortVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ApiVersionTest",
                    "duration": 0.001,
                    "name": "testApply",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ApiVersionTest",
                    "duration": 0.001,
                    "name": "testApiVersionValidator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.262,
                    "name": "testCommitWithTopicWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.207,
                    "name": "shouldInitTransactionsWhenAclSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.208,
                    "name": "testDeleteGroupApiWithNoDeleteGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.214,
                    "name": "testPatternSubscriptionWithTopicAndGroupRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.198,
                    "name": "testPatternSubscriptionWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.195,
                    "name": "testCreatePermissionOnClusterToWriteToNonExistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.195,
                    "name": "testCreatePermissionOnClusterToReadFromNonExistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.202,
                    "name": "testUnauthorizedDeleteTopicsWithDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.224,
                    "name": "shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.2,
                    "name": "testSendOffsetsWithNoConsumerGroupWriteAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.212,
                    "name": "testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.21,
                    "name": "testDeleteGroupOffsetsWithNoAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.207,
                    "name": "testDescribeGroupCliWithGroupDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.202,
                    "name": "testTransactionalProducerTopicAuthorizationExceptionInCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.198,
                    "name": "testOffsetFetchWithNoAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.203,
                    "name": "testConsumeUsingAssignWithNoAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 4.192,
                    "name": "testProduceWithTopicRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.202,
                    "name": "testListOffsetsWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.202,
                    "name": "testDeleteGroupApiWithDeleteGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.195,
                    "name": "testDeleteRecordsWithWildCardAuth",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testFetchFollowerRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.205,
                    "name": "testDeleteGroupOffsetsWithoutDeleteAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.2,
                    "name": "testIdempotentProducerNoIdempotentWriteAclInProduce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.195,
                    "name": "testDeleteGroupOffsetsWithAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.201,
                    "name": "testCreatePermissionOnTopicToReadFromNonExistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.279,
                    "name": "testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.192,
                    "name": "testSimpleConsumeWithOffsetLookupAndNoGroupAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.19,
                    "name": "testDeleteTopicsWithWildCardAuth",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.198,
                    "name": "testConsumeWithTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.198,
                    "name": "shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.198,
                    "name": "testOffsetFetchWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.2,
                    "name": "testCreatePermissionOnTopicToWriteToNonExistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.194,
                    "name": "testCommitWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.206,
                    "name": "testMetadataWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.189,
                    "name": "testProduceWithNoTopicAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.191,
                    "name": "testProduceWithTopicWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.19,
                    "name": "testCreatePartitionsWithWildCardAuth",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testUnauthorizedDeleteTopicsWithoutDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.197,
                    "name": "testDescribeGroupApiWithGroupDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.208,
                    "name": "testAuthorizationWithTopicNotExisting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testListOffsetsWithTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.194,
                    "name": "testListGroupApiWithAndWithoutListGroupAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.186,
                    "name": "testCreatePermissionMetadataRequestAutoCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.191,
                    "name": "testDeleteGroupApiWithNoDeleteGroupAcl2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.201,
                    "name": "testConsumeWithTopicAndGroupRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.214,
                    "name": "testPatternSubscriptionNotMatchingInternalTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.2,
                    "name": "testFetchAllOffsetsTopicAuthorization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.2,
                    "name": "shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.208,
                    "name": "testConsumeWithTopicWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.199,
                    "name": "testOffsetsForLeaderEpochClusterPermission",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.208,
                    "name": "testTransactionalProducerTopicAuthorizationExceptionInSendCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.213,
                    "name": "testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.195,
                    "name": "testOffsetFetchWithNoGroupAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.186,
                    "name": "testCommitWithNoAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.2,
                    "name": "testUnauthorizedCreatePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.195,
                    "name": "testDeleteGroupOffsetsWithDeleteAclWithoutTopicAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.199,
                    "name": "testConsumeWithoutTopicDescribeAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.196,
                    "name": "testClusterId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.196,
                    "name": "shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.203,
                    "name": "shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.197,
                    "name": "testCommitWithNoGroupAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.196,
                    "name": "testUnauthorizedDeleteRecordsWithDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.197,
                    "name": "testCreateTopicAuthorizationWithClusterCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.197,
                    "name": "testOffsetFetchWithTopicAndGroupRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testCommitWithTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 9.208,
                    "name": "testAuthorizationWithTopicExisting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.188,
                    "name": "testUnauthorizedDeleteRecordsWithoutDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.2,
                    "name": "testMetadataWithTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.204,
                    "name": "testProduceWithTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.199,
                    "name": "testDescribeGroupApiWithNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 4.193,
                    "name": "testPatternSubscriptionMatchingInternalTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 3.186,
                    "name": "testSendOffsetsWithNoConsumerGroupDescribeAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.186,
                    "name": "testOffsetFetchTopicDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.184,
                    "name": "testCommitWithTopicAndGroupRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.187,
                    "name": "testIdempotentProducerNoIdempotentWriteAclInInitProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.AuthorizerIntegrationTest",
                    "duration": 2.193,
                    "name": "testSimpleConsumeWithExplicitSeekAndNoGroupAccess",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ClientIdQuotaTest",
                    "duration": 5.216,
                    "name": "testProducerConsumerOverrideLowerQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ClientIdQuotaTest",
                    "duration": 6.368,
                    "name": "testProducerConsumerOverrideUnthrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ClientIdQuotaTest",
                    "duration": 18.192,
                    "name": "testThrottledProducerConsumer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ClientIdQuotaTest",
                    "duration": 28.201,
                    "name": "testQuotaOverrideDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ClientIdQuotaTest",
                    "duration": 3.721,
                    "name": "testThrottledRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 11.651,
                    "name": "testCloseDuringRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 27.818,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 24.217,
                    "name": "testSeekAndCommitWithBrokerFailures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 5.408,
                    "name": "testConsumerReceivesFatalExceptionWhenGroupPassesMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 14.247,
                    "name": "testSubscribeWhenTopicUnavailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 14.588,
                    "name": "testRollingBrokerRestartsWithSmallerMaxGroupSizeConfigDisruptsBigGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerBounceTest",
                    "duration": 0.0,
                    "name": "testConsumptionWithBrokerFailures",
                    "skipped": true,
                    "status": "SKIPPED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ConsumerTopicCreationTest",
                    "duration": 3.211,
                    "name": "testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerTopicCreationTest",
                    "duration": 3.211,
                    "name": "testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerTopicCreationTest",
                    "duration": 3.209,
                    "name": "testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ConsumerTopicCreationTest",
                    "duration": 3.229,
                    "name": "testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=false]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.CustomQuotaCallbackTest",
                    "duration": 41.317,
                    "name": "testCustomQuotaCallback",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 13.834,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 8.962,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 8.123,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 8.418,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 7.519,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 7.554,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 6.941,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 9.405,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 6.671,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 6.222,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 8.298,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DelegationTokenEndToEndAuthorizationTest",
                    "duration": 7.204,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.DescribeAuthorizedOperationsTest",
                    "duration": 32.681,
                    "name": "testClusterAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DescribeAuthorizedOperationsTest",
                    "duration": 27.091,
                    "name": "testTopicAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.DescribeAuthorizedOperationsTest",
                    "duration": 25.81,
                    "name": "testConsumerGroupAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.EndToEndClusterIdTest",
                    "duration": 2.214,
                    "name": "testEndToEnd",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.GroupAuthorizerIntegrationTest",
                    "duration": 2.206,
                    "name": "testUnauthorizedProduceAndConsume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupAuthorizerIntegrationTest",
                    "duration": 2.213,
                    "name": "testAuthorizedProduceAndConsume",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.GroupCoordinatorIntegrationTest",
                    "duration": 2.221,
                    "name": "testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.949,
                    "name": "testTwoConsumersWithDifferentSaslCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 7.657,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.327,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.637,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.755,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.638,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.339,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.444,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 7.003,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.063,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.523,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 9.24,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.GroupEndToEndAuthorizationTest",
                    "duration": 6.655,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.LogAppendTimeTest",
                    "duration": 4.202,
                    "name": "testProduceConsume",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.MetricsTest",
                    "duration": 3.216,
                    "name": "testMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.528,
                    "name": "testDescribeReplicaLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 0.0,
                    "name": "testIncrementalAlterConfigsForLog4jLogLevels",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 0.0,
                    "name": "testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.382,
                    "name": "testInvalidAlterPartitionReassignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.539,
                    "name": "testInvalidAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 6.44,
                    "name": "testElectUncleanLeadersNoop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.531,
                    "name": "testAlterLogDirsAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.531,
                    "name": "testIncrementalAlterConfigsDeleteBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 7.425,
                    "name": "testElectUncleanLeadersAndNoop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 6.54,
                    "name": "testElectPreferredLeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.521,
                    "name": "testDeleteConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.203,
                    "name": "testListReassignmentsDoesNotShowNonReassigningPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.565,
                    "name": "testConsumeAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.551,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 9.398,
                    "name": "testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 0.0,
                    "name": "testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.525,
                    "name": "testDescribeConfigsForLog4jLogLevels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.596,
                    "name": "testMinimumRequestTimeouts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.596,
                    "name": "testIncrementalAlterConfigsDeleteAndSetBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 0.0,
                    "name": "testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.406,
                    "name": "testForceClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.604,
                    "name": "testListNodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.406,
                    "name": "testDelayedClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.564,
                    "name": "testLongTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.549,
                    "name": "testOffsetsForTimesAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.571,
                    "name": "testListReassignmentsDoesNotShowDeletedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.531,
                    "name": "testDeleteRecordsWithException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.545,
                    "name": "testDescribeLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.199,
                    "name": "testAlterReplicaLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 11.128,
                    "name": "testLogStartOffsetCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 0.0,
                    "name": "testAlterConfigsForLog4jLogLevelsDoesNotWork",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.596,
                    "name": "testAclOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.572,
                    "name": "testDescribeCluster",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 7.444,
                    "name": "testElectUncleanLeadersForManyPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.58,
                    "name": "testElectUncleanLeadersForUnknownPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.559,
                    "name": "testCreatePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.382,
                    "name": "testDescribeNonExistingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.096,
                    "name": "testMetadataRefresh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.209,
                    "name": "testDescribeAndAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 7.457,
                    "name": "testElectUncleanLeadersForAllPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.218,
                    "name": "testLogStartOffsetAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 7.471,
                    "name": "testElectUncleanLeadersForOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.392,
                    "name": "testValidIncrementalAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.546,
                    "name": "testInvalidIncrementalAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 5.378,
                    "name": "testSeekAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.373,
                    "name": "testCallInFlightTimeouts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.388,
                    "name": "testNullConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.205,
                    "name": "testDescribeConfigsForTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 8.674,
                    "name": "testConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 7.211,
                    "name": "testElectUncleanLeadersWhenNoLiveBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.555,
                    "name": "testCreateExistingTopicsThrowTopicExistsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 4.603,
                    "name": "testCreateDeleteTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextAdminIntegrationTest",
                    "duration": 3.594,
                    "name": "testAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.505,
                    "name": "testEarliestOrLatestOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.405,
                    "name": "testPartitionsForAutoCreate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.492,
                    "name": "testShrinkingTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.504,
                    "name": "testMaxPollIntervalMs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.223,
                    "name": "testOffsetsForTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.542,
                    "name": "testSubsequentPatternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.211,
                    "name": "testPerPartitionLeadMetricsCleanUpWithAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.504,
                    "name": "testConsumeMessagesWithCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.52,
                    "name": "testAsyncCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 27.54,
                    "name": "testLowMaxFetchSizeForRequestAndPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 15.222,
                    "name": "testMultiConsumerSessionTimeoutOnStopPolling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.236,
                    "name": "testMaxPollIntervalMsDelayInRevocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.563,
                    "name": "testPerPartitionLagMetricsCleanUpWithAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.219,
                    "name": "testPartitionsForInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 15.563,
                    "name": "testMultiConsumerStickyAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.695,
                    "name": "testPauseStateNotPreservedByRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.252,
                    "name": "testFetchHonoursFetchSizeIfLargeRecordNotFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.936,
                    "name": "testSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 8.396,
                    "name": "testConsumingWithNullGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.228,
                    "name": "testPositionAndCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.567,
                    "name": "testFetchRecordLargerThanMaxPartitionFetchBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.57,
                    "name": "testUnsubscribeTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 9.447,
                    "name": "testMultiConsumerSessionTimeoutOnClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.566,
                    "name": "testFetchRecordLargerThanFetchMaxBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 9.561,
                    "name": "testMultiConsumerDefaultAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.407,
                    "name": "testAutoCommitOnClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.629,
                    "name": "testListTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.539,
                    "name": "testExpandingTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.607,
                    "name": "testInterceptors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.612,
                    "name": "testConsumingWithEmptyGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.231,
                    "name": "testPatternUnsubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.225,
                    "name": "testGroupConsumption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.569,
                    "name": "testPartitionsFor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.227,
                    "name": "testAutoCommitOnRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.565,
                    "name": "testInterceptorsWithWrongKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.258,
                    "name": "testPerPartitionLeadWithMaxPollRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.407,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.407,
                    "name": "testMaxPollIntervalMsDelayInAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.231,
                    "name": "testHeadersSerializerDeserializer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.245,
                    "name": "testDeprecatedPollBlocksForAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 10.231,
                    "name": "testMultiConsumerRoundRobinAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.604,
                    "name": "testPartitionPauseAndResume",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.403,
                    "name": "testQuotaMetricsNotCreatedIfNoQuotasConfigured",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.224,
                    "name": "testPerPartitionLagMetricsCleanUpWithSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.419,
                    "name": "testConsumeMessagesWithLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.436,
                    "name": "testPerPartitionLagMetricsWhenReadCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.593,
                    "name": "testAutoCommitOnCloseAfterWakeup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.611,
                    "name": "testMaxPollRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.719,
                    "name": "testAutoOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.408,
                    "name": "testPerPartitionLagWithMaxPollRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.583,
                    "name": "testFetchInvalidOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.587,
                    "name": "testAutoCommitIntercept",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.577,
                    "name": "testFetchHonoursMaxPartitionFetchBytesIfLargeRecordNotFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.227,
                    "name": "testCommitSpecifiedOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 5.397,
                    "name": "testPerPartitionLeadMetricsCleanUpWithSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 3.593,
                    "name": "testCommitMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.445,
                    "name": "testHeadersExtendedSerializerDeserializer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.229,
                    "name": "testRoundRobinAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 8.622,
                    "name": "testPatternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 6.439,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextConsumerTest",
                    "duration": 4.542,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 3.955,
                    "name": "testListenerName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 6.782,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.133,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.77,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 4.917,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.961,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.07,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.081,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.1,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 4.939,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 4.917,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 6.08,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextEndToEndAuthorizationTest",
                    "duration": 5.919,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.333,
                    "name": "testSendCompressedMessageWithLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 2.344,
                    "name": "testNonBlockingProducer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 4.202,
                    "name": "testAutoCreateTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 2.362,
                    "name": "testSendRecordBatchWithMaxRequestSizeAndHigher",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 2.364,
                    "name": "testSendWithInvalidCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.333,
                    "name": "testBatchSizeZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 2.343,
                    "name": "testWrongSerializer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 4.316,
                    "name": "testSendNonCompressedMessageWithLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.37,
                    "name": "testSendNonCompressedMessageWithCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.359,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.343,
                    "name": "testFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.341,
                    "name": "testSendToPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 3.325,
                    "name": "testSendOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 4.323,
                    "name": "testSendCompressedMessageWithCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 6.201,
                    "name": "testCloseWithZeroTimeoutFromCallerThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 4.333,
                    "name": "testCloseWithZeroTimeoutFromSenderThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.PlaintextProducerSendTest",
                    "duration": 9.331,
                    "name": "testSendBeforeAndAfterPartitionExpansion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 3.207,
                    "name": "testCannotSendToInternalTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 2.299,
                    "name": "testTooLargeRecordWithAckOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 13.197,
                    "name": "testWrongBrokerList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 2.319,
                    "name": "testNotEnoughReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 2.331,
                    "name": "testResponseTooLargeForReplicationWithAckAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 12.318,
                    "name": "testNonExistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 12.334,
                    "name": "testInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 5.203,
                    "name": "testSendAfterClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 2.311,
                    "name": "testTooLargeRecordWithAckZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 2.298,
                    "name": "testPartitionTooLargeForReplicationWithAckAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.ProducerFailureHandlingTest",
                    "duration": 5.319,
                    "name": "testNotEnoughReplicasAfterBrokerShutdown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.RackAwareAutoTopicCreationTest",
                    "duration": 6.211,
                    "name": "testAutoCreateTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 3.374,
                    "name": "testTransactionalProducerWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 4.388,
                    "name": "testManualAssignmentConsumerWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 4.386,
                    "name": "testConsumerGroupServiceWithAuthenticationSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 4.394,
                    "name": "testProducerWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 3.387,
                    "name": "testConsumerGroupServiceWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 5.395,
                    "name": "testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 3.386,
                    "name": "testKafkaAdminClientWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslClientsWithInvalidCredentialsTest",
                    "duration": 4.389,
                    "name": "testConsumerWithAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 28.464,
                    "name": "testTwoConsumersWithDifferentSaslCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 28.366,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 24.877,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 26.781,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 28.234,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 26.486,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 28.978,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 31.634,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 27.525,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 27.925,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 26.612,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 26.404,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslGssapiSslEndToEndAuthorizationTest",
                    "duration": 28.871,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslMultiMechanismConsumerTest",
                    "duration": 27.963,
                    "name": "testMultipleBrokerMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslMultiMechanismConsumerTest",
                    "duration": 29.792,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslMultiMechanismConsumerTest",
                    "duration": 29.32,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.267,
                    "name": "testTwoConsumersWithDifferentSaslCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 7.189,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.481,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.153,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 5.7,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 7.315,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.054,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.789,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 7.216,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 6.782,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 5.537,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 8.314,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest",
                    "duration": 5.869,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslPlainPlaintextConsumerTest",
                    "duration": 3.362,
                    "name": "testZkAclsDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainPlaintextConsumerTest",
                    "duration": 4.575,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainPlaintextConsumerTest",
                    "duration": 4.479,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 5.997,
                    "name": "testAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 8.109,
                    "name": "testTwoConsumersWithDifferentSaslCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 8.229,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 7.292,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 7.905,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 6.557,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 7.015,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 5.569,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 6.132,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 8.839,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 5.875,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 5.608,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 8.111,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlainSslEndToEndAuthorizationTest",
                    "duration": 6.157,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslPlaintextConsumerTest",
                    "duration": 22.311,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslPlaintextConsumerTest",
                    "duration": 22.642,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 6.237,
                    "name": "testTwoConsumersWithDifferentSaslCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 8.771,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 7.555,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 6.441,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 6.661,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 7.235,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 7.346,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 7.101,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 8.935,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 6.634,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 5.195,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 8.011,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslScramSslEndToEndAuthorizationTest",
                    "duration": 6.394,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 26.478,
                    "name": "testAclDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 23.501,
                    "name": "testLegacyAclOpsNeverAffectOrReturnPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 23.738,
                    "name": "testCreateTopicsResponseMetadataAndConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 23.76,
                    "name": "testAttemptToCreateInvalidAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 26.637,
                    "name": "testAclAuthorizationDenied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 25.365,
                    "name": "testAclOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 22.53,
                    "name": "testAclOperations2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 25.05,
                    "name": "testAclDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 24.564,
                    "name": "testCreateDeleteTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslAdminIntegrationTest",
                    "duration": 28.305,
                    "name": "testAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SaslSslConsumerTest",
                    "duration": 22.688,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SaslSslConsumerTest",
                    "duration": 23.836,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 18.81,
                    "name": "testAsynchronousAuthorizerAclUpdatesDontBlockRequestThreads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 22.945,
                    "name": "testSynchronousAuthorizerAclUpdatesBlockRequestThreads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.129,
                    "name": "testAclUpdatesUsingAsynchronousAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.178,
                    "name": "testAclUpdatesUsingSynchronousAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 8.13,
                    "name": "testAclDescribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 7.121,
                    "name": "testLegacyAclOpsNeverAffectOrReturnPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.829,
                    "name": "testCreateTopicsResponseMetadataAndConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.132,
                    "name": "testAttemptToCreateInvalidAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.608,
                    "name": "testAclAuthorizationDenied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.744,
                    "name": "testAclOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 9.044,
                    "name": "testAclOperations2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 6.396,
                    "name": "testAclDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 7.516,
                    "name": "testCreateDeleteTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslAdminIntegrationTest",
                    "duration": 7.335,
                    "name": "testAuthorizedOperations",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SslConsumerTest",
                    "duration": 7.936,
                    "name": "testCoordinatorFailover",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslConsumerTest",
                    "duration": 7.321,
                    "name": "testSimpleConsumption",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 16.168,
                    "name": "testNoConsumeWithoutDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 8.397,
                    "name": "testProduceConsumeWithPrefixedAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 9.317,
                    "name": "testProduceConsumeViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 8.22,
                    "name": "testNoConsumeWithDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 9.062,
                    "name": "testProduceConsumeTopicAutoCreateTopicCreateAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 8.074,
                    "name": "testProduceConsumeWithWildcardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 7.72,
                    "name": "testNoConsumeWithDescribeAclViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 7.592,
                    "name": "testNoConsumeWithoutDescribeAclViaAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 8.251,
                    "name": "testNoGroupAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 6.439,
                    "name": "testNoProduceWithDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 9.176,
                    "name": "testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslEndToEndAuthorizationTest",
                    "duration": 6.91,
                    "name": "testProduceConsumeViaSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 5.292,
                    "name": "testSendNonCompressedMessageWithCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 5.031,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 4.697,
                    "name": "testFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 3.993,
                    "name": "testSendToPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 4.773,
                    "name": "testSendOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 4.557,
                    "name": "testSendCompressedMessageWithCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 24.233,
                    "name": "testCloseWithZeroTimeoutFromCallerThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 28.254,
                    "name": "testCloseWithZeroTimeoutFromSenderThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.SslProducerSendTest",
                    "duration": 11.448,
                    "name": "testSendBeforeAndAfterPartitionExpansion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.TransactionsBounceTest",
                    "duration": 22.792,
                    "name": "testWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsBounceTest",
                    "duration": 21.294,
                    "name": "testWithGroupId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.TransactionsExpirationTest",
                    "duration": 11.205,
                    "name": "testBumpTransactionalEpochAfterInvalidProducerIdMapping",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 14.396,
                    "name": "testBumpTransactionalEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 9.34,
                    "name": "testSendOffsetsWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 6.19,
                    "name": "testBasicTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 9.452,
                    "name": "testSendOffsetsWithGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 7.204,
                    "name": "testFencingOnSendOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 6.487,
                    "name": "testFencingOnAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 8.199,
                    "name": "testFencingOnTransactionExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 6.488,
                    "name": "testDelayedFetchIncludesAbortedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 5.497,
                    "name": "testOffsetMetadataInSendOffsetsToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 6.198,
                    "name": "testConsecutivelyRunInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 8.198,
                    "name": "testReadCommittedConsumerShouldNotSeeUndecidedData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 5.209,
                    "name": "testFencingOnSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 6.578,
                    "name": "testFencingOnCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 13.352,
                    "name": "testMultipleMarkersOneLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.TransactionsTest",
                    "duration": 9.494,
                    "name": "testCommitTransactionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.UserClientIdQuotaTest",
                    "duration": 9.346,
                    "name": "testProducerConsumerOverrideLowerQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserClientIdQuotaTest",
                    "duration": 9.602,
                    "name": "testProducerConsumerOverrideUnthrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserClientIdQuotaTest",
                    "duration": 19.686,
                    "name": "testThrottledProducerConsumer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserClientIdQuotaTest",
                    "duration": 30.951,
                    "name": "testQuotaOverrideDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserClientIdQuotaTest",
                    "duration": 10.394,
                    "name": "testThrottledRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.UserQuotaTest",
                    "duration": 29.114,
                    "name": "testProducerConsumerOverrideLowerQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserQuotaTest",
                    "duration": 31.719,
                    "name": "testProducerConsumerOverrideUnthrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserQuotaTest",
                    "duration": 42.937,
                    "name": "testThrottledProducerConsumer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserQuotaTest",
                    "duration": 50.231,
                    "name": "testQuotaOverrideDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.UserQuotaTest",
                    "duration": 25.179,
                    "name": "testThrottledRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.api.test.ProducerCompressionTest",
                    "duration": 6.674,
                    "name": "testCompression[0 compressionType = none]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.test.ProducerCompressionTest",
                    "duration": 3.35,
                    "name": "testCompression[1 compressionType = gzip]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.test.ProducerCompressionTest",
                    "duration": 3.358,
                    "name": "testCompression[2 compressionType = snappy]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.test.ProducerCompressionTest",
                    "duration": 3.339,
                    "name": "testCompression[3 compressionType = lz4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.api.test.ProducerCompressionTest",
                    "duration": 3.291,
                    "name": "testCompression[4 compressionType = zstd]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.001,
                    "name": "testFromJsonV4WithNoFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.001,
                    "name": "testEndpointFromUri",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testHashAndEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.001,
                    "name": "testFromJsonV4WithNoRack",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testFromJsonFutureVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testFromJsonV4WithNullRack",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.001,
                    "name": "testBrokerEndpointFromUri",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testFromJsonV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testFromJsonV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.0,
                    "name": "testFromJsonV3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.BrokerEndPointTest",
                    "duration": 0.001,
                    "name": "testFromJsonV5",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.cluster.PartitionLockTest",
                    "duration": 0.214,
                    "name": "testNoLockContentionWithoutIsrUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionLockTest",
                    "duration": 0.462,
                    "name": "testAppendReplicaFetchWithUpdateIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionLockTest",
                    "duration": 0.112,
                    "name": "testAppendReplicaFetchWithSchedulerCheckForShrinkIsr",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.134,
                    "name": "testMakeLeaderDoesNotUpdateEpochCacheForOldFormats",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.286,
                    "name": "testIsrExpansion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.11,
                    "name": "testReadRecordEpochValidationForLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.194,
                    "name": "testIsrNotShrunkIfUpdateFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.093,
                    "name": "testFetchOffsetForTimestampEpochValidationForFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.194,
                    "name": "testIsrNotExpandedIfUpdateFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.111,
                    "name": "testLogConfigDirtyAsBrokerUpdated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.01,
                    "name": "testAddAndRemoveMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.174,
                    "name": "testListOffsetIsolationLevels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.439,
                    "name": "testAppendRecordsAsFollowerBelowLogStartOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.102,
                    "name": "testFetchLatestOffsetIncludesLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.077,
                    "name": "testUnderReplicatedPartitionsCorrectSemantics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.092,
                    "name": "testFetchOffsetSnapshotEpochValidationForFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.286,
                    "name": "testMaybeShrinkIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.094,
                    "name": "testLogConfigNotDirty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.202,
                    "name": "testMonotonicOffsetsAfterLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.006,
                    "name": "testUpdateAssignmentAndIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.086,
                    "name": "testMakeFollowerWithNoLeaderIdChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.006,
                    "name": "testAppendRecordsToFollowerWithNoReplicaThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.171,
                    "name": "testFollowerDoesNotJoinISRUntilCaughtUpToOffsetWithinCurrentLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.211,
                    "name": "testShouldNotShrinkIsrIfFollowerCaughtUpToLogEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.101,
                    "name": "testFetchOffsetSnapshotEpochValidationForLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.109,
                    "name": "testOffsetForLeaderEpochValidationForLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.093,
                    "name": "testAtMinIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.092,
                    "name": "testOffsetForLeaderEpochValidationForFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 1.741,
                    "name": "testDelayedFetchAfterAppendRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.167,
                    "name": "testMakeLeaderUpdatesEpochCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.169,
                    "name": "testUseCheckpointToInitializeHighWatermark",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.244,
                    "name": "testMaybeReplaceCurrentWithFutureReplicaDifferentBaseOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.117,
                    "name": "testFetchOffsetForTimestampEpochValidationForLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.636,
                    "name": "testMakeFollowerWithWithFollowerAppendRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.302,
                    "name": "testShouldNotShrinkIsrIfPreviousFetchIsCaughtUp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.003,
                    "name": "testGetReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.089,
                    "name": "testReadRecordEpochValidationForFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.093,
                    "name": "testLogConfigDirtyAsTopicUpdated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.094,
                    "name": "testMaybeReplaceCurrentWithFutureReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.PartitionTest",
                    "duration": 0.144,
                    "name": "testUpdateFollowerFetchState",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.cluster.ReplicaTest",
                    "duration": 0.696,
                    "name": "testCannotIncrementLogStartOffsetPastHighWatermark",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.ReplicaTest",
                    "duration": 1.2,
                    "name": "testSegmentDeletionWithHighWatermarkInitialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.cluster.ReplicaTest",
                    "duration": 1.92,
                    "name": "testCannotDeleteSegmentsAtOrAboveHighWatermark",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.common.InterBrokerSendThreadTest",
                    "duration": 0.024,
                    "name": "shouldCreateClientRequestAndSendWhenNodeIsReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.common.InterBrokerSendThreadTest",
                    "duration": 0.003,
                    "name": "testFailingExpiredRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.common.InterBrokerSendThreadTest",
                    "duration": 0.002,
                    "name": "shouldCallCompletionHandlerWithDisconnectedResponseWhenNodeNotReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.common.InterBrokerSendThreadTest",
                    "duration": 0.0,
                    "name": "shouldNotSendAnythingWhenNoRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.common.ZkNodeChangeNotificationListenerTest",
                    "duration": 0.46,
                    "name": "testProcessNotification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.common.ZkNodeChangeNotificationListenerTest",
                    "duration": 0.252,
                    "name": "testSwallowsProcessorException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.016,
                    "name": "testStopReplicaRequestWithAlreadyDefinedDeletedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.055,
                    "name": "testUpdateMetadataInterBrokerProtocolVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.004,
                    "name": "testLeaderAndIsrRequestIsNew",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.053,
                    "name": "testStopReplicaRequestsWhileTopicQueuedForDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.003,
                    "name": "testLeaderAndIsrRequestSentToLiveOrShuttingDownBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.039,
                    "name": "testStopReplicaInterBrokerProtocolVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.003,
                    "name": "testStopReplicaSentOnlyToLiveAndShuttingDownBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.004,
                    "name": "testStopReplicaGroupsByBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.003,
                    "name": "testUpdateMetadataDoesNotIncludePartitionsWithoutLeaderAndIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.043,
                    "name": "testMixedDeleteAndNotDeleteStopReplicaRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.039,
                    "name": "testLeaderAndIsrInterBrokerProtocolVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.005,
                    "name": "testUpdateMetadataRequestSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.007,
                    "name": "testUpdateMetadataRequestDuringTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.004,
                    "name": "testUpdateMetadataIncludesLiveOrShuttingDownBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.003,
                    "name": "testStopReplicaRequestSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.042,
                    "name": "testStopReplicaRequestsWhileTopicDeletionStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.009,
                    "name": "testLeaderAndIsrRequestSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerChannelManagerTest",
                    "duration": 0.039,
                    "name": "testStopReplicaRequestWithoutDeletePartitionWhileTopicDeletionStarted",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.ControllerEventManagerTest",
                    "duration": 0.115,
                    "name": "testEventQueueTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerEventManagerTest",
                    "duration": 0.209,
                    "name": "testEventThatThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerEventManagerTest",
                    "duration": 0.102,
                    "name": "testEventWithoutRateMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerEventManagerTest",
                    "duration": 0.206,
                    "name": "testSuccessfulEvent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerEventManagerTest",
                    "duration": 0.007,
                    "name": "testMetricsCleanedOnClose",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.ControllerFailoverTest",
                    "duration": 2.428,
                    "name": "testHandleIllegalStateException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.431,
                    "name": "testControllerDetectsBouncedBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.483,
                    "name": "testControlledShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.198,
                    "name": "testPartitionReassignmentWithOfflineReplicaHaltingProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.202,
                    "name": "testControllerEpochPersistsWhenAllBrokersDown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.201,
                    "name": "testTopicCreationWithOfflineReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.517,
                    "name": "testPartitionReassignmentResumesAfterReplicaComesOnline",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.206,
                    "name": "testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.226,
                    "name": "testTopicPartitionExpansionWithOfflineReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.204,
                    "name": "testPreferredReplicaLeaderElectionWithOfflinePreferredReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.214,
                    "name": "testMetadataPropagationOnControlPlane",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 10.39,
                    "name": "testAutoPreferredReplicaLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.198,
                    "name": "testTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 3.219,
                    "name": "testControllerMoveOnTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 3.374,
                    "name": "testPartitionReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.24,
                    "name": "testTopicPartitionExpansion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.263,
                    "name": "testControllerMoveIncrementsControllerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.204,
                    "name": "testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 5.216,
                    "name": "testControllerMoveOnPartitionReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.227,
                    "name": "testControllerMoveOnTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.378,
                    "name": "testControllerRejectControlledShutdownRequestWithStaleBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 7.218,
                    "name": "testBackToBackPreferredReplicaLeaderElections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.205,
                    "name": "testEmptyCluster",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 2.234,
                    "name": "testControllerMoveOnPreferredReplicaElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 4.422,
                    "name": "testPreferredReplicaLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 5.509,
                    "name": "testMetadataPropagationOnBrokerChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ControllerIntegrationTest",
                    "duration": 8.535,
                    "name": "testMetadataPropagationForOfflineReplicas",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.001,
                    "name": "testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrLive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testControlledShutdownPartitionLeaderElectionLastIsrShuttingDown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.001,
                    "name": "testControlledShutdownPartitionLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testPreferredReplicaPartitionLeaderElectionPreferredReplicaInIsrNotLive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.001,
                    "name": "testReassignPartitionLeaderElectionWithNoLiveIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testReassignPartitionLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testOfflinePartitionLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testPreferredReplicaPartitionLeaderElection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testReassignPartitionLeaderElectionWithEmptyIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testControlledShutdownPartitionLeaderElectionAllIsrSimultaneouslyShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.001,
                    "name": "testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.001,
                    "name": "testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrNotLive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionLeaderElectionAlgorithmsTest",
                    "duration": 0.0,
                    "name": "testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.353,
                    "name": "testNonexistentPartitionToNewPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.008,
                    "name": "testNewPartitionToOnlinePartitionTransitionErrorCodeFromCreateStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.005,
                    "name": "testOfflinePartitionToUncleanOnlinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testOfflinePartitionToNonexistentPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.005,
                    "name": "testOfflinePartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromStateLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testOnlinePartitionToOfflineTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testNewPartitionToOfflinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.01,
                    "name": "testUpdatingOfflinePartitionsCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testInvalidNonexistentPartitionToOnlinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidNonexistentPartitionToOfflinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.006,
                    "name": "testOnlinePartitionToOnlineTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.004,
                    "name": "testInvalidNewPartitionToNonexistentPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testNewPartitionToOnlinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOnlinePartitionToNewPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.042,
                    "name": "testUpdatingOfflinePartitionsCountDuringTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.004,
                    "name": "testOfflinePartitionToOnlinePartitionTransitionErrorCodeFromStateLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testOnlinePartitionToOnlineTransitionForControlledShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testNewPartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromCreateStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.003,
                    "name": "testNoOfflinePartitionsChangeForTopicsBeingDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOnlinePartitionToNonexistentPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOfflinePartitionToNewPartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.PartitionStateMachineTest",
                    "duration": 0.004,
                    "name": "testOfflinePartitionToOnlinePartitionTransition",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.31,
                    "name": "testInvalidOnlineReplicaToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testNonexistentReplicaToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidNonexistentReplicaToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionIneligibleToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.005,
                    "name": "testOnlineReplicaToOfflineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionSuccessfulToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOfflineReplicaToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testOfflineReplicaToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.003,
                    "name": "testInvalidNewReplicaToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionStartedToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOfflineReplicaToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testOfflineReplicaToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidReplicaDeletionStartedToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testOfflineReplicaToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidReplicaDeletionSuccessfulToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.004,
                    "name": "testInvalidReplicaDeletionIneligibleToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.004,
                    "name": "testReplicaDeletionSuccessfulToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidOnlineReplicaToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testNewReplicaToOfflineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionSuccessfulToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidNonexistentReplicaToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidOnlineReplicaToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOfflineReplicaToNonexistentReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidOnlineReplicaToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testStartupOnlinePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionSuccessfulToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testStartupOfflinePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidNewReplicaToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testStartupWithReplicaWithoutLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionIneligibleToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionStartedToOfflineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidNewReplicaToReplicaDeletionStartedTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testOnlineReplicaToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidNewReplicaToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidNonexistentReplicaToOfflineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testReplicaDeletionStartedToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidNonexistentReplicaToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidOnlineReplicaToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testReplicaDeletionStartedToReplicaDeletionIneligibleTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionSuccessfulToOfflineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.001,
                    "name": "testInvalidReplicaDeletionIneligibleToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testReplicaDeletionIneligibleToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidReplicaDeletionStartedToNewReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testInvalidNonexistentReplicaToReplicaDeletionSuccessfulTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.ReplicaStateMachineTest",
                    "duration": 0.002,
                    "name": "testNewReplicaToOnlineReplicaTransition",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.controller.TopicDeletionManagerTest",
                    "duration": 0.845,
                    "name": "testBrokerFailureAfterDeletionStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.TopicDeletionManagerTest",
                    "duration": 0.004,
                    "name": "testInitialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.TopicDeletionManagerTest",
                    "duration": 0.028,
                    "name": "testBasicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.controller.TopicDeletionManagerTest",
                    "duration": 0.006,
                    "name": "testDeletionWithBrokerOffline",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorConcurrencyTest",
                    "duration": 0.667,
                    "name": "testConcurrentGoodPathSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorConcurrencyTest",
                    "duration": 0.343,
                    "name": "testConcurrentTxnGoodPathSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorConcurrencyTest",
                    "duration": 4.599,
                    "name": "testConcurrentRandomSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorConcurrencyTest",
                    "duration": 0.022,
                    "name": "testConcurrentJoinGroupEnforceGroupMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.083,
                    "name": "testHeartbeatWrongCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testJoinGroupWithEmptyProtocolType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.023,
                    "name": "staticMemberFenceDuplicateRejoinedFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testHeartbeatIllegalGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.011,
                    "name": "testTxnCommitOffsetWithIllegalGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDeleteNonEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testDescribeGroupStableForStaticMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.016,
                    "name": "testRebalanceCompletesBeforeMemberJoins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCommitOffsetInCompletingRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testDescribeGroupWrongCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "staticMemberHeartbeatLeaderWithInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testStaticMembersWrongCoordinatorBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testLeaveGroupStaticMemberWithUnknownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCommitOffsetInCompletingRebalanceFromIllegalGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.014,
                    "name": "testFetchPendingTxnOffsetsWithAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDescribeGroupRebalancing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testTxnCommitOffsetWithInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testLeaderFailureInSyncGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCompleteHeartbeatWithGroupDead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "staticMemberRejoinWithKnownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testGenerationIdIncrementsOnRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "staticMemberRejoinWithLeaderIdAndUnknownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testDeleteOffsetOfDeadConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupSecondJoinInconsistentProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testStaticMembersValidBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "testPendingMemberBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupFromIllegalGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberRejoinAsLeaderWithMismatchedMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupWithEmptyGroupProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDeleteOffsetOfConsumerGroupWithUnparsableProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "staticMemberReJoinWithExplicitUnknownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHeartbeatUnknownGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupUnknownConsumerNewDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "testTxnCommitOffsetWithFencedInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.014,
                    "name": "testDynamicMembersJoinGroupWithMaxSizeAndRequiredKnownMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDescribeGroupStableForDynamicMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOffsetsRetentionMsIntegerOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testListGroupsIncludesStableGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHeartbeatDuringRebalanceCausesRebalanceInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSingleLeaveDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testFetchPendingTxnOffsetsWithCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "staticMemberRejoinWithLeaderIdAndKnownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSyncDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testFetchTxnOffsetsMultipleProducersOneGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testSecondMemberPartiallyJoinAndTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testNewMemberTimeoutCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testSessionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupInconsistentGroupProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.012,
                    "name": "testDynamicMembersJoinGroupWithMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testDeleteGroupWithInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberCommitOffsetWithInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupSessionTimeoutTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupSessionTimeoutTooSmall",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupEmptyAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testDeleteOffsetOfNonEmptyNonConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupShouldReceiveErrorIfGroupOverMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetWithDefaultGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHeartbeatMaintainsSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testFetchAllOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testNewMemberFailureAfterSyncGroupCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testDeleteGroupWithWrongCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupFromUnchangedLeaderShouldRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "staticMemberReJoinWithIllegalArgumentAsMissingOldMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupCompletionWhenPendingMemberTimesOut",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHeartbeatRebalanceInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testLeaveGroupUnknownGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testListGroupsIncludesRebalancingGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testSyncGroupFollowerAfterLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.045,
                    "name": "testDeleteEmptyGroupWithStoredOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCommitOffsetsAfterGroupIsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupWrongCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testFetchOffsetForUnknownPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitAndFetchOffsetsWithEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupUnknownConsumerExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupFromUnknownGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testStaticMembersUnknownInstanceBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberRejoinAsFollowerWithUnknownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupInconsistentProtocolType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testFetchTxnOffsetsOneProducerMultipleGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testStaticMembersUnknownGroupBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testNewMemberFailureAfterJoinGroupCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testJoinGroupCompletionWhenPendingMemberJoins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.012,
                    "name": "testStaticMembersJoinGroupWithMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberRejoinAsFollowerWithMismatchedMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "staticMemberReJoinWithIllegalStateAsUnknownMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "shouldGetDifferentStaticMemberIdAfterEachRejoin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetFromUnknownGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testLeaveGroupWithFencedInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testDeleteOffsetOfStableConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupProtocolTypeIsNotProvidedWhenAnErrorOccurs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDeleteEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "staticMemberJoinAsFirstMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testLeaveGroupWrongCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.008,
                    "name": "testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCommitMaintainsSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testFetchOffsetNotCoordinatorForGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOffsetCommitDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSyncGroupReturnsAnErrorWhenProtocolTypeIsInconsistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testheartbeatDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDeleteOffsetOfEmptyNonConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "staticMemberJoinWithIllegalStateAsPendingMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberLeaveWithIllegalStateAsPendingMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.01,
                    "name": "testDynamicMembersCanReJoinGroupWithMaxSizeWhileRebalancing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testLeaveGroupUnknownConsumerExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupUnknownConsumerNewGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testDeleteOffsetOfEmptyConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberJoinWithUnknownInstanceIdAndKnownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberSyncAsLeaderWithInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testBatchLeaveDeadGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupFromUnchangedFollowerDoesNotRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testValidJoinGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCompleteHeartbeatWithMemberAlreadyRemoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "shouldDelayRebalanceUptoRebalanceTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.002,
                    "name": "testheartbeatEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testDeleteOffsetOfNonExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testFetchOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSessionTimeoutDuringRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "staticMemberRejoinWithFollowerIdAndChangeOfProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testNewMemberJoinExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testListGroupsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testFetchTxnOffsetsWithAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testTxnCommitOffsetWithLegalGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testSyncGroupLeaderAfterFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSyncGroupFromUnknownMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupReturnsTheProtocolType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testValidLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetInCompletingRebalanceFromUnknownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupSucceedWhenProtocolTypeAndNameAreNotProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testDescribeGroupInactiveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testFetchTxnOffsetsIgnoreSpuriousCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "testPendingMembersLeavesGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testTxnCommitOffsetWithKnownMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testSyncGroupNotCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testSyncGroupReturnsAnErrorWhenProtocolNameIsInconsistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testBasicFetchTxnOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.006,
                    "name": "shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.003,
                    "name": "testHeartbeatUnknownConsumerExistingGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.005,
                    "name": "testStaticMembersFencedInstanceBatchLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testValidHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSyncGroupSucceedWhenProtocolTypeAndNameAreConsistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.009,
                    "name": "testRequestHandlingWhileLoadingInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupCoordinatorTest",
                    "duration": 0.007,
                    "name": "testLastJoiningMembersAreKickedOutWhenReJoiningGroupWithMaxSize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.072,
                    "name": "testLoadOffsetsWithEmptyControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testLoadConsumerGroupWithFaultyConsumerProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testStoreNonEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.027,
                    "name": "testLoadOffsetsWithTombstones",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.026,
                    "name": "testLoadWithCommittedAndAbortedTransactionalOffsetCommits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testTransactionalCommitOffsetCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testLoadConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.009,
                    "name": "testLoadOffsetsWithoutGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testGroupMetadataTombstoneParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testGroupNotExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.015,
                    "name": "testLoadEmptyGroupWithOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testSerdeOffsetCommitValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.013,
                    "name": "testLoadTransactionalOffsetCommitsFromMultipleProducers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testStoreEmptySimpleGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.012,
                    "name": "testLoadOffsetWithExplicitRetention",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.01,
                    "name": "testGroupMetadataParsingWithNullUserData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.009,
                    "name": "testLoadOffsetFromOldCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.001,
                    "name": "testAddGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.007,
                    "name": "testPartitionLoadMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testLoadEmptyConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.035,
                    "name": "testLoadGroupWithLargeGroupMetadataRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testLogInfoFromCleanupGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.007,
                    "name": "testGroupMetadataRemovalWithLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.007,
                    "name": "testGroupLoadWithConsumerAndTransactionalOffsetCommitsTransactionWins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.006,
                    "name": "testOffsetWriteAfterGroupRemoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.006,
                    "name": "testLoadTransactionalOffsetsWithoutGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetWhenCoordinatorHasMoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testCommittedOffsetTombstoneParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testStoreNonEmptyGroupWhenCoordinatorHasMoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.006,
                    "name": "testGroupLoadWithConsumerAndTransactionalOffsetCommitsConsumerWins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testloadGroupWithStaticMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testCommitOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testTransactionalCommitOffsetAborted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testSerdeOffsetCommitValueWithNoneExpireTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testReadFromOldGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testTransactionalCommitOffsetAppendFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testCommittedOffsetParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testOffsetExpirationOfSimpleConsumer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.002,
                    "name": "testGroupMetadataRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testLoadGroupWithTombstone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.006,
                    "name": "testOffsetExpirationOfActiveGroupSemantics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.009,
                    "name": "testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testSerdeOffsetCommitValueWithExpireTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testLoadOffsetsAndGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testLoadGroupAndOffsetsWithCorruptedLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testGroupLoadedWithPendingCommits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.01,
                    "name": "testStoreGroupErrorMapping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.008,
                    "name": "testLoadGroupAndOffsetsFromDifferentSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.008,
                    "name": "testOffsetExpirationSemantics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.004,
                    "name": "testExpireOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testExpireGroupWithOffsetsOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.005,
                    "name": "testDoNotLoadAbortedTransactionalOffsetCommits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataManagerTest",
                    "duration": 0.003,
                    "name": "testStoreEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testTransactionBeatsConsumerOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testOffsetCommitFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testPreparingRebalanceToStableIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testReplaceGroupInstanceWithNonExistingMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testHasPendingNonTxnOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testConsumerBeatsTransactionalOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testAwaitingRebalanceToAwaitingRebalanceIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testStableToDeadTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testInitNextGenerationEmptyGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testCannotRebalanceWhenDead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testInitNextGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testPreparingRebalanceToEmptyTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testSelectProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testCannotRebalanceWhenPreparingRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testEmptyToAwaitingRebalanceIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testDeadToPreparingRebalanceIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testFailedTxnOffsetCommitLeavesNoPendingState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testNotInvokeJoinCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testCanRebalanceWhenCompletingRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testDeadToAwaitingRebalanceIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testInvokeJoinCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testEmptyToDeadTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testSelectProtocolRaisesIfNoMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testStableToPreparingRebalanceTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testSubscribedTopicsNonConsumerGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.002,
                    "name": "testReplaceGroupInstance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testTransactionalCommitIsAbortedAndConsumerCommitWins",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testAwaitingRebalanceToPreparingRebalanceTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testPreparingRebalanceToDeadTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testStableToStableIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testOffsetCommitFailureWithAnotherPending",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testDeadToStableIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testAwaitingRebalanceToStableTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testSupportsProtocols",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testEmptyToStableIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testCanRebalanceWhenStable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testNotInvokeSyncCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testHasPendingTxnOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testOffsetCommitWithAnotherPending",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testReplaceGroupInstanceWithEmptyGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testPreparingRebalanceToPreparingRebalanceIllegalTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.001,
                    "name": "testInvokeSyncCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.GroupMetadataTest",
                    "duration": 0.0,
                    "name": "testSelectProtocolChoosesCompatibleProtocol",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.001,
                    "name": "testMatchesSupportedProtocols",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.001,
                    "name": "testHasValidGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.0,
                    "name": "testMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.0,
                    "name": "testMetadataRaisesOnUnsupportedProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.0,
                    "name": "testVoteForPreferredProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.group.MemberMetadataTest",
                    "duration": 0.0,
                    "name": "testVoteRaisesOnNoSupportedProtocols",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.ProducerIdManagerTest",
                    "duration": 0.005,
                    "name": "testExceedProducerIdLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.ProducerIdManagerTest",
                    "duration": 0.051,
                    "name": "testGetProducerId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 1.655,
                    "name": "testConcurrentNewInitProducerIdRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.052,
                    "name": "testConcurrentGoodPathSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.484,
                    "name": "testConcurrentTransactionExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.323,
                    "name": "testConcurrentRandomSequences",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.354,
                    "name": "testConcurrentInitProducerIdRequestsWithRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.149,
                    "name": "testConcurrentInitProducerRequestsAtPidBoundary",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.253,
                    "name": "testConcurrentInitProducerIdRequestsOneNewOneContinuing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.048,
                    "name": "testConcurrentGoodPathWithConcurrentPartitionLoading",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.377,
                    "name": "testConcurrentLoadUnloadPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 0.22,
                    "name": "testConcurrentInitProducerRequestsWithRetryAtPidBoundary",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest",
                    "duration": 1.265,
                    "name": "testConcurrentContinuingInitProducerIdRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.057,
                    "name": "shouldNotAbortExpiredTransactionsThatHaveAPendingStateTransition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldRespondWithCoordinatorLoadInProgressOnInitPidWhenCoordintorLoading",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReplyWithInvalidPidMappingOnEndTxnWhenPidDosentMatchMapped",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnConcurrentTxnRequestOnEndTxnRequestWhenStatusIsPrepareCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithNotCoordinatorOnEndTxnWhenIsNotCoordinatorForId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.0,
                    "name": "shouldRespondWithInvalidTnxProduceEpochOnAddPartitionsWhenEpochsAreDifferent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldReturnInvalidRequestWhenTransactionalIdIsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldNotBumpEpochWithPendingTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithInvalidPidMappingOnAddPartitionsToTransactionWhenTransactionalIdNotPresent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "testInitProducerIdWithCurrentEpochProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReplyWithInvalidPidMappingOnEndTxnWhenTxnIdDoesntExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.004,
                    "name": "shouldUseLastEpochToFenceWhenEpochsAreExhausted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReplyWithProducerFencedOnEndTxnWhenEpochIsNotSameAsTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "testInitProducerIdWithNoLastProducerData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.004,
                    "name": "shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsPrepareAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteCommitTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.003,
                    "name": "testInitProducerIdWithInvalidEpochAfterProducerIdRotation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldAbortTransactionOnHandleInitPidWhenExistingTransactionInOngoingState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithNotCoordinatorOnAddPartitionsWhenNotCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithCoordinatorLoadInProgressOnAddPartitionsWhenCoordintorLoading",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldGenerateNewProducerIdIfNoStateAndProducerIdAndEpochProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteAbortAndResultIsNotAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithSuccessOnAddPartitionsWhenStateIsOngoing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.0,
                    "name": "shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnOkOnEndTxnWhenStatusIsCompleteAbortAndResultIsAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldAppendPrepareCommitToLogOnEndTxnWhenStatusIsOngoingAndResultIsCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldAppendNewMetadataToLogOnAddPartitionsWhenPartitionsAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "testFenceProducerWhenMappingExistsWithDifferentProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithCoordinatorLoadInProgressOnEndTxnWhenCoordinatorIsLoading",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareAbortState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithErrorsNoneOnAddPartitionWhenNoErrorsAndPartitionsTheSame",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.003,
                    "name": "shouldNotAcceptSmallerEpochDuringTransactionExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldAppendPrepareAbortToLogOnEndTxnWhenStatusIsOngoingAndResultIsAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "shouldAcceptInitPidAndReturnNextPidWhenTransactionalIdIsNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.0,
                    "name": "shouldRemoveTransactionsForPartitionOnEmigration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareCommitState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnInvalidEpochOnEndTxnWhenEpochIsSmaller",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.003,
                    "name": "shouldAbortExpiredTransactionsInOngoingStateAndBumpEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteCommitAndResultIsNotCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnOkOnEndTxnWhenStatusIsCompleteCommitAndResultIsCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithConcurrentTransactionsOnAddPartitionsWhenStateIsPrepareCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldGenerateNewProducerIdIfEpochsExhausted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldRespondWithNotCoordinatorOnInitPidWhenNotCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRetryInitProducerIdAfterProducerIdRotation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldFailToAbortTransactionOnHandleInitPidWhenProducerEpochIsSmaller",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldReturnInvalidEpochOnEndTxnWhenEpochIsLarger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.0,
                    "name": "shouldRespondWithConcurrentTransactionOnAddPartitionsWhenStateIsPrepareAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.002,
                    "name": "testInitProducerIdStaleCurrentEpochProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldInitPidWithEpochZeroForNewTransactionalId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionLogTest",
                    "duration": 0.003,
                    "name": "shouldReadWriteMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionLogTest",
                    "duration": 0.001,
                    "name": "testTransactionMetadataParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionLogTest",
                    "duration": 0.0,
                    "name": "testTransactionMetadataTombstoneParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionLogTest",
                    "duration": 0.001,
                    "name": "shouldThrowExceptionWriteInvalidTxn",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.183,
                    "name": "shouldOnlyWriteTxnCompletionOnce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.007,
                    "name": "shouldSaveForLaterWhenLeaderUnknownButNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.001,
                    "name": "shouldGenerateEmptyMapWhenNoRequestsOutstanding",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.007,
                    "name": "shouldCreateMetricsOnStarting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.005,
                    "name": "shouldAbortAppendToLogOnEndTxnWhenNotCoordinatorError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.005,
                    "name": "shouldRetryAppendToLogOnEndTxnWhenCoordinatorNotAvailableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.004,
                    "name": "shouldCompleteAppendToLogOnEndTxnWhenSendMarkersSucceed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.004,
                    "name": "shouldGenerateRequestPerPartitionPerBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.002,
                    "name": "shouldRemoveMarkersForTxnPartitionWhenPartitionEmigrated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerChannelManagerTest",
                    "duration": 0.004,
                    "name": "shouldSkipSendMarkersWhenLeaderNotFound",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.029,
                    "name": "shouldRetryPartitionWhenNotLeaderForPartitionError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.003,
                    "name": "shouldRemoveTopicPartitionFromWaitingSetOnUnsupportedForMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionWhenRecordListTooLargeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldCompleteDelayedOperationWhenInvalidProducerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionWhenInvalidRequiredAcksError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.002,
                    "name": "shouldReEnqueuePartitionsWhenBrokerDisconnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldRetryPartitionWhenNotEnoughReplicasError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldCompleteDelayedOperationWhenNoErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionWhenCorruptMessageError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldCompleteDelayedOperationWhenCoordinatorLoading",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldCompleteDelayedOperationWheCoordinatorEpochFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionWhenUnknownError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldCompleteDelayedOperationWhenNotCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldCompleteDelayedOperationWhenCoordinatorEpochChanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldRetryPartitionWhenUnknownTopicOrPartitionError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.002,
                    "name": "shouldRetryPartitionWhenNotEnoughReplicasAfterAppendError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionWhenMessageTooLargeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionIfErrorCodeNotAvailableForPid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest",
                    "duration": 0.001,
                    "name": "shouldRetryPartitionWhenKafkaStorageError",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateUpdateTimeResetDuringProducerIdRotation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testFenceProducerAfterEpochsExhausted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.001,
                    "name": "testTolerateTimeShiftDuringCompleteCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateTimeShiftDuringAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateUpdateTimeShiftDuringEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateTimeShiftDuringCompleteAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.001,
                    "name": "testAttemptedEpochBumpWithFencedEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testInitializeEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateTimeShiftDuringPrepareAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testTolerateTimeShiftDuringPrepareCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testRotateProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testBumpEpochNotAllowedIfEpochsExhausted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.001,
                    "name": "testEpochBumpWithCurrentEpochProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testRotateProducerIdInOngoingState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testAttemptedEpochBumpWithNewlyCreatedMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.001,
                    "name": "testAttemptedEpochBumpWithLastEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testRotateProducerIdInPrepareCommitState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testFenceProducerNotAllowedIfItWouldOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testRotateProducerIdInPrepareAbortState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionMetadataTest",
                    "duration": 0.0,
                    "name": "testNormalEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.003,
                    "name": "testAppendTransactionToLogWhileProducerFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "testCompleteTransitionWhenAppendSucceeded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.008,
                    "name": "testAppendFailToCoordinatorNotAvailableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.003,
                    "name": "testLoadTransactionMetadataWithCorruptedLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "testAppendFailToUnknownError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldReturnNotCooridnatorErrorIfTransactionIdPartitionNotOwned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.0,
                    "name": "testValidateTransactionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.006,
                    "name": "shouldWriteTxnMarkersForTransactionInPreparedCommitState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "testDeletePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "shouldOnlyConsiderTransactionsInTheOngoingStateToAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.008,
                    "name": "shouldRemoveCompleteAbortExpiredTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.003,
                    "name": "testPartitionLoadMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.007,
                    "name": "testAppendTransactionToLogWhilePendingStateChanged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.009,
                    "name": "testLoadAndRemoveTransactionsForPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.005,
                    "name": "testAppendFailToNotCoordinatorError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "shouldNotRemovePrepareCommitTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.002,
                    "name": "testAppendFailToCoordinatorLoadingError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotRemoveOngoingTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.0,
                    "name": "testAddGetPids",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.031,
                    "name": "shouldWriteTxnMarkersForTransactionInPreparedAbortState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldRemoveEmptyExpiredTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.003,
                    "name": "testPendingStateNotResetOnRetryAppend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.013,
                    "name": "testDeleteLoadingPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotRemoveExpiredTransactionalIdsIfLogAppendFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotRemovePrepareAbortTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.001,
                    "name": "shouldRemoveCompleteCommmitExpiredTransactionalIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.coordinator.transaction.TransactionStateManagerTest",
                    "duration": 0.006,
                    "name": "testSuccessfulReimmigration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.integration.MetricsDuringTopicCreationDeletionTest",
                    "duration": 10.312,
                    "name": "testMetricsDuringTopicCreateDelete",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.integration.MinIsrConfigTest",
                    "duration": 2.204,
                    "name": "testDefaultKafkaConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 10.262,
                    "name": "testTopicUncleanLeaderElectionEnable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 10.262,
                    "name": "testUncleanLeaderElectionEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 20.28,
                    "name": "testUncleanLeaderElectionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 2.207,
                    "name": "testUncleanLeaderElectionInvalidTopicOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 9.278,
                    "name": "testUncleanLeaderElectionEnabledByTopicOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.integration.UncleanLeaderElectionTest",
                    "duration": 20.282,
                    "name": "testUncleanLeaderElectionDisabledByTopicOverride",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.073,
                    "name": "testBrokerSideCompression[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.045,
                    "name": "testBrokerSideCompression[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.027,
                    "name": "testBrokerSideCompression[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.035,
                    "name": "testBrokerSideCompression[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.045,
                    "name": "testBrokerSideCompression[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.044,
                    "name": "testBrokerSideCompression[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.044,
                    "name": "testBrokerSideCompression[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.036,
                    "name": "testBrokerSideCompression[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.044,
                    "name": "testBrokerSideCompression[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.027,
                    "name": "testBrokerSideCompression[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.052,
                    "name": "testBrokerSideCompression[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.037,
                    "name": "testBrokerSideCompression[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.027,
                    "name": "testBrokerSideCompression[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.036,
                    "name": "testBrokerSideCompression[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.07,
                    "name": "testBrokerSideCompression[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.046,
                    "name": "testBrokerSideCompression[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.041,
                    "name": "testBrokerSideCompression[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.042,
                    "name": "testBrokerSideCompression[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.034,
                    "name": "testBrokerSideCompression[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.042,
                    "name": "testBrokerSideCompression[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.042,
                    "name": "testBrokerSideCompression[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.035,
                    "name": "testBrokerSideCompression[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.035,
                    "name": "testBrokerSideCompression[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.034,
                    "name": "testBrokerSideCompression[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.033,
                    "name": "testBrokerSideCompression[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.034,
                    "name": "testBrokerSideCompression[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.033,
                    "name": "testBrokerSideCompression[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.033,
                    "name": "testBrokerSideCompression[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.034,
                    "name": "testBrokerSideCompression[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.BrokerCompressionTest",
                    "duration": 0.034,
                    "name": "testBrokerSideCompression[29]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogCleanerIntegrationTest",
                    "duration": 1.504,
                    "name": "testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerIntegrationTest",
                    "duration": 0.125,
                    "name": "testIsThreadFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerIntegrationTest",
                    "duration": 14.209,
                    "name": "testMaxLogCompactionLag",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogCleanerLagIntegrationTest",
                    "duration": 12.847,
                    "name": "cleanerTest[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerLagIntegrationTest",
                    "duration": 11.671,
                    "name": "cleanerTest[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerLagIntegrationTest",
                    "duration": 11.966,
                    "name": "cleanerTest[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerLagIntegrationTest",
                    "duration": 10.85,
                    "name": "cleanerTest[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerLagIntegrationTest",
                    "duration": 10.334,
                    "name": "cleanerTest[4]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.156,
                    "name": "testUndecidedTransactionalDataNotCleanable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.071,
                    "name": "testLogsUnderCleanupIneligibleForCompaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 1.623,
                    "name": "testGrabFilthiestCompactedLogIgnoresInProgressPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.03,
                    "name": "testDirtyOffsetLargerThanActiveSegmentBaseOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.503,
                    "name": "testCleanableOffsetsForNone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.511,
                    "name": "testCleanableOffsetsForTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 1.261,
                    "name": "testGrabFilthiestCompactedLogIgnoresUncleanablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.769,
                    "name": "testCheckpointUpdatedForInvalidOffsetNotSelected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.002,
                    "name": "testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.002,
                    "name": "testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactDeleteLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.003,
                    "name": "testConcurrentLogCleanupAndLogTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.243,
                    "name": "testGrabFilthiestCompactedLogThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.003,
                    "name": "testLogsWithSegmentsToDeleteShouldNotConsiderUncleanablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.072,
                    "name": "testLogStartOffsetLargerThanActiveSegmentBaseOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.403,
                    "name": "testDirtyOffsetResetIfSmallerThanStartOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.004,
                    "name": "testLogsWithSegmentsToDeleteShouldNotConsiderCleanupPolicyDeleteLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.003,
                    "name": "testConcurrentLogCleanupAndTopicDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.48,
                    "name": "testCleanableOffsetsForShortTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.486,
                    "name": "testCleanableOffsetsNeedsCheckpointReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 1.286,
                    "name": "testGrabFilthiestCompactedLogReturnsLogWithDirtiestRatio",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.417,
                    "name": "testCheckpointUpdatedForInvalidOffsetNoCleaning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.369,
                    "name": "testDirtyOffsetResetIfLargerThanEndOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 1.429,
                    "name": "testGrabFilthiestCompactedLogIgnoresBothInProgressPartitionsAndUncleanablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 1.222,
                    "name": "testDoneCleaning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerManagerTest",
                    "duration": 0.003,
                    "name": "testDoneDeleting",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.604,
                    "name": "cleanerConfigUpdateTest[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 2.018,
                    "name": "testCleansCombinedCompactAndDeleteTopic[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.42,
                    "name": "testCleaningNestedMessagesWithMultipleVersions[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.284,
                    "name": "cleanerTest[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 15.624,
                    "name": "testCleanerWithMessageFormatV0[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.305,
                    "name": "cleanerConfigUpdateTest[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.79,
                    "name": "testCleansCombinedCompactAndDeleteTopic[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.278,
                    "name": "testCleaningNestedMessagesWithMultipleVersions[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 17.018,
                    "name": "cleanerTest[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.209,
                    "name": "testCleanerWithMessageFormatV0[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.159,
                    "name": "cleanerConfigUpdateTest[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.84,
                    "name": "testCleansCombinedCompactAndDeleteTopic[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.397,
                    "name": "testCleaningNestedMessagesWithMultipleVersions[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.503,
                    "name": "cleanerTest[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.232,
                    "name": "testCleanerWithMessageFormatV0[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.813,
                    "name": "cleanerConfigUpdateTest[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.413,
                    "name": "testCleansCombinedCompactAndDeleteTopic[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.404,
                    "name": "testCleaningNestedMessagesWithMultipleVersions[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.711,
                    "name": "cleanerTest[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.23,
                    "name": "testCleanerWithMessageFormatV0[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.411,
                    "name": "cleanerConfigUpdateTest[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 1.348,
                    "name": "testCleansCombinedCompactAndDeleteTopic[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.001,
                    "name": "testCleaningNestedMessagesWithMultipleVersions[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 16.598,
                    "name": "cleanerTest[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerParameterizedIntegrationTest",
                    "duration": 0.001,
                    "name": "testCleanerWithMessageFormatV0[4]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.128,
                    "name": "testCleanCorruptMessageSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.608,
                    "name": "testAbortedTransactionSpanningSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.404,
                    "name": "testLogCleanerRetainsLastSequenceEvenIfTransactionAborted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 1.359,
                    "name": "testBuildOffsetMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.438,
                    "name": "testAbortMarkerRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.076,
                    "name": "testBuildOffsetMapFakeLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.746,
                    "name": "testSegmentGrouping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 3.912,
                    "name": "testCorruptMessageSizeLargerThanBytesAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.103,
                    "name": "testSizeTrimmedForPreallocatedAndCompactedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 1.083,
                    "name": "testCommitMarkerRetentionWithEmptyBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.076,
                    "name": "testLogCleanerRetainsProducerLastSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.14,
                    "name": "testCleanSegmentsWithAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.306,
                    "name": "testDeletedBatchesWithNoMessagesRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.236,
                    "name": "testSegmentGroupingWithSparseOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 4.073,
                    "name": "testLargeMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.007,
                    "name": "testMaxCleanTimeSecs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.373,
                    "name": "testCleanEmptyControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 2.689,
                    "name": "testRecoveryAfterCrash",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.403,
                    "name": "testCleanTombstone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.487,
                    "name": "testDuplicateCheckAfterCleaning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.512,
                    "name": "testAbortMarkerRetentionWithEmptyBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.263,
                    "name": "testCleaningWithUncleanableSection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.267,
                    "name": "testLogToClean",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.424,
                    "name": "testCleaningWithDeletes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.003,
                    "name": "testClientHandlingOfCorruptMessageSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.499,
                    "name": "testCleanWithTransactionsSpanningSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.202,
                    "name": "testEmptyBatchRemovalWithSequenceReuse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.293,
                    "name": "testCommittedTransactionSpanningSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 3.92,
                    "name": "testMessageLargerThanMaxMessageSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 3.719,
                    "name": "testMessageLargerThanMaxMessageSizeWithCorruptHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.227,
                    "name": "testCleaningBeyondMissingOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.196,
                    "name": "testCleanSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.242,
                    "name": "testBasicTransactionAwareCleaning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.068,
                    "name": "testSegmentGroupingFollowingLoadOfZeroIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.185,
                    "name": "testLogToCleanWithUncleanableSection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.076,
                    "name": "testBuildPartialOffsetMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.169,
                    "name": "testCleaningWithUnkeyedMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.363,
                    "name": "testSegmentWithOffsetOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.142,
                    "name": "testPartialSegmentClean",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.898,
                    "name": "testCommitMarkerRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogCleanerTest",
                    "duration": 0.274,
                    "name": "testCleanSegmentsWithConcurrentSegmentDeletion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogConcurrencyTest",
                    "duration": 66.588,
                    "name": "testUncommittedDataNotConsumedFrequentSegmentRolls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConcurrencyTest",
                    "duration": 45.394,
                    "name": "testUncommittedDataNotConsumed",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.001,
                    "name": "testGetConfigValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.004,
                    "name": "testToRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.001,
                    "name": "ensureNoStaticInitializationOrderDependency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.001,
                    "name": "testToEnrichedRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.003,
                    "name": "shouldValidateThrottledReplicasConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.001,
                    "name": "testFromPropsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.001,
                    "name": "testInvalidCompactionLagConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.002,
                    "name": "testKafkaConfigToProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.01,
                    "name": "testFromPropsInvalid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.0,
                    "name": "testToHtmlTable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogConfigTest",
                    "duration": 0.002,
                    "name": "testToHtml",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.01,
                    "name": "testFileReferencesAfterAsyncDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.496,
                    "name": "testCreateLogWithLogDirFallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 2.4,
                    "name": "testCleanupSegmentsToMaintainSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.388,
                    "name": "testRecoveryDirectoryMappingWithRelativeDirectory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.168,
                    "name": "testCreateLogWithInvalidLogDir",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.004,
                    "name": "testTopicConfigChangeUpdatesLogConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.002,
                    "name": "testGetNonExistentLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.002,
                    "name": "testConfigChangeGetsCleanedUp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.003,
                    "name": "testTwoLogManagersUsingSameDirFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.311,
                    "name": "testLeastLoadedAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 5.938,
                    "name": "testCleanupExpiredSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.387,
                    "name": "testCheckpointRecoveryPoints",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.003,
                    "name": "testBrokerConfigChangeDeliveredToAllLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 1.245,
                    "name": "testCheckpointForOnlyAffectedLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.864,
                    "name": "testTimeBasedFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.142,
                    "name": "testCreateLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 4.774,
                    "name": "testDoesntCleanLogsWithCompactPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.276,
                    "name": "testRecoveryDirectoryMappingWithTrailingSlash",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.007,
                    "name": "testCreateAndDeleteOverlyLongTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 5.103,
                    "name": "testDoesntCleanLogsWithCompactDeletePolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogManagerTest",
                    "duration": 0.002,
                    "name": "testConfigChangesWithNoLogGettingInitialized",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.065,
                    "name": "testRecoveryWithCorruptMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.093,
                    "name": "testRecoveryFixesCorruptIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.083,
                    "name": "testReadFromGap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.07,
                    "name": "testReloadLargestTimestampAndNextOffsetAfterTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.043,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.034,
                    "name": "testRecoverTransactionIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.051,
                    "name": "testReadBeforeFirstOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.042,
                    "name": "testCreateWithInitFileSizeAppendMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.034,
                    "name": "testChangeFileSuffixes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.021,
                    "name": "testTruncateEmptySegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.047,
                    "name": "testRecoveryFixesCorruptTimeIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.033,
                    "name": "shouldTruncateEvenIfOffsetPointsToAGapInTheLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.034,
                    "name": "testNextOffsetCalculation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.034,
                    "name": "testFindOffsetByTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.017,
                    "name": "testReadOnEmptySegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.026,
                    "name": "testReadAfterLast",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.067,
                    "name": "testCreateWithInitFileSizeClearShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.085,
                    "name": "testAppendFromFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogSegmentTest",
                    "duration": 0.033,
                    "name": "testTruncateFull",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogTest",
                    "duration": 7.426,
                    "name": "testLogDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.108,
                    "name": "testAbortedTransactionSpanningMultipleSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.022,
                    "name": "testSkipTruncateAndReloadIfOldMessageFormatAndCleanShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.105,
                    "name": "testProducerIdMapTruncateFullyAndStartAt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.059,
                    "name": "testAppendBelowExpectedOffsetThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testParseTopicPartitionNameForMissingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.185,
                    "name": "shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.095,
                    "name": "testMultipleProducerIdsPerMemoryRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.222,
                    "name": "testSplitOnOffsetOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.046,
                    "name": "testAppendWithNoTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.104,
                    "name": "testFetchUpToHighWatermark",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.05,
                    "name": "testLastStableOffsetWithMixedProducerData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 3.076,
                    "name": "testReadWithMinMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 12.82,
                    "name": "testIndexRebuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.047,
                    "name": "testZombieCoordinatorFencedEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 7.876,
                    "name": "testLogRolls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.042,
                    "name": "testMessageSizeCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 1.693,
                    "name": "testAsyncDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.006,
                    "name": "testLogRollAfterLogHandlerClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.288,
                    "name": "shouldTruncateLeaderEpochsWhenDeletingSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.107,
                    "name": "testFirstUnstableOffsetWithTransactionalData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.188,
                    "name": "shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.151,
                    "name": "testLastStableOffsetDoesNotExceedLogStartOffsetAfterSegmentDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.109,
                    "name": "testAppendToTransactionIndexFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.002,
                    "name": "testParseTopicPartitionNameForInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.04,
                    "name": "testUpdateProducerIdMapWithCompactedData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.025,
                    "name": "testPeriodicProducerIdExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.145,
                    "name": "testLogSegmentsCallCorrect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.041,
                    "name": "testReadOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.005,
                    "name": "testAppendWithOutOfOrderOffsetsThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.532,
                    "name": "testHighWatermarkMetadataUpdatedAfterSegmentRoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.294,
                    "name": "testProducerIdExpirationOnSegmentDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.49,
                    "name": "shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.091,
                    "name": "testHighWatermarkMaintenance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.093,
                    "name": "testFetchOffsetByTimestampIncludesLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.004,
                    "name": "testLogReinitializeAfterManualDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.031,
                    "name": "testFirstUnstableOffsetNoTransactionalData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.068,
                    "name": "testReadAtLogGap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.026,
                    "name": "testSizeForLargeLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.302,
                    "name": "testTimeBasedLogRoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.05,
                    "name": "testProducerIdMapOffsetUpdatedForNonIdempotentData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.034,
                    "name": "testMultipleProducersWithDuplicatesInSingleAppend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.36,
                    "name": "testNonActiveSegmentsFrom",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.042,
                    "name": "testLeaderEpochCacheClearedAfterDynamicMessageFormatDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.039,
                    "name": "testNonSequentialAppend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.051,
                    "name": "testLoadEmptyLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.034,
                    "name": "testMessageSetSizeCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.06,
                    "name": "testLeaderEpochCacheClearedAfterDowngradeInAppendedMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.542,
                    "name": "testInconsistentLogSegmentRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.328,
                    "name": "testRecoverOnlyLastSegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.056,
                    "name": "testReadCommittedWithConcurrentHighWatermarkUpdates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.204,
                    "name": "testIndexResizingAtTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.049,
                    "name": "testCompactedTopicConstraints",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.044,
                    "name": "followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.1,
                    "name": "testRebuildTransactionalState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.035,
                    "name": "testProducerIdMapTruncateToWithNoSnapshots",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.12,
                    "name": "testOverCompactedLogRecoveryMultiRecordV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.057,
                    "name": "testDuplicateAppendToFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 2.433,
                    "name": "testThatGarbageCollectingSegmentsDoesntChangeOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.005,
                    "name": "testSkipTruncateAndReloadIfOldMessageFormatAndNoCleanShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.034,
                    "name": "testMessageSizeCheckInAppendAsFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 1.917,
                    "name": "testAppendAndReadWithSequentialOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.002,
                    "name": "testOffsetFromFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.109,
                    "name": "testProducerSnapshotAfterSegmentRollOnAppend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.446,
                    "name": "testRecoveryAfterCrashDuringSplitPhase1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.353,
                    "name": "testRecoveryAfterCrashDuringSplitPhase2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.244,
                    "name": "testRecoveryAfterCrashDuringSplitPhase3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.177,
                    "name": "testRecoveryAfterCrashDuringSplitPhase4",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.184,
                    "name": "testRecoveryAfterCrashDuringSplitPhase5",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.395,
                    "name": "testFullTransactionIndexRecovery",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.014,
                    "name": "testAppendEmptyLogBelowLogStartOffsetThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.07,
                    "name": "testDegenerateSegmentSplitWithOutOfRangeBatchLastOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.203,
                    "name": "shouldDeleteSizeBasedSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.067,
                    "name": "testRebuildProducerStateWithEmptyCompactedBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.002,
                    "name": "testParseTopicPartitionNameForNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.318,
                    "name": "testLogDeletionAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.911,
                    "name": "testProducerSnapshotsRecoveryAfterUncleanShutdownCurrentMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 3.541,
                    "name": "testAppendAndReadWithNonSequentialOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.26,
                    "name": "shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.027,
                    "name": "testDuplicateAppends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.117,
                    "name": "testRollSegmentThatAlreadyExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.004,
                    "name": "testParseTopicPartitionNameForExistingInvalidDir",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.508,
                    "name": "testTruncateToEmptySegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testLoadPartitionDirWithNoSegmentsShouldNotThrow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testParseTopicPartitionNameForMissingSeparator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.002,
                    "name": "testParseTopicPartitionNameWithPeriodForDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.417,
                    "name": "testRecoverLastSegmentWithNoSnapshots",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.059,
                    "name": "testFetchUpToLastStableOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.041,
                    "name": "testLeaderEpochCacheCreatedAfterMessageFormatUpgrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.061,
                    "name": "testFetchUpToLogEndOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.234,
                    "name": "testLastStableOffsetDoesNotExceedLogStartOffsetMidSegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.202,
                    "name": "testDeleteSnapshotsOnIncrementLogStartOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 12.969,
                    "name": "testCorruptIndexRebuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.292,
                    "name": "shouldDeleteTimeBasedSegmentsReadyToBeDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 2.447,
                    "name": "testReadWithTooSmallMaxLength",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.115,
                    "name": "testOverCompactedLogRecovery",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.152,
                    "name": "testBogusIndexSegmentsAreRemoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.024,
                    "name": "testMetricsRemovedOnLogDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.102,
                    "name": "testLeaderEpochCacheClearedAfterStaticMessageFormatDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.1,
                    "name": "testCompressedMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.041,
                    "name": "testAppendMessageWithNullPayload",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 7.333,
                    "name": "testCorruptLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 3.05,
                    "name": "testLogRecoversToCorrectOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 1.509,
                    "name": "testReopenThenTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.035,
                    "name": "testZombieCoordinatorFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.034,
                    "name": "testOldProducerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.336,
                    "name": "testProducerSnapshotsRecoveryAfterUncleanShutdownV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.069,
                    "name": "testDegenerateSegmentSplit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testParseTopicPartitionNameForMissingPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testParseTopicPartitionNameForEmptyName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.027,
                    "name": "testOffsetSnapshot",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 1.956,
                    "name": "testOpenDeletesObsoleteFiles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.236,
                    "name": "shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.004,
                    "name": "testLogDeleteDirName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 2.808,
                    "name": "testDeleteOldSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 3.003,
                    "name": "testRebuildTimeIndexForOldMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.07,
                    "name": "testProducerIdMapTruncateTo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.177,
                    "name": "testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.505,
                    "name": "testLogEndLessThanStartAfterReopen",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.226,
                    "name": "testLogRecoversForLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.068,
                    "name": "testWriteLeaderEpochCheckpointAfterDirectoryRename",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.119,
                    "name": "testOverCompactedLogRecoveryMultiRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.109,
                    "name": "testSizeBasedLogRoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.069,
                    "name": "testRebuildProducerIdMapWithCompactedData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.186,
                    "name": "shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.055,
                    "name": "testTransactionIndexUpdatedThroughReplication",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.11,
                    "name": "testTimeBasedLogRollJitter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.003,
                    "name": "testParseTopicPartitionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.05,
                    "name": "testEndTxnWithFencedProducerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.185,
                    "name": "testRecoveryOfSegmentWithOffsetOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.109,
                    "name": "testRecoverAfterNonMonotonicCoordinatorEpochWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.126,
                    "name": "testLoadProducersAfterDeleteRecordsMidSegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 1.172,
                    "name": "testInitializationOfProducerSnapshotsUpgradePath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.205,
                    "name": "shouldDeleteStartOffsetBreachedSegmentsWhenPolicyDoesNotIncludeDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.033,
                    "name": "testSkipLoadingIfEmptyProducerStateBeforeTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.367,
                    "name": "testTruncateTo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.007,
                    "name": "testSkipTruncateAndReloadIfNewMessageFormatAndCleanShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.409,
                    "name": "shouldApplyEpochToMessageOnAppendIfLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.129,
                    "name": "testLogDeletionAfterClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.29,
                    "name": "testLoadProducersAfterDeleteRecordsOnSegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.815,
                    "name": "testCleanShutdownFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.034,
                    "name": "testTransactionIndexUpdated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.044,
                    "name": "testBuildTimeIndexWhenNotAssigningOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogTest",
                    "duration": 0.006,
                    "name": "testProducerExpireCheckAfterDelete",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testRecompressedBatchWithoutRecordsNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.007,
                    "name": "testCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testDownConversionOfIdempotentRecordsNotPermitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.003,
                    "name": "testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.008,
                    "name": "testInvalidRecordExceptionHasBatchIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testAbsoluteOffsetAssignmentCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.004,
                    "name": "testLogAppendTimeWithRecompressionV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testLogAppendTimeWithRecompressionV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testCreateTimeUpConversionV0ToV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testCreateTimeUpConversionV0ToV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testCreateTimeUpConversionV1ToV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testOffsetAssignmentAfterDownConversionV2ToV0Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testZStdCompressedWithUnavailableIBPVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterUpConversionV1ToV2Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testDownConversionOfTransactionalRecordsNotPermitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.006,
                    "name": "testValidationOfBatchesWithNonSequentialInnerOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterUpConversionV0ToV1Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testInvalidTimestampExceptionHasBatchIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testRelativeOffsetAssignmentNonCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testRelativeOffsetAssignmentNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testControlRecordsNotAllowedFromClients",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testRelativeOffsetAssignmentCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testRelativeOffsetAssignmentCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.013,
                    "name": "testMisMatchMagic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testLogAppendTimeNonCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testLogAppendTimeNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testControlRecordsNotCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testInvalidCreateTimeNonCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testInvalidCreateTimeNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testCompressedBatchWithoutRecordsNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testOnlyOneBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.003,
                    "name": "testBatchWithInvalidRecordsAndInvalidTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testAllowMultiBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testInvalidOffsetRangeAndRecordCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testLogAppendTimeWithoutRecompressionV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testLogAppendTimeWithoutRecompressionV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testUncompressedBatchWithoutRecordsNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testAbsoluteOffsetAssignmentNonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterDownConversionV2ToV1Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testOffsetAssignmentAfterDownConversionV1ToV0Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testOffsetAssignmentAfterUpConversionV0ToV2Compressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.005,
                    "name": "testNonCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testInvalidCreateTimeCompressedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.0,
                    "name": "testInvalidCreateTimeCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.004,
                    "name": "testNonIncreasingOffsetRecordBatchHasMetricsLogged",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.002,
                    "name": "testRecompressionV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.LogValidatorTest",
                    "duration": 0.001,
                    "name": "testRecompressionV2",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "lookupExtremeCases",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "appendTooMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "testEntry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "testSanityLastOffsetEqualToBaseOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.002,
                    "name": "forceUnmapTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.002,
                    "name": "testFetchUpperBoundOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.016,
                    "name": "randomLookupTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "testEntryOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "testReopen",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "appendOutOfOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetIndexTest",
                    "duration": 0.001,
                    "name": "truncate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.OffsetMapTest",
                    "duration": 0.001,
                    "name": "testClear",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetMapTest",
                    "duration": 0.005,
                    "name": "testGetWhenFull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.OffsetMapTest",
                    "duration": 0.048,
                    "name": "testBasicValidation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testProducerSequenceWithWrapAroundBatchRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testCoordinatorFencing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.011,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.004,
                    "name": "testLoadFromTruncatedSnapshotFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testRemoveExpiredPidsOnReload",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testRecoverFromSnapshotFinishedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testOutOfSequenceAfterControlRecordEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testFirstUnstableOffsetAfterTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testTakeSnapshot",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testRecoverFromSnapshotUnfinishedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testDeleteSnapshotsBefore",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.005,
                    "name": "testAppendEmptyControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testNoValidationOnFirstEntryWhenLoadingLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testLoadFromEmptySnapshotFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testProducersWithOngoingTransactionsDontExpire",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.004,
                    "name": "testBasicIdMapping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "updateProducerTransactionState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testPrepareUpdateDoesNotMutate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testSequenceNotValidatedForGroupMetadataTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testLastStableOffsetCompletedTxn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testFirstUnstableOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testTxnFirstOffsetMetadataCached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testCoordinatorFencedAfterReload",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testControlRecordBumpsEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testAcceptAppendWithoutProducerStateOnReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testProducerStateAfterFencingAbortMarker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testLoadFromCorruptSnapshotFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testProducerSequenceWrapAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testPidExpirationTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testAcceptAppendWithSequenceGapsOnReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.002,
                    "name": "testAppendTxnMarkerWithNoProducerState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testOldEpochForControlRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.003,
                    "name": "testTruncateAndReloadRemovesOutOfRangeSnapshots",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.001,
                    "name": "testProducerSequenceInvalidWrapAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testRecoverFromSnapshotEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testNonTransactionalAppendWithOngoingTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testLoadFromSnapshotRetainsNonExpiredProducers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.ProducerStateManagerTest",
                    "duration": 0.0,
                    "name": "testSkipSnapshotIfOffsetUnchanged",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.002,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.002,
                    "name": "testEntry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.002,
                    "name": "testAppend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.001,
                    "name": "testEntryOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.001,
                    "name": "testLookUp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TimeIndexTest",
                    "duration": 0.003,
                    "name": "testSanityCheck",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.007,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.0,
                    "name": "testAbortedTxnSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.001,
                    "name": "testRenameIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.001,
                    "name": "testPositionSetCorrectlyWhenOpened",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.001,
                    "name": "testLastOffsetCannotDecrease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.0,
                    "name": "testLastOffsetMustIncrease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.001,
                    "name": "testSanityCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.log.TransactionIndexTest",
                    "duration": 0.002,
                    "name": "testCollectAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.metrics.KafkaTimerTest",
                    "duration": 0.002,
                    "name": "testKafkaTimer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.346,
                    "name": "testUpdateJMXFilter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.343,
                    "name": "testGeneralBrokerTopicMetricsAreGreedilyRegistered",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.356,
                    "name": "testMetricsReporterAfterDeletingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.308,
                    "name": "testSessionExpireListenerMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.345,
                    "name": "testBrokerTopicMetricsUnregisteredAfterDeletingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.329,
                    "name": "testClusterIdMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.381,
                    "name": "testControllerMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.333,
                    "name": "testWindowsStyleTagNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 3.329,
                    "name": "testBrokerTopicMetricsBytesInOut",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.metrics.MetricsTest",
                    "duration": 2.343,
                    "name": "testJMXFilter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 0.006,
                    "name": "testFailDecrementForUnknownIp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 0.01,
                    "name": "testMaxConnectionsPerIp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 1.228,
                    "name": "testMaxBrokerWideConnectionLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 0.913,
                    "name": "testNoConnectionLimitsByDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 3.029,
                    "name": "testMaxListenerConnectionLimits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.ConnectionQuotasTest",
                    "duration": 0.004,
                    "name": "testFailWhenNoListeners",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.network.DynamicConnectionQuotaTest",
                    "duration": 5.228,
                    "name": "testDynamicConnectionQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.DynamicConnectionQuotaTest",
                    "duration": 6.188,
                    "name": "testDynamicListenerConnectionQuota",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.network.RequestChannelTest",
                    "duration": 0.039,
                    "name": "testNonAlterRequestsNotTransformed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.RequestChannelTest",
                    "duration": 0.013,
                    "name": "testAlterRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.RequestChannelTest",
                    "duration": 0.009,
                    "name": "testIncrementalAlterRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.06,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.198,
                    "name": "testClientDisconnectionWithOutstandingReceivesProcessedUntilFailedSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.143,
                    "name": "testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.476,
                    "name": "controlThrowable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.053,
                    "name": "testRequestMetricsAfterStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 2.147,
                    "name": "testConnectionIdReuse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.163,
                    "name": "testClientInformationWithOldestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.248,
                    "name": "testSaslReauthenticationFailureNoKip152SaslAuthenticate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.346,
                    "name": "testClientDisconnectionUpdatesRequestMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.047,
                    "name": "testProcessorMetricsTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.09,
                    "name": "remoteCloseWithBufferedReceivesFailedSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.157,
                    "name": "testMaxConnectionsPerIp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.047,
                    "name": "testConnectionId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.086,
                    "name": "remoteCloseSendFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.578,
                    "name": "testBrokerSendAfterChannelClosedUpdatesRequestMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.05,
                    "name": "testNoOpAction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.048,
                    "name": "simpleRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.172,
                    "name": "testSendActionResponseWithThrottledChannelWhereThrottlingInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.53,
                    "name": "testIdleConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.833,
                    "name": "remoteCloseWithoutBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.384,
                    "name": "remoteCloseWithCompleteAndIncompleteBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.187,
                    "name": "testZeroMaxConnectionsPerIp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.15,
                    "name": "testClientInformationWithLatestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.062,
                    "name": "testMetricCollectionAfterShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.049,
                    "name": "testSessionPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.384,
                    "name": "configureNewConnectionException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.231,
                    "name": "testSaslReauthenticationFailureWithKip152SaslAuthenticate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.079,
                    "name": "testMaxConnectionsPerIpOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.11,
                    "name": "testControlPlaneRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.421,
                    "name": "processNewResponseException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.952,
                    "name": "remoteCloseWithIncompleteBufferedReceive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.103,
                    "name": "testStagedListenerShutdownWhenConnectionQueueIsFull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 2.134,
                    "name": "testStagedListenerStartup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.637,
                    "name": "testConnectionRateLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.417,
                    "name": "processCompletedSendException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.29,
                    "name": "processDisconnectedException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.288,
                    "name": "closingChannelWithBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.42,
                    "name": "sendCancelledKeyException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.286,
                    "name": "processCompletedReceiveException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.167,
                    "name": "closingChannelSendFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 2.075,
                    "name": "idleExpiryWithBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.266,
                    "name": "testSocketsCloseOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.137,
                    "name": "testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.71,
                    "name": "pollException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.444,
                    "name": "closingChannelWithBufferedReceivesFailedSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.953,
                    "name": "remoteCloseWithBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 1.141,
                    "name": "closingChannelWithCompleteAndIncompleteBufferedReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.512,
                    "name": "testSslSocketServer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.04,
                    "name": "tooBigRequestIsRejected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.network.SocketServerTest",
                    "duration": 0.14,
                    "name": "testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.OperationTest",
                    "duration": 0.001,
                    "name": "testJavaConversions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.PermissionTypeTest",
                    "duration": 0.005,
                    "name": "testJavaConversions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.PermissionTypeTest",
                    "duration": 0.0,
                    "name": "testFromString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.006,
                    "name": "shouldParseOldTwoPartString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.0,
                    "name": "shouldParseOldTwoPartWithEmbeddedSeparators",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnTwoPartStringWithUnknownResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnBadResourceTypeSeparator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.0,
                    "name": "shouldParseThreePartString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripViaString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTest",
                    "duration": 0.0,
                    "name": "shouldParseThreePartWithEmbeddedSeparators",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.ResourceTypeTest",
                    "duration": 0.0,
                    "name": "testJavaConversions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ResourceTypeTest",
                    "duration": 0.002,
                    "name": "testFromString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.563,
                    "name": "testAuthorizeWithPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.499,
                    "name": "testAllowAllAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.496,
                    "name": "testLocalConcurrentModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.506,
                    "name": "testDeleteAllAclOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.708,
                    "name": "testHighConcurrencyDeletionOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.492,
                    "name": "testNoAclFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.546,
                    "name": "testAclInheritance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.742,
                    "name": "testDistributedConcurrentModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.493,
                    "name": "testAddAclsOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.625,
                    "name": "testWritesExtendedAclChangeEventWhenInterBrokerProtocolAtLeastKafkaV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.528,
                    "name": "testAclManagementAPIs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.5,
                    "name": "testWildCardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.62,
                    "name": "testWritesLiteralAclChangeEventWhenInterBrokerProtocolIsKafkaV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.489,
                    "name": "testTopicAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.495,
                    "name": "testSuperUserHasAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.491,
                    "name": "testDeleteAclOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.486,
                    "name": "testDenyTakesPrecedence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.496,
                    "name": "testSingleCharacterResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.617,
                    "name": "testNoAclFoundOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.496,
                    "name": "testEmptyAclThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.492,
                    "name": "testSuperUserWithCustomPrincipalHasAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.498,
                    "name": "testAllowAccessWithCustomPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.491,
                    "name": "testDeleteAclOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.618,
                    "name": "testWritesLiteralWritesLiteralAclChangeEventWhenInterBrokerProtocolLessThanKafkaV2eralAclChangesForOlderProtocolVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.614,
                    "name": "testThrowsOnAddPrefixedAclIfInterBrokerProtocolVersionTooLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.491,
                    "name": "testAccessAllowedIfAllowAclExistsOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.71,
                    "name": "testHighConcurrencyModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.5,
                    "name": "testAuthorizeWithEmptyResourceName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.504,
                    "name": "testAuthorizeThrowsOnNonLiteralResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.495,
                    "name": "testDeleteAllAclOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.498,
                    "name": "testAddAclsOnLiteralResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.502,
                    "name": "testGetAclsPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.493,
                    "name": "testAddAclsOnPrefiexedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.617,
                    "name": "testWritesExtendedAclChangeEventIfInterBrokerProtocolNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.489,
                    "name": "testAccessAllowedIfAllowAclExistsOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.SimpleAclAuthorizerTest",
                    "duration": 0.625,
                    "name": "testLoadCache",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.118,
                    "name": "testIsZkSecurityEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.189,
                    "name": "testKafkaZkClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.468,
                    "name": "testZkAntiMigration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.124,
                    "name": "testConsumerOffsetPathAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.448,
                    "name": "testZkMigration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.558,
                    "name": "testChroot",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.414,
                    "name": "testDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.auth.ZkAuthorizationTest",
                    "duration": 0.32,
                    "name": "testDeleteRecursive",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.525,
                    "name": "testAuthorizeWithPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.488,
                    "name": "testAllowAllAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.494,
                    "name": "testAuthorizerNoZkConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.501,
                    "name": "testLocalConcurrentModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.524,
                    "name": "testDeleteAllAclOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.482,
                    "name": "testAddAclsOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.489,
                    "name": "testAuthorizerZkConfigFromKafkaConfigWithDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.691,
                    "name": "testHighConcurrencyDeletionOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.486,
                    "name": "testNoAclFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.536,
                    "name": "testAclInheritance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.826,
                    "name": "testDistributedConcurrentModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.49,
                    "name": "testAddAclsOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.621,
                    "name": "testWritesExtendedAclChangeEventWhenInterBrokerProtocolAtLeastKafkaV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.485,
                    "name": "testAuthorizerZkConfigFromPrefixOverrides",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.506,
                    "name": "testAclsFilter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.518,
                    "name": "testAclManagementAPIs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.496,
                    "name": "testWildCardAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.964,
                    "name": "testCreateDeleteTiming",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.607,
                    "name": "testWritesLiteralAclChangeEventWhenInterBrokerProtocolIsKafkaV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.489,
                    "name": "testTopicAcl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.488,
                    "name": "testSuperUserHasAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.488,
                    "name": "testDeleteAclOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.486,
                    "name": "testDenyTakesPrecedence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.481,
                    "name": "testSingleCharacterResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.611,
                    "name": "testNoAclFoundOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.484,
                    "name": "testEmptyAclThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.484,
                    "name": "testSuperUserWithCustomPrincipalHasAccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.493,
                    "name": "testAllowAccessWithCustomPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.488,
                    "name": "testDeleteAclOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.482,
                    "name": "testAuthorizerZkConfigFromKafkaConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.609,
                    "name": "testChangeListenerTiming",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.622,
                    "name": "testWritesLiteralWritesLiteralAclChangeEventWhenInterBrokerProtocolLessThanKafkaV2eralAclChangesForOlderProtocolVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.614,
                    "name": "testThrowsOnAddPrefixedAclIfInterBrokerProtocolVersionTooLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.493,
                    "name": "testAccessAllowedIfAllowAclExistsOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.859,
                    "name": "testHighConcurrencyModificationOfResourceAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.487,
                    "name": "testAuthorizeWithEmptyResourceName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.478,
                    "name": "testAuthorizeThrowsOnNonLiteralResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.48,
                    "name": "testDeleteAllAclOnPrefixedResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.489,
                    "name": "testAddAclsOnLiteralResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.494,
                    "name": "testGetAclsPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.785,
                    "name": "testWritesExtendedAclChangeEventIfInterBrokerProtocolNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.486,
                    "name": "testAccessAllowedIfAllowAclExistsOnWildcardResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.authorizer.AclAuthorizerTest",
                    "duration": 0.613,
                    "name": "testLoadCache",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.authorizer.AclEntryTest",
                    "duration": 0.001,
                    "name": "testAclJsonConversion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.minikdc.MiniKdcTest",
                    "duration": 14.648,
                    "name": "shouldNotStopImmediatelyWhenStarted",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.724,
                    "name": "testPeriodicTokenExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.118,
                    "name": "testTokenRequestsWithDelegationTokenDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.586,
                    "name": "testDescribeToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.192,
                    "name": "testCreateToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.288,
                    "name": "testExpireToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.52,
                    "name": "testRenewToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.security.token.delegation.DelegationTokenManagerTest",
                    "duration": 0.201,
                    "name": "testRemoveTokenHmac",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.AbstractFetcherManagerTest",
                    "duration": 0.064,
                    "name": "testAddAndRemovePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherManagerTest",
                    "duration": 0.003,
                    "name": "testMetricFailedPartitionCount",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherManagerTest",
                    "duration": 0.002,
                    "name": "testDeadThreadCountMetric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.011,
                    "name": "testSimpleFetch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testTruncateToHighWatermarkIfLeaderEpochInfoNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.003,
                    "name": "testFollowerFetchOutOfRangeHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.001,
                    "name": "testFencedTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.103,
                    "name": "testRetryAfterUnknownLeaderEpochInLatestOffsetFetch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.003,
                    "name": "testTruncateToEpochEndOffsetsDuringRemovePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testTruncationSkippedIfNoEpochChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testUnknownLeaderEpochInTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testConsumerLagRemovedWithPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.001,
                    "name": "testFollowerFetchOutOfRangeLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.001,
                    "name": "testFencedOffsetResetAfterOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testUnknownLeaderEpochWhileFetching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.001,
                    "name": "testLeaderEpochChangeDuringSuccessfulFetchEpochsFromLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testTruncationThrowsExceptionIfLeaderReturnsPartitionsNotRequestedInFetchEpochs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testFencedFetch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testTruncateToHighWatermarkIfLeaderEpochRequestNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.004,
                    "name": "testFetcherThreadHandlingPartitionFailureDuringAppending",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.104,
                    "name": "testMetricsRemovedOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testTruncateToHighWatermarkDuringRemovePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.003,
                    "name": "testFetcherThreadHandlingPartitionFailureDuringTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.002,
                    "name": "testLeaderEpochChangeDuringFencedFetchEpochsFromLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.004,
                    "name": "testCorruptMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AbstractFetcherThreadTest",
                    "duration": 0.403,
                    "name": "testTruncation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.AddPartitionsToTxnRequestServerTest",
                    "duration": 3.41,
                    "name": "shouldReceiveOperationNotAttemptedWhenOtherPartitionHasError",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.AdvertiseBrokerTest",
                    "duration": 2.184,
                    "name": "testBrokerAdvertiseHostNameAndPortToZK",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.AlterReplicaLogDirsRequestTest",
                    "duration": 5.208,
                    "name": "testAlterReplicaLogDirsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.AlterReplicaLogDirsRequestTest",
                    "duration": 3.202,
                    "name": "testAlterReplicaLogDirsRequestErrorCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ApiVersionsRequestTest",
                    "duration": 3.208,
                    "name": "testApiVersionsRequestWithUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ApiVersionsRequestTest",
                    "duration": 3.2,
                    "name": "testApiVersionsRequestValidationV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ApiVersionsRequestTest",
                    "duration": 3.203,
                    "name": "testApiVersionsRequestValidationV3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ApiVersionsRequestTest",
                    "duration": 3.203,
                    "name": "testApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.BrokerEpochIntegrationTest",
                    "duration": 3.33,
                    "name": "testControlRequestWithStaleBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.BrokerEpochIntegrationTest",
                    "duration": 3.198,
                    "name": "testControlRequestWithCorrectBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.BrokerEpochIntegrationTest",
                    "duration": 2.343,
                    "name": "testReplicaManagerBrokerEpochMatchesWithZk",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.BrokerEpochIntegrationTest",
                    "duration": 4.392,
                    "name": "testControllerBrokerEpochCacheMatchesWithZk",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.BrokerEpochIntegrationTest",
                    "duration": 3.198,
                    "name": "testControlRequestWithNewerBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.BrokerMetadataCheckpointTest",
                    "duration": 0.001,
                    "name": "testReadWithNonExistentFile",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testSetAndRemoveUserClientQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.002,
                    "name": "testUserQuotaParsingWithDefaultClientIdQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.002,
                    "name": "testUserQuotaParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.0,
                    "name": "testClientIdQuotaParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 3.004,
                    "name": "testQuotaViolation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 2.001,
                    "name": "testRequestPercentageQuotaViolation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testQuotaConfigPrecedence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testSetAndRemoveDefaultUserQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testExpireQuotaSensors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testGetMaxValueInQuotaWindowWithNonDefaultQuotaWindow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.0,
                    "name": "testClientIdNotSanitized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.0,
                    "name": "testExpireThrottleTimeSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.002,
                    "name": "testSetAndRemoveUserQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.0,
                    "name": "testUserClientIdQuotaParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotaManagerTest",
                    "duration": 1.001,
                    "name": "testUserClientQuotaParsingIdWithDefaultClientIdQuota",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.204,
                    "name": "testAlterClientQuotasBadClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.385,
                    "name": "testAlterClientQuotasBadConfigKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 3.205,
                    "name": "testDescribeClientQuotasMatchPartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.199,
                    "name": "testAlterClientQuotasRequestValidateOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.207,
                    "name": "testAlterClientQuotasBadUser",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.22,
                    "name": "testAlterClientQuotasEmptyEntity",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.197,
                    "name": "testClientQuotasSanitized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.208,
                    "name": "testAlterClientQuotasBadConfigValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.207,
                    "name": "testClientQuotasUnsupportedEntityTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.201,
                    "name": "testAlterClientQuotasBadEntityType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.202,
                    "name": "testClientQuotasWithDefaultName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 2.217,
                    "name": "testAlterClientQuotasRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ClientQuotasRequestTest",
                    "duration": 3.204,
                    "name": "testDescribeClientQuotasMatchExact",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.CreateTopicsRequestTest",
                    "duration": 4.469,
                    "name": "testValidCreateTopicsRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.CreateTopicsRequestTest",
                    "duration": 5.406,
                    "name": "testErrorCreateTopicsRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.CreateTopicsRequestTest",
                    "duration": 3.503,
                    "name": "testCreateTopicsRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.CreateTopicsRequestTest",
                    "duration": 3.389,
                    "name": "testInvalidCreateTopicsRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.CreateTopicsRequestTest",
                    "duration": 3.453,
                    "name": "testNotController",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.CreateTopicsRequestWithPolicyTest",
                    "duration": 3.469,
                    "name": "testValidCreateTopicsRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.CreateTopicsRequestWithPolicyTest",
                    "duration": 3.492,
                    "name": "testErrorCreateTopicsRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DelayedFetchTest",
                    "duration": 0.046,
                    "name": "testReplicaNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedFetchTest",
                    "duration": 0.067,
                    "name": "testFetchWithFencedEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.202,
                    "name": "testRequestPurge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.221,
                    "name": "testRequestExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.001,
                    "name": "shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.201,
                    "name": "testDelayedOperationLockOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.201,
                    "name": "testTryCompleteLockContention",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 1.404,
                    "name": "testTryCompleteWithMultipleThreads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.201,
                    "name": "shouldCancelForKeyReturningCancelledOperations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 2.403,
                    "name": "testDelayedFuture",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.201,
                    "name": "testRequestSatisfaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DelayedOperationTest",
                    "duration": 0.201,
                    "name": "testDelayedOperationLock",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DelegationTokenRequestsOnPlainTextTest",
                    "duration": 3.202,
                    "name": "testDelegationTokenRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DelegationTokenRequestsTest",
                    "duration": 3.193,
                    "name": "testDelegationTokenRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DelegationTokenRequestsWithDisableTokenFeatureTest",
                    "duration": 2.213,
                    "name": "testDelegationTokenRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DeleteTopicsRequestTest",
                    "duration": 5.359,
                    "name": "testValidDeleteTopicRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DeleteTopicsRequestTest",
                    "duration": 4.467,
                    "name": "testErrorDeleteTopicRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DeleteTopicsRequestTest",
                    "duration": 3.344,
                    "name": "testNotController",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DeleteTopicsRequestWithDeletionDisabledTest",
                    "duration": 2.201,
                    "name": "testDeleteRecordsRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DescribeLogDirsRequestTest",
                    "duration": 3.192,
                    "name": "testDescribeLogDirsRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.058,
                    "name": "testPasswordConfigEncryption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.231,
                    "name": "testSecurityConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.0,
                    "name": "testSynonyms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.006,
                    "name": "testDynamicConfigInitializationWithoutConfigsInZK",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.014,
                    "name": "testConfigUpdateWithSomeInvalidConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.039,
                    "name": "testDynamicListenerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.004,
                    "name": "testReconfigurableValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.003,
                    "name": "testAuthorizerConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.026,
                    "name": "testConnectionQuota",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.004,
                    "name": "testConfigUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.152,
                    "name": "testPasswordConfigEncoderSecretChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerConfigTest",
                    "duration": 0.012,
                    "name": "testConfigUpdateWithReconfigurableValidationFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 10.87,
                    "name": "testDefaultTopicConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 11.379,
                    "name": "testMetricsReporterUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 12.983,
                    "name": "testAdvertisedListenerUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 6.807,
                    "name": "testConsecutiveConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 15.861,
                    "name": "testThreadPoolResize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 28.316,
                    "name": "testAddRemoveSaslListeners",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 18.8,
                    "name": "testTrustStoreAlter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 8.491,
                    "name": "testConfigDescribeUsingAdminClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 12.303,
                    "name": "testUncleanLeaderElectionEnable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 15.729,
                    "name": "testKeyStoreAlter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 9.544,
                    "name": "testUpdatesUsingConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 0.0,
                    "name": "testAddRemoveSslListener",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "kafka.server.DynamicBrokerReconfigurationTest",
                    "duration": 9.78,
                    "name": "testLogCleanerConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.188,
                    "name": "testProcessNotification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.194,
                    "name": "shouldParseWildcardReplicationQuotaProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.188,
                    "name": "testDefaultClientIdQuotaConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 4.285,
                    "name": "testQuotaInitialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.188,
                    "name": "testUserQuotaConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.183,
                    "name": "testClientIdQuotaConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.219,
                    "name": "testConfigChangeOnNonExistingTopicWithAdminClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.209,
                    "name": "testUserClientIdQuotaChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.187,
                    "name": "shouldParseReplicationQuotaProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.197,
                    "name": "shouldParseRegardlessOfWhitespaceAroundValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.224,
                    "name": "testDefaultUserQuotaConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.192,
                    "name": "shouldParseReplicationQuotaReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.192,
                    "name": "testDefaultUserClientIdQuotaConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.246,
                    "name": "testConfigChangeOnNonExistingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 2.182,
                    "name": "testConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigChangeTest",
                    "duration": 3.247,
                    "name": "testDynamicTopicConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.DynamicConfigTest",
                    "duration": 0.113,
                    "name": "shouldFailFollowerConfigsWithInvalidValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigTest",
                    "duration": 0.112,
                    "name": "shouldFailWhenChangingUserUnknownConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigTest",
                    "duration": 0.111,
                    "name": "shouldFailLeaderConfigsWithInvalidValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.DynamicConfigTest",
                    "duration": 0.111,
                    "name": "shouldFailWhenChangingClientIdUnknownConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.EdgeCaseRequestTest",
                    "duration": 2.185,
                    "name": "testInvalidApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.EdgeCaseRequestTest",
                    "duration": 2.177,
                    "name": "testMalformedHeaderRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.EdgeCaseRequestTest",
                    "duration": 2.181,
                    "name": "testProduceRequestWithNullClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.EdgeCaseRequestTest",
                    "duration": 2.186,
                    "name": "testInvalidApiKeyRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.EdgeCaseRequestTest",
                    "duration": 2.181,
                    "name": "testHeaderOnlyRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FetchRequestDownConversionConfigTest",
                    "duration": 4.209,
                    "name": "testV1FetchWithDownConversionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestDownConversionConfigTest",
                    "duration": 6.205,
                    "name": "testV1FetchFromReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestDownConversionConfigTest",
                    "duration": 5.21,
                    "name": "testLatestFetchWithDownConversionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestDownConversionConfigTest",
                    "duration": 6.204,
                    "name": "testV1FetchWithTopicLevelOverrides",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FetchRequestMaxBytesTest",
                    "duration": 3.204,
                    "name": "testConsumeMultipleRecords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 5.327,
                    "name": "testZStdCompressedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 3.439,
                    "name": "testFetchRequestToNonReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 11.476,
                    "name": "testBrokerRespectsPartitionsOrderAndSizeLimits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 5.196,
                    "name": "testZStdCompressedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 4.798,
                    "name": "testDownConversionFromBatchedToUnbatchedRespectsOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 4.452,
                    "name": "testFetchRequestV2WithOversizedMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 4.436,
                    "name": "testEpochValidationWithinFetchSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 7.316,
                    "name": "testDownConversionWithConnectionFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 3.406,
                    "name": "testPartitionDataEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 6.201,
                    "name": "testCurrentEpochValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 3.427,
                    "name": "testCreateIncrementalFetchWithPartitionsInError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchRequestTest",
                    "duration": 4.425,
                    "name": "testFetchRequestV4WithReadCommitted",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.008,
                    "name": "testFetchRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.003,
                    "name": "testIncrementalFetchSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.002,
                    "name": "testCachedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.005,
                    "name": "testResizeCachedSessions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.003,
                    "name": "testPrivilegedSessionHandling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.009,
                    "name": "testSessionCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.004,
                    "name": "testFetchSessionExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.001,
                    "name": "testZeroSizeFetchSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FetchSessionTest",
                    "duration": 0.006,
                    "name": "testNewSessionId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FinalizedFeatureCacheTest",
                    "duration": 0.0,
                    "name": "testClear",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureCacheTest",
                    "duration": 0.0,
                    "name": "testEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureCacheTest",
                    "duration": 0.0,
                    "name": "testUpdateOrThrowSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureCacheTest",
                    "duration": 0.001,
                    "name": "testUpdateOrThrowFailedDueToInvalidFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureCacheTest",
                    "duration": 0.001,
                    "name": "testUpdateOrThrowFailedDueToInvalidEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 0.132,
                    "name": "testFeatureZNodeDeleteNotificationProcessing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 0.115,
                    "name": "testInitFailureDueToInvalidWaitTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 5.132,
                    "name": "testInitFailureDueToFeatureIncompatibility",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 0.228,
                    "name": "testInitSuccessAndNotificationSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 0.228,
                    "name": "testNotificationFailureDueToFeatureIncompatibility",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.FinalizedFeatureChangeListenerTest",
                    "duration": 0.226,
                    "name": "testFeatureZNodeDisablingNotificationProcessing",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.GssapiAuthenticationTest",
                    "duration": 29.015,
                    "name": "testServerNotFoundInKerberosDatabase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.GssapiAuthenticationTest",
                    "duration": 34.97,
                    "name": "testRequestIsAReplay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.GssapiAuthenticationTest",
                    "duration": 29.812,
                    "name": "testServerAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.HighwatermarkPersistenceTest",
                    "duration": 0.616,
                    "name": "testHighWatermarkPersistenceMultiplePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.HighwatermarkPersistenceTest",
                    "duration": 0.409,
                    "name": "testHighWatermarkPersistenceSinglePartition",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.IsrExpirationTest",
                    "duration": 0.425,
                    "name": "testIsrExpirationForSlowFollowers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.IsrExpirationTest",
                    "duration": 0.406,
                    "name": "testIsrExpirationForCaughtUpFollowers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.IsrExpirationTest",
                    "duration": 0.406,
                    "name": "testIsrExpirationForStuckFollowers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.IsrExpirationTest",
                    "duration": 0.407,
                    "name": "testIsrExpirationIfNoFetchRequestMade",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.197,
                    "name": "shouldRespondWithUnsupportedForMessageFormatOnHandleWriteTxnMarkersWhenMagicLowerThanRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.002,
                    "name": "shouldThrowUnsupportedVersionExceptionOnHandleTxnOffsetCommitRequestWhenInterBrokerProtocolNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testOffsetCommitWithInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testStopReplicaRequestWithNewerBrokerEpochIsValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testListGroupsRequestWithState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testLeaderReplicaIfLocalRaisesNotLeaderForPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.007,
                    "name": "testAlterConfigsWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testOffsetDeleteWithInvalidGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.007,
                    "name": "testFilterByAuthorized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testListGroupsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.009,
                    "name": "testJoinGroupProtocolsOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.017,
                    "name": "testJoinGroupWhenAnErrorOccurs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldThrowUnsupportedVersionExceptionOnHandleAddPartitionsToTxnRequestWhenInterBrokerProtocolNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.013,
                    "name": "testSyncGroupProtocolTypeAndName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "shouldNotResignCoordinatorsIfStopReplicaReceivedWithoutDeleteFlag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testReadUncommittedConsumerListOffsetLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testMetadataRequestOnDistinctListenerWithInconsistentListenersAcrossBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldAppendToLogOnWriteTxnMarkersWhenCorrectMagicVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testDescribeGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldThrowUnsupportedVersionExceptionOnHandleWriteTxnMarkersRequestWhenInterBrokerProtocolNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testLeaderReplicaIfLocalRaisesFencedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldResignCoordinatorsIfStopReplicaReceivedWithDeleteFlagAndLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.01,
                    "name": "testDescribeConfigsWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testStopReplicaRequestWithCurrentBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testFetchRequestV9WithNoLogConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldRespondWithUnknownTopicWhenPartitionIsNotHosted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.013,
                    "name": "testJoinGroupProtocolType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testLeaderAndIsrRequestWithStaleBrokerEpochIsRejected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "rejectSyncGroupRequestWhenStaticMembershipNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "rejectHeartbeatRequestWhenStaticMembershipNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testAlterReplicaLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testReadCommittedConsumerListOffsetLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.012,
                    "name": "testSyncGroupProtocolTypeAndNameAreMandatorySinceV5",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.005,
                    "name": "testMetadataRequestOnSharedListenerWithInconsistentListenersAcrossBrokers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testUpdateMetadataRequestWithCurrentBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.007,
                    "name": "testAddPartitionsToTxnWithInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.005,
                    "name": "testOffsetDeleteWithInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testLeaderReplicaIfLocalRaisesUnknownTopicOrPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "shouldResignCoordinatorsIfStopReplicaReceivedWithDeleteFlagAndDeleteSentinel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldThrowUnsupportedVersionExceptionOnHandleAddOffsetToTxnRequestWhenInterBrokerProtocolNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testIncrementalAlterConfigsWithAuthorizer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testLeaderReplicaIfLocalRaisesUnknownLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.006,
                    "name": "testOffsetDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testReassignmentAndReplicationBytesOutRateWhenReassigning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testUpdateMetadataRequestWithStaleBrokerEpochIsRejected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testUpdateMetadataRequestWithNewerBrokerEpochIsValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.005,
                    "name": "testTxnOffsetCommitWithInvalidPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.002,
                    "name": "shouldResignCoordinatorsIfStopReplicaReceivedWithDeleteFlagAndNoEpochSentinel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testLeaderAndIsrRequestWithCurrentBrokerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testLeaderAndIsrRequestWithNewerBrokerEpochIsValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "rejectInitProducerIdWhenEpochButNotIdProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.005,
                    "name": "shouldReplaceCoordinatorNotAvailableWithLoadInProcessInTxnOffsetCommitWithOlderClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testStopReplicaRequestWithStaleBrokerEpochIsRejected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testSingleLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "rejectJoinGroupRequestWhenStaticMembershipNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "shouldRespondWithUnsupportedMessageFormatForBadPartitionAndNoErrorsForGoodPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldThrowUnsupportedVersionExceptionOnHandleEndTxnRequestWhenInterBrokerProtocolNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testMultipleLeaveGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.004,
                    "name": "testReassignmentAndReplicationBytesOutRateWhenNotReassigning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.002,
                    "name": "rejectInitProducerIdWhenIdButNotEpochProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "shouldRespondWithUnknownTopicOrPartitionForBadPartitionAndNoErrorsForGoodPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.005,
                    "name": "rejectOffsetCommitRequestWhenStaticMembershipNotSupported",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaApisTest",
                    "duration": 0.003,
                    "name": "testAuthorize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.003,
                    "name": "testAdvertiseConfigured",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRetentionTimeHoursProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testLogRollTimeBothMsAndHoursProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.004,
                    "name": "testLogRetentionValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testSpecificProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testDefaultCompressionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.003,
                    "name": "testControlPlaneListenerName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testDuplicateListeners",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.003,
                    "name": "testLogRetentionUnlimited",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRetentionTimeMsProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testInterBrokerListenerNameMissingFromListenerSecurityProtocolMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.003,
                    "name": "testMaxConnectionsPerIpProp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRollTimeNoConfigProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testInvalidInterBrokerSecurityProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testAdvertiseDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testBadListenerProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.004,
                    "name": "testListenerDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRetentionTimeBothMinutesAndHoursProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testUncleanElectionDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testListenerNameMissingFromListenerSecurityProtocolMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRetentionTimeNoConfigProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testCaseInsensitiveListenerProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testListenerAndAdvertisedListenerNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testNonroutableAdvertisedListeners",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.0,
                    "name": "testInterBrokerListenerNameAndSecurityProtocolSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.169,
                    "name": "testFromPropsInvalid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testInvalidCompressionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testAdvertiseHostNameDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testLogRetentionTimeMinutesProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testValidCompressionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testUncleanElectionInvalid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.023,
                    "name": "testDynamicLogConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testListenerNamesWithAdvertisedListenerUnset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRetentionTimeBothMinutesAndMsProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testLogRollTimeMsProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testUncleanLeaderElectionDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testInvalidAdvertisedListenersProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.001,
                    "name": "testUncleanElectionEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.762,
                    "name": "testInterBrokerVersionMessageFormatCompatibility",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testAdvertisePortDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testVersionConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaConfigTest",
                    "duration": 0.002,
                    "name": "testEqualAdvertisedListenersProtocol",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaMetricReporterClusterIdTest",
                    "duration": 2.196,
                    "name": "testClusterIdPresent",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaMetricReporterExceptionHandlingTest",
                    "duration": 3.196,
                    "name": "testBothReportersAreInvoked",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaMetricsReporterTest",
                    "duration": 2.196,
                    "name": "testMetricsContextNamespacePresent",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.KafkaServerTest",
                    "duration": 3.357,
                    "name": "testAlreadyRegisteredAdvertisedListeners",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaServerTest",
                    "duration": 0.113,
                    "name": "testCreatesProperZkTlsConfigWithFalseAndListValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaServerTest",
                    "duration": 0.117,
                    "name": "testCreatesProperZkTlsConfigWhenDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.KafkaServerTest",
                    "duration": 0.113,
                    "name": "testCreatesProperZkTlsConfigWithTrueValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.LeaderElectionTest",
                    "duration": 2.346,
                    "name": "testLeaderElectionWithStaleControllerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LeaderElectionTest",
                    "duration": 12.358,
                    "name": "testLeaderElectionAndEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.LinuxIoMetricsCollectorTest",
                    "duration": 0.004,
                    "name": "testReadProcFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LinuxIoMetricsCollectorTest",
                    "duration": 0.002,
                    "name": "testUnableToReadNonexistentProcFile",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ListOffsetsRequestTest",
                    "duration": 3.443,
                    "name": "testListOffsetsErrorCodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ListOffsetsRequestTest",
                    "duration": 5.289,
                    "name": "testCurrentEpochValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ListOffsetsRequestTest",
                    "duration": 6.333,
                    "name": "testResponseIncludesLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 7.387,
                    "name": "testIOExceptionDuringLogRoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 6.195,
                    "name": "testIOExceptionDuringCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 5.384,
                    "name": "testProduceErrorFromFailureOnCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 7.19,
                    "name": "brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 5.194,
                    "name": "testReplicaFetcherThreadAfterLogDirFailureOnFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogDirFailureTest",
                    "duration": 5.387,
                    "name": "testProduceErrorFromFailureOnLogRoll",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 3.181,
                    "name": "testFetchOffsetsBeforeWithChangingSegmentSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 4.177,
                    "name": "testGetOffsetsBeforeEarliestTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 2.178,
                    "name": "testGetOffsetsForUnknownTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 3.199,
                    "name": "testEmptyLogsGetOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 3.179,
                    "name": "testFetchOffsetsBeforeWithChangingSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 3.179,
                    "name": "testGetOffsetsBeforeLatestTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 4.181,
                    "name": "testGetOffsetsBeforeNow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogOffsetTest",
                    "duration": 3.184,
                    "name": "testGetOffsetsAfterDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.LogRecoveryTest",
                    "duration": 5.36,
                    "name": "testHWCheckpointNoFailuresMultipleLogSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogRecoveryTest",
                    "duration": 11.354,
                    "name": "testHWCheckpointWithFailuresMultipleLogSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogRecoveryTest",
                    "duration": 4.311,
                    "name": "testHWCheckpointNoFailuresSingleLogSegment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.LogRecoveryTest",
                    "duration": 14.361,
                    "name": "testHWCheckpointWithFailuresSingleLogSegment",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.003,
                    "name": "getTopicMetadataPartitionListenerNotAvailableOnLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.001,
                    "name": "getTopicMetadataWithNonSupportedSecurityProtocol",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.002,
                    "name": "getTopicMetadataIsrNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.004,
                    "name": "getTopicMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.001,
                    "name": "getTopicMetadataReplicaNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.0,
                    "name": "getTopicMetadataPartitionListenerNotAvailableOnLeaderOldMetadataVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.001,
                    "name": "getTopicMetadataPartitionLeaderNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.001,
                    "name": "getAliveBrokersShouldNotBeMutatedByUpdateCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataCacheTest",
                    "duration": 0.0,
                    "name": "getTopicMetadataNonExistingTopics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 11.329,
                    "name": "testIsrAfterBrokerShutDownAndJoinsBack",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 4.214,
                    "name": "testReplicaDownResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 3.507,
                    "name": "testAutoCreateOfCollidingTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 2.514,
                    "name": "testRack",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 3.449,
                    "name": "testIsInternal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 4.44,
                    "name": "testControllerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 4.515,
                    "name": "testAliveBrokersWithNoTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 3.446,
                    "name": "testAllTopicsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 2.446,
                    "name": "testClusterIdIsValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 3.442,
                    "name": "testNoTopicsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 6.19,
                    "name": "testAutoCreateTopicWithInvalidReplicationFactor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 3.36,
                    "name": "testPreferredReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 2.447,
                    "name": "testClusterIdWithRequestVersion1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.MetadataRequestTest",
                    "duration": 2.447,
                    "name": "testAutoTopicCreation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.MultipleListenersWithAdditionalJaasContextTest",
                    "duration": 44.201,
                    "name": "testProduceConsume",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.MultipleListenersWithDefaultJaasContextTest",
                    "duration": 32.042,
                    "name": "testProduceConsume",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.OffsetsForLeaderEpochRequestTest",
                    "duration": 3.412,
                    "name": "testOffsetsForLeaderEpochErrorCodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.OffsetsForLeaderEpochRequestTest",
                    "duration": 5.375,
                    "name": "testCurrentEpochValidation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ProduceRequestTest",
                    "duration": 4.216,
                    "name": "testSimpleProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ProduceRequestTest",
                    "duration": 3.463,
                    "name": "testCorruptLz4ProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ProduceRequestTest",
                    "duration": 3.414,
                    "name": "testProduceToNonReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ProduceRequestTest",
                    "duration": 3.537,
                    "name": "testZSTDProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ProduceRequestTest",
                    "duration": 3.422,
                    "name": "testProduceWithInvalidTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.006,
                    "name": "shouldFetchLeaderEpochOnFirstFetchOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.002,
                    "name": "issuesEpochRequestFromLocalReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.003,
                    "name": "shouldTruncateToInitialFetchOffsetIfReplicaReturnsUndefinedOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.002,
                    "name": "shouldTruncateToReplicaOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.002,
                    "name": "shouldFetchOneReplicaAtATime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 3.005,
                    "name": "shouldPollIndefinitelyIfReplicaNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 1.14,
                    "name": "shouldReplaceCurrentLogDirWhenCaughtUp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 1.004,
                    "name": "shouldTruncateToEndOffsetOfLargestCommonEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.002,
                    "name": "shouldNotAddPartitionIfFutureLogIsNotDefined",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.003,
                    "name": "fetchEpochsFromLeaderShouldHandleExceptionFromGetLocalReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.014,
                    "name": "shouldUpdateLeaderEpochAfterFencedEpochError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaAlterLogDirsThreadTest",
                    "duration": 0.003,
                    "name": "shouldFetchNonDelayedAndNonTruncatingReplicas",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicaFetchTest",
                    "duration": 3.338,
                    "name": "testReplicaFetcherThread",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 1.078,
                    "name": "shouldFetchLeaderEpochSecondTimeIfLeaderRepliesWithEpochNotKnownToFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.005,
                    "name": "shouldFetchLeaderEpochOnFirstFetchOnlyIfLeaderEpochKnownToBoth",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.006,
                    "name": "shouldTruncateToInitialFetchOffsetIfLeaderReturnsUndefinedOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 4.007,
                    "name": "shouldPollIndefinitelyIfLeaderReturnsAnyException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.008,
                    "name": "shouldNotUpdateReassignmentBytesInMetricsWhenNoReassignmentsInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.003,
                    "name": "shouldTruncateToOffsetSpecifiedInEpochOffsetResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.002,
                    "name": "shouldHandleExceptionFromBlockingSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.002,
                    "name": "shouldSendLatestRequestVersionsByDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.002,
                    "name": "shouldTruncateToOffsetSpecifiedInEpochOffsetResponseIfFollowerHasNoMoreEpochs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.002,
                    "name": "shouldFetchLeaderEpochRequestIfLastEpochDefinedForSomePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.002,
                    "name": "shouldUseLeaderEndOffsetIfInterBrokerVersionBelow20",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.003,
                    "name": "shouldMovePartitionsOutOfTruncatingLogState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.005,
                    "name": "shouldCatchExceptionFromBlockingSendWhenShuttingDownReplicaFetcherThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.004,
                    "name": "shouldUpdateReassignmentBytesInMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaFetcherThreadTest",
                    "duration": 0.007,
                    "name": "shouldFilterPartitionsMadeLeaderDuringLeaderEpochRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicaManagerQuotasTest",
                    "duration": 0.427,
                    "name": "shouldGetBothMessagesIfQuotasAllow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerQuotasTest",
                    "duration": 0.005,
                    "name": "testCompleteInDelayedFetchWithReplicaThrottling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerQuotasTest",
                    "duration": 0.41,
                    "name": "shouldExcludeSubsequentThrottledPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerQuotasTest",
                    "duration": 0.406,
                    "name": "shouldGetNoMessagesIfQuotasExceededOnSubsequentPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerQuotasTest",
                    "duration": 0.406,
                    "name": "shouldIncludeInSyncThrottledReplicas",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.357,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndOlderLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.099,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndEqualLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.06,
                    "name": "testStopReplicaWithExistingPartitionAndDeleteSentinel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.111,
                    "name": "testPreferredReplicaAsLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.084,
                    "name": "testFetchRequestRateMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.041,
                    "name": "testReplicaSelector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.081,
                    "name": "testFetchBeyondHighWatermark",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.089,
                    "name": "testStopReplicaWithStaleControllerEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.406,
                    "name": "testHighWaterMarkDirectoryMapping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.055,
                    "name": "testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.075,
                    "name": "testFollowerStateNotUpdatedIfLogReadFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.078,
                    "name": "testStopReplicaWithExistingPartitionAndNewerLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.72,
                    "name": "testFencedErrorCausedByBecomeLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.083,
                    "name": "testClearFetchPurgatoryOnStopReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.009,
                    "name": "testStopReplicaWithInexistentPartitionAndPartitionsDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.073,
                    "name": "testFetchFromLeaderAlwaysAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.151,
                    "name": "testFetchMessagesWhenNotFollowerForOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.611,
                    "name": "testIllegalRequiredAcks",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.015,
                    "name": "testStopReplicaWithInexistentPartitionAndPartitionsDeleteAndIOException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.077,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndNewerLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 1.411,
                    "name": "testClearPurgatoryOnBecomingFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.049,
                    "name": "testFetchFollowerNotAllowedForOlderClients",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 1.053,
                    "name": "testOldLeaderLosesMetricsWhenReassignPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.072,
                    "name": "testClearProducePurgatoryOnStopReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.011,
                    "name": "testStopReplicaWithInexistentPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.405,
                    "name": "testHighwaterMarkRelativeDirectoryMapping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.842,
                    "name": "testOldFollowerLosesMetricsWhenReassignPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.079,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndNewerLeaderEpochAndIOException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.074,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndLeaderEpochNotProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.077,
                    "name": "testFollowerFetchWithDefaultSelectorNoForcedHwPropagation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.006,
                    "name": "testUnknownReplicaSelector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.08,
                    "name": "testReceiveOutOfOrderSequenceExceptionWithLogStartOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.075,
                    "name": "testBecomeFollowerWhileOldClientFetchInPurgatory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.058,
                    "name": "testStopReplicaWithOfflinePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.034,
                    "name": "testPreferredReplicaAsFollower",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.005,
                    "name": "testDefaultReplicaSelector",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.08,
                    "name": "testStopReplicaWithExistingPartitionAndOlderLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.078,
                    "name": "testBecomeFollowerWhileNewClientFetchInPurgatory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.091,
                    "name": "testStopReplicaWithDeletePartitionAndExistingPartitionAndDeleteSentinel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.092,
                    "name": "testStopReplicaWithExistingPartitionAndEqualLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.083,
                    "name": "testReadCommittedFetchLimitedAtLSO",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.078,
                    "name": "testStopReplicaWithExistingPartitionAndLeaderEpochNotProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicaManagerTest",
                    "duration": 0.064,
                    "name": "testDelayedFetchIncludesAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicationQuotaManagerTest",
                    "duration": 0.001,
                    "name": "shouldThrottleOnlyDefinedReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicationQuotaManagerTest",
                    "duration": 0.0,
                    "name": "shouldSupportWildcardThrottledReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicationQuotaManagerTest",
                    "duration": 0.001,
                    "name": "shouldExceedQuotaThenReturnBackBelowBoundAsTimePasses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ReplicationQuotasTest",
                    "duration": 16.426,
                    "name": "shouldBootstrapTwoBrokersWithLeaderThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicationQuotasTest",
                    "duration": 7.925,
                    "name": "shouldThrottleOldSegments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ReplicationQuotasTest",
                    "duration": 18.519,
                    "name": "shouldBootstrapTwoBrokersWithFollowerThrottle",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 4.174,
                    "name": "testUnauthorizedThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 2.183,
                    "name": "testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 2.184,
                    "name": "testUnthrottledClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 2.181,
                    "name": "testExemptRequestTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 3.004,
                    "name": "testResponseThrottleTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.RequestQuotaTest",
                    "duration": 2.18,
                    "name": "testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.SaslApiVersionsRequestTest",
                    "duration": 2.193,
                    "name": "testApiVersionsRequestWithUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.SaslApiVersionsRequestTest",
                    "duration": 4.193,
                    "name": "testApiVersionsRequestBeforeSaslHandshakeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.SaslApiVersionsRequestTest",
                    "duration": 3.196,
                    "name": "testApiVersionsRequestAfterSaslHandshakeRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ScramServerStartupTest",
                    "duration": 2.364,
                    "name": "testAuthentications",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 4.37,
                    "name": "testBrokerMetadataOnIdCollision",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 4.226,
                    "name": "testAutoGenerateBrokerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 4.229,
                    "name": "testMultipleLogDirsMetaProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 2.222,
                    "name": "testDisableGeneratedBrokerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 5.434,
                    "name": "testUserConfigAndGeneratedBrokerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateBrokerIdTest",
                    "duration": 4.257,
                    "name": "testConsistentBrokerIdFromUserConfigAndMetaProps",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 8.805,
                    "name": "testAutoGenerateClusterIdForKafkaClusterParallel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 4.278,
                    "name": "testAutoGenerateClusterId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 8.825,
                    "name": "testAutoGenerateClusterIdForKafkaClusterSequential",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 0.329,
                    "name": "testInconsistentBrokerMetadataBetweenMultipleLogDirs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 0.303,
                    "name": "testInconsistentClusterIdFromZookeeperAndFromMetaProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerGenerateClusterIdTest",
                    "duration": 4.258,
                    "name": "testConsistentClusterIdFromZookeeperAndFromMetaProps",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ServerMetricsTest",
                    "duration": 0.004,
                    "name": "testMetricsConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 0.352,
                    "name": "testCleanShutdownAfterFailedStartup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 2.193,
                    "name": "testConsecutiveShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 0.124,
                    "name": "testControllerShutdownDuringSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 3.243,
                    "name": "testCleanShutdownAfterFailedStartupDueToCorruptLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 4.255,
                    "name": "testCleanShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerShutdownTest",
                    "duration": 2.361,
                    "name": "testCleanShutdownWithDeleteTopicEnabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ServerStartupTest",
                    "duration": 2.214,
                    "name": "testBrokerStateRunningAfterZK",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerStartupTest",
                    "duration": 2.288,
                    "name": "testBrokerCreatesZKChroot",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerStartupTest",
                    "duration": 4.183,
                    "name": "testConflictBrokerStartupWithSamePort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerStartupTest",
                    "duration": 3.194,
                    "name": "testConflictBrokerRegistration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ServerStartupTest",
                    "duration": 2.181,
                    "name": "testBrokerSelfAware",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.StopReplicaRequestTest",
                    "duration": 4.194,
                    "name": "testStopReplicaRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.SupportedFeaturesTest",
                    "duration": 0.003,
                    "name": "testIncompatibleFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.SupportedFeaturesTest",
                    "duration": 0.0,
                    "name": "testEmpty",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.ThrottledChannelExpirationTest",
                    "duration": 0.003,
                    "name": "testThrottledChannelDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.ThrottledChannelExpirationTest",
                    "duration": 2.002,
                    "name": "testCallbackInvocationAfterExpiration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.checkpoints.LeaderEpochCheckpointFileTest",
                    "duration": 0.071,
                    "name": "shouldPersistAndOverwriteAndReloadFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.LeaderEpochCheckpointFileTest",
                    "duration": 0.034,
                    "name": "shouldRetainValuesEvenIfCheckpointIsRecreated",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.04,
                    "name": "shouldReturnEmptyMapForEmptyFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.036,
                    "name": "shouldThrowIfVersionIsNotRecognised",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.032,
                    "name": "testLazyOffsetCheckpointFileInvalidLogDir",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.065,
                    "name": "shouldPersistAndOverwriteAndReloadFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.034,
                    "name": "shouldHandleMultipleLines",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.checkpoints.OffsetCheckpointFileTest",
                    "duration": 0.003,
                    "name": "testLazyOffsetCheckpoint",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest",
                    "duration": 22.665,
                    "name": "shouldSurviveFastLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest",
                    "duration": 71.563,
                    "name": "offsetsShouldNotGoBackwards",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest",
                    "duration": 9.249,
                    "name": "shouldFollowLeaderEpochBasicWorkflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest",
                    "duration": 7.57,
                    "name": "shouldNotAllowDivergentLogs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest",
                    "duration": 12.884,
                    "name": "logsShouldNotDivergeOnUncleanLeaderElections",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.009,
                    "name": "shouldFetchLatestEpochOfEmptyCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldNotUpdateEpochAndStartOffsetIfItDidNotChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.001,
                    "name": "shouldDropEntriesBetweenEpochBoundaryWhenRemovingNewest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnLogEndOffsetIfLatestEpochRequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldNotClearAnythingIfOffsetToEarly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldIncreaseAndTrackEpochsAsFollowerReceivesManyMessages",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.002,
                    "name": "shouldTruncateIfMatchingEpochButEarlierStartingOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldNotOverwriteOffsetForALeaderEpochOnceItHasBeenAssigned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.001,
                    "name": "shouldNotOverwriteLogEndOffsetForALeaderEpochOnceItHasBeenAssigned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnUndefinedOffsetIfUndefinedEpochRequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldIncreaseAndTrackEpochsAsLeadersChangeManyTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldSupportEpochsThatDoNotStartFromZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldAddEpochAndMessageOffsetToCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldDropEntriesOnEpochBoundaryWhenRemovingLatestEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldUpdateSavedOffsetWhenOffsetToClearToIsBetweenEpochs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldNotResetEpochHistoryTailIfUndefinedPassed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnUnsupportedIfNoEpochRecorded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldRetainLatestEpochOnClearAllEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.04,
                    "name": "shouldPersistEpochsBetweenInstances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldEnforceMonotonicallyIncreasingEpochs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.001,
                    "name": "shouldNotClearAnythingIfOffsetToFirstOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldGetFirstOffsetOfSubsequentEpochWhenOffsetRequestedForPreviousEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldEnforceOffsetsIncreaseMonotonically",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldClearEarliestOnEmptyCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldPreserveResetOffsetOnClearEarliestIfOneExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldReturnInvalidOffsetIfEpochIsRequestedWhichIsNotCurrentlyTracked",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldEnforceMonotonicallyIncreasingStartOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldFetchEndOffsetOfEmptyCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldRetainLatestEpochOnClearAllEarliestAndUpdateItsOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldClearAllEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldClearLatestOnEmptyCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochFileCacheTest",
                    "duration": 0.0,
                    "name": "shouldNotResetEpochHistoryHeadIfUndefinedPassed",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.epoch.LeaderEpochIntegrationTest",
                    "duration": 6.477,
                    "name": "shouldIncreaseLeaderEpochBetweenLeaderRestarts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochIntegrationTest",
                    "duration": 5.356,
                    "name": "shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.LeaderEpochIntegrationTest",
                    "duration": 3.2,
                    "name": "shouldSendLeaderEpochRequestAndGetAResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.server.epoch.OffsetsForLeaderEpochTest",
                    "duration": 0.007,
                    "name": "shouldGetEpochsFromReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.OffsetsForLeaderEpochTest",
                    "duration": 0.004,
                    "name": "shouldReturnUnknownTopicOrPartitionIfThrown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.server.epoch.OffsetsForLeaderEpochTest",
                    "duration": 0.004,
                    "name": "shouldReturnNoLeaderForPartitionIfThrown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.076,
                    "name": "shouldLimitReadsToMaxMessageLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.007,
                    "name": "shouldParseGroupIdFromBeginningGivenTogether",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.005,
                    "name": "shouldExitOnOffsetWithoutPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.151,
                    "name": "shouldStopWhenOutputCheckErrorFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.003,
                    "name": "shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.049,
                    "name": "shouldResetUnConsumedOffsetsBeforeExit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.002,
                    "name": "shouldParseConfigsFromFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.001,
                    "name": "shouldParseValidConsumerConfigWithAutoOffsetResetLatest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.011,
                    "name": "groupIdsProvidedInDifferentPlacesMustMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.001,
                    "name": "shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.003,
                    "name": "shouldExitOnGroupIdAndPartitionGivenTogether",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.003,
                    "name": "shouldExitOnUnrecognizedNewConsumerOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.0,
                    "name": "shouldParseValidSimpleConsumerValidConfigWithNumericOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.001,
                    "name": "shouldParseValidConsumerConfigWithAutoOffsetResetEarliest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.001,
                    "name": "shouldParseValidSimpleConsumerValidConfigWithStringOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.003,
                    "name": "testCustomPropertyShouldBePassedToConfigureMethod",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.001,
                    "name": "shouldParseValidConsumerValidConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleConsumerTest",
                    "duration": 0.0,
                    "name": "shouldParseValidConsumerConfigWithNoOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.005,
                    "name": "testParseKeyProp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.001,
                    "name": "testValidConfigsBootstrapServer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.001,
                    "name": "testValidConfigsBrokerList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.004,
                    "name": "testInvalidConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.001,
                    "name": "testClientIdOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsoleProducerTest",
                    "duration": 0.001,
                    "name": "testBootstrapServerOverride",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.008,
                    "name": "testDetailedHeaderMatchBody",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.003,
                    "name": "testConfigWithUnrecognizedOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.001,
                    "name": "testBrokerListOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.0,
                    "name": "testConfigBootStrapServer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.001,
                    "name": "testConfigBrokerList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.ConsumerPerformanceTest",
                    "duration": 0.002,
                    "name": "testNonDetailedHeaderMatchBody",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.CustomDeserializerTest",
                    "duration": 0.134,
                    "name": "checkDeserializerTopicIsNotNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.CustomDeserializerTest",
                    "duration": 0.008,
                    "name": "checkFormatterCallDeserializerWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.DumpLogSegmentsTest",
                    "duration": 0.225,
                    "name": "testPrintDataLog",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.DumpLogSegmentsTest",
                    "duration": 0.177,
                    "name": "testDumpIndexMismatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.DumpLogSegmentsTest",
                    "duration": 0.169,
                    "name": "testDumpTimeIndexErrors",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.MirrorMakerIntegrationTest",
                    "duration": 2.216,
                    "name": "testCommaSeparatedRegex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.MirrorMakerIntegrationTest",
                    "duration": 4.205,
                    "name": "testCommitOffsetsRemoveNonExistentTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.MirrorMakerIntegrationTest",
                    "duration": 2.204,
                    "name": "testCommitOffsetsThrowTimeoutException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.MirrorMakerTest",
                    "duration": 0.003,
                    "name": "testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.MirrorMakerTest",
                    "duration": 0.0,
                    "name": "testDefaultMirrorMakerMessageHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.tools.MirrorMakerTest",
                    "duration": 0.0,
                    "name": "testDefaultMirrorMakerMessageHandlerWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.tools.ReplicaVerificationToolTest",
                    "duration": 0.02,
                    "name": "testReplicaBufferVerifyChecksum",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.001,
                    "name": "testParseEmptyArg",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.001,
                    "name": "testMaybeMergeOptionsOverwriteExisting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testParseSingleArg",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testParseArgs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testParseArgsWithMultipleDelimiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.001,
                    "name": "testMaybeMergeOptionsDefaultValueIfNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testParseEmptyArgWithNoDelimiter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.001,
                    "name": "testMaybeMergeOptionsDefaultOverwriteExisting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testParseEmptyArgAsValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CommandLineUtilsTest",
                    "duration": 0.0,
                    "name": "testMaybeMergeOptionsNotOverwriteExisting",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testGenerateUuidAsBase64",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testAbs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testReplaceSuffix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.002,
                    "name": "testCircularIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testReadBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testCsvList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testReadInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.02,
                    "name": "testAtomicGetOrUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.0,
                    "name": "testUrlSafeBase64EncodeUUID",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.002,
                    "name": "testCsvMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.001,
                    "name": "testInLock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.004,
                    "name": "testTryAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.CoreUtilsTest",
                    "duration": 0.001,
                    "name": "testSwallow",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.ExitTest",
                    "duration": 0.009,
                    "name": "shouldAddShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.ExitTest",
                    "duration": 0.001,
                    "name": "shouldHaltImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.ExitTest",
                    "duration": 0.002,
                    "name": "shouldExitImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.ExitTest",
                    "duration": 0.001,
                    "name": "shouldNotInvokeShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.JsonTest",
                    "duration": 0.007,
                    "name": "testParseToWithInvalidJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.JsonTest",
                    "duration": 0.001,
                    "name": "testParseTo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.JsonTest",
                    "duration": 0.004,
                    "name": "testJsonParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.JsonTest",
                    "duration": 0.007,
                    "name": "testEncodeAsBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.JsonTest",
                    "duration": 0.002,
                    "name": "testEncodeAsString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.LoggingTest",
                    "duration": 0.0,
                    "name": "testLog4jControllerIsRegistered",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.LoggingTest",
                    "duration": 0.001,
                    "name": "testLogName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.LoggingTest",
                    "duration": 0.0,
                    "name": "testLogNameOverride",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.PasswordEncoderTest",
                    "duration": 0.013,
                    "name": "testEncoderConfigChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.PasswordEncoderTest",
                    "duration": 0.499,
                    "name": "testEncodeDecodeAlgorithms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.PasswordEncoderTest",
                    "duration": 0.054,
                    "name": "testEncodeDecode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.ReplicationUtilsTest",
                    "duration": 0.16,
                    "name": "testUpdateLeaderAndIsr",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.001,
                    "name": "testMockSchedulerNonPeriodicTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.03,
                    "name": "testUnscheduleProducerTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.001,
                    "name": "testMockSchedulerPeriodicTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.008,
                    "name": "testNonPeriodicTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.001,
                    "name": "testRestart",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.001,
                    "name": "testReentrantTaskInMockScheduler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.013,
                    "name": "testMockSchedulerLocking",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.SchedulerTest",
                    "duration": 0.13,
                    "name": "testPeriodicTask",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.ShutdownableThreadTest",
                    "duration": 0.104,
                    "name": "testShutdownWhenCalledAfterThreadStart",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.ToolsUtilsTest",
                    "duration": 0.007,
                    "name": "testIntegerMetric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.TopicFilterTest",
                    "duration": 0.001,
                    "name": "testWhitelists",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.002,
                    "name": "testJsonObjectIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.048,
                    "name": "testDecodeLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.003,
                    "name": "testAsJsonObject",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.003,
                    "name": "testDecodeDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.003,
                    "name": "testDecodeOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.003,
                    "name": "testDecodeString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testJsonValueToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.0,
                    "name": "testAsJsonObjectOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.0,
                    "name": "testAsJsonArrayOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.002,
                    "name": "testAsJsonArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testJsonValueHashCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testDecodeInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.004,
                    "name": "testDecodeMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.004,
                    "name": "testDecodeSeq",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.0,
                    "name": "testJsonObjectGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.002,
                    "name": "testJsonValueEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testJsonArrayIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testJsonObjectApply",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.json.JsonValueTest",
                    "duration": 0.001,
                    "name": "testDecodeBoolean",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.timer.TimerTaskListTest",
                    "duration": 0.005,
                    "name": "testAll",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.utils.timer.TimerTest",
                    "duration": 0.002,
                    "name": "testAlreadyExpiredTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.utils.timer.TimerTest",
                    "duration": 2.506,
                    "name": "testTaskExpiration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.001,
                    "name": "shouldHaveCorrectPaths",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripChangeNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldThrowFromEncodeOnLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfConstructedWithLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldWriteChangesToTheWritePath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ExtendedAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldHaveCorrectPatternType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zk.FeatureZNodeTest",
                    "duration": 0.101,
                    "name": "testDecodeFailOnInvalidFeatures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.FeatureZNodeTest",
                    "duration": 0.005,
                    "name": "testEncodeDecode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.FeatureZNodeTest",
                    "duration": 0.001,
                    "name": "testDecodeSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.FeatureZNodeTest",
                    "duration": 0.015,
                    "name": "testDecodeFailOnInvalidVersionAndStatus",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.34,
                    "name": "testZNodeChangeHandlerForDataChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.362,
                    "name": "testCreateAndGetTopicPartitionStatesRaw",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.35,
                    "name": "testLogDirGetters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.358,
                    "name": "testSetGetAndDeletePartitionReassignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.358,
                    "name": "testIsrChangeNotificationsDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.338,
                    "name": "testGetDataAndVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.34,
                    "name": "testGetChildren",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.352,
                    "name": "testSetAndGetConsumerOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.336,
                    "name": "testClusterIdMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.354,
                    "name": "testEntityConfigManagementMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.358,
                    "name": "testUpdateLeaderAndIsr",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.367,
                    "name": "testUpdateBrokerInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.353,
                    "name": "testCreateRecursive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.353,
                    "name": "testGetConsumerOffsetNoData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.358,
                    "name": "testDeleteTopicPathMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.362,
                    "name": "testSetTopicPartitionStatesRaw",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.417,
                    "name": "testAclManagementMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.353,
                    "name": "testPreferredReplicaElectionMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.348,
                    "name": "testPropagateLogDir",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.338,
                    "name": "testGetDataAndStat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.336,
                    "name": "testReassignPartitionsInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.371,
                    "name": "testCreateTopLevelPaths",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.466,
                    "name": "testGetAllTopicsInClusterDoesNotTriggerWatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.343,
                    "name": "testIsrChangeNotificationGetters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.353,
                    "name": "testLogDirEventNotificationsDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.35,
                    "name": "testGetLogConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.338,
                    "name": "testBrokerSequenceIdMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.346,
                    "name": "testAclMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.343,
                    "name": "testCreateSequentialPersistentPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.338,
                    "name": "testConditionalUpdatePath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.36,
                    "name": "testGetAllTopicsInClusterTriggersWatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.361,
                    "name": "testDeleteTopicZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.364,
                    "name": "testDeletePath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.38,
                    "name": "testGetBrokerMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.341,
                    "name": "testCreateTokenChangeNotification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.364,
                    "name": "testGetTopicsAndPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.367,
                    "name": "testRegisterBrokerInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.363,
                    "name": "testRetryRegisterBrokerInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.324,
                    "name": "testConsumerOffsetPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.459,
                    "name": "testDeleteRecursiveWithControllerEpochVersionCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.342,
                    "name": "testTopicAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.336,
                    "name": "testControllerManagementMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.364,
                    "name": "testTopicAssignmentMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.765,
                    "name": "testConnectionViaNettyClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.348,
                    "name": "testPropagateIsrChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.351,
                    "name": "testControllerEpochMethods",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.372,
                    "name": "testDeleteRecursive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.365,
                    "name": "testGetTopicPartitionStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.349,
                    "name": "testCreateConfigChangeNotification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.KafkaZkClientTest",
                    "duration": 0.362,
                    "name": "testDelegationTokenMethods",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.001,
                    "name": "shouldHaveCorrectPaths",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripChangeNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldThrowFromEncodeOnNoneLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.001,
                    "name": "shouldWriteChangesToTheWritePath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldHaveCorrectPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.LiteralAclStoreTest",
                    "duration": 0.0,
                    "name": "shouldDecodeResourceUsingTwoPartLogic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zk.ReassignPartitionsZNodeTest",
                    "duration": 0.003,
                    "name": "testDecodeInvalidJson",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ReassignPartitionsZNodeTest",
                    "duration": 0.0,
                    "name": "testEncode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zk.ReassignPartitionsZNodeTest",
                    "duration": 0.001,
                    "name": "testDecodeValidJson",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.235,
                    "name": "testZNodeChangeHandlerForDataChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.23,
                    "name": "testZooKeeperSessionStateMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.448,
                    "name": "testExceptionInBeforeInitializingSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.233,
                    "name": "testGetChildrenExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.345,
                    "name": "testConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.24,
                    "name": "testZNodeChangeHandlerForCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.234,
                    "name": "testGetAclExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.232,
                    "name": "testSessionExpiryDuringClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.234,
                    "name": "testSetAclNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 10.936,
                    "name": "testConnectionLossRequestTermination",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.23,
                    "name": "testExistsNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.229,
                    "name": "testGetDataNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 2.84,
                    "name": "testConnectionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.448,
                    "name": "testBlockOnRequestCompletionFromStateChangeHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.381,
                    "name": "testUnresolvableConnectString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.233,
                    "name": "testGetChildrenNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.242,
                    "name": "testPipelinedGetData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.234,
                    "name": "testZNodeChildChangeHandlerForChildChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.237,
                    "name": "testGetChildrenExistingZNodeWithChildren",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.235,
                    "name": "testSetDataExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.334,
                    "name": "testZNodeChildChangeHandlerForChildChangeNotTriggered",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.234,
                    "name": "testMixedPipeline",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.231,
                    "name": "testGetDataExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.234,
                    "name": "testDeleteExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 1.981,
                    "name": "testSessionExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.228,
                    "name": "testSetDataNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.254,
                    "name": "testConnectionViaNettyClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.232,
                    "name": "testDeleteNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.232,
                    "name": "testExistsExistingZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.231,
                    "name": "testZooKeeperStateChangeRateMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.233,
                    "name": "testZNodeChangeHandlerForDeletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.23,
                    "name": "testGetAclNonExistentZNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "kafka.zookeeper.ZooKeeperClientTest",
                    "duration": 0.44,
                    "name": "testStateChangeHandlerForAuthFailure",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.826,
                    "name": "testPartitionAssignmentStatus[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.16,
                    "name": "testPartitionAssignmentStatus[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.154,
                    "name": "testPartitionAssignmentStatus[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.146,
                    "name": "testPartitionAssignmentStatus[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.141,
                    "name": "testPartitionAssignmentStatus[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.129,
                    "name": "testPartitionAssignmentStatus[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.132,
                    "name": "testPartitionAssignmentStatus[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.12,
                    "name": "testPartitionAssignmentStatus[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.cluster.AssignmentStateTest",
                    "duration": 0.134,
                    "name": "testPartitionAssignmentStatus[8]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 1.237,
                    "name": "testPartitionFullReplicaAssignmentReturnsEmptyAssignmentIfTopicOrPartitionDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.011,
                    "name": "testPartitionReplicaAssignmentForTopicReturnsEmptyMapIfTopicDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.033,
                    "name": "testPreferredReplicaImbalanceMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.011,
                    "name": "testPartitionReplicaAssignmentForTopicReturnsExpectedReplicaAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.026,
                    "name": "testReassignTo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.018,
                    "name": "testPartitionReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.007,
                    "name": "testUpdatePartitionFullReplicaAssignmentUpdatesReplicaAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "unit.kafka.controller.ControllerContextTest",
                    "duration": 0.007,
                    "name": "testPartitionReplicaAssignmentReturnsEmptySeqIfTopicOrPartitionDoesNotExist",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "unit.kafka.utils.ThrottlerTest",
                    "duration": 1.288,
                    "name": "testThrottleDesiredRate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.029,
                    "name": "testWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.004,
                    "name": "testIndentMustBeNonNegative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.043,
                    "name": "testVerifyTypeMismatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.001,
                    "name": "testVerifyTypeMatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.003,
                    "name": "testUnknownEntityType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.014,
                    "name": "testNotNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.011,
                    "name": "testNeverNullWithBlockScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.004,
                    "name": "testNeverNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.004,
                    "name": "testAnotherNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.004,
                    "name": "testNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 1.609,
                    "name": "testInvalidTaggedVersionsNotASubetOfVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.087,
                    "name": "testInvalidNullDefaultForPotentiallyNonNullableArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.04,
                    "name": "testInvalidFieldName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.008,
                    "name": "testInvalidTaggedVersionsWithoutTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.004,
                    "name": "testInvalidFlexibleVersionsRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.009,
                    "name": "testInvalidNullDefaultForInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.005,
                    "name": "testDuplicateTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.007,
                    "name": "testInvalidTaggedVersionsRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.135,
                    "name": "testNullDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.009,
                    "name": "testInvalidTagWithoutTaggedVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.027,
                    "name": "testInvalidNegativeTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.038,
                    "name": "testInvalidSometimesNullableTaggedField",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.081,
                    "name": "testToSnakeCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.003,
                    "name": "testCapitalizeFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.002,
                    "name": "testLowerCaseFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.003,
                    "name": "testFirstIsCapitalized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.002,
                    "name": "stripSuffixTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 1.675,
                    "name": "testDuplicateCommonStructError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.013,
                    "name": "testSingleStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.017,
                    "name": "testReSpecifiedCommonStructError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.014,
                    "name": "testCommonStructs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.008,
                    "name": "testAlwaysTrueConditionalWithAlwaysEmitBlockScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.005,
                    "name": "testLowerRangeCheckWithElse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.006,
                    "name": "testFullRangeCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.002,
                    "name": "testAlwaysTrueConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.002,
                    "name": "testAlwaysFalseConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.011,
                    "name": "testLowerRangeCheckWithIfMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.004,
                    "name": "testUpperRangeCheckWithIfNotMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.003,
                    "name": "testUpperRangeCheckWithIfMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.003,
                    "name": "testAnotherAlwaysFalseConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.004,
                    "name": "testAllowMembershipCheckAlwaysFalseFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.003,
                    "name": "testLowerRangeCheckWithIfNotMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.003,
                    "name": "testUpperRangeCheckWithElse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.003,
                    "name": "testIntersections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.001,
                    "name": "testSubtract",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testRoundTrips",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testVersionsParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testContains",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.89,
                    "name": "testLog4jAppendsWithSyncSendWithoutIgnoringExceptionsShouldNotThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.7,
                    "name": "testLog4jAppendsWithRealProducerConfigWithSyncSendAndNotIgnoringExceptionsShouldThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.044,
                    "name": "testLog4jAppends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.013,
                    "name": "testSetSaslMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.013,
                    "name": "testJaasConfigNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.005,
                    "name": "testKafkaLog4jConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.007,
                    "name": "testLog4jAppendsWithSyncSendAndSimulateProducerFailShouldThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.154,
                    "name": "testLog4jAppendsWithRealProducerConfigWithSyncSendShouldNotThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.01,
                    "name": "testSaslMechanismNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.003,
                    "name": "testSetJaasConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.048,
                    "name": "shouldPunctuateIfEvenTimeAdvances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.009,
                    "name": "shouldFlushStoreForFirstInput",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.007,
                    "name": "shouldUpdateStoreForNewKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.006,
                    "name": "shouldNotUpdateStoreForLargerValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.008,
                    "name": "shouldNotUpdateStoreForSmallerValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.docs.DeveloperGuideTesting",
                    "duration": 0.007,
                    "name": "shouldPunctuateIfWallClockTimeAdvances",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.examples.wordcount.WordCountDemoTest",
                    "duration": 1.935,
                    "name": "testOneWord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.examples.wordcount.WordCountDemoTest",
                    "duration": 2.397,
                    "name": "testCountListOfWords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.examples.wordcount.WordCountProcessorTest",
                    "duration": 0.52,
                    "name": "test",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.examples.wordcount.WordCountTransformerTest",
                    "duration": 0.012,
                    "name": "test",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes",
                    "duration": 17.458,
                    "name": "testShouldCountClicksPerRegionWithNamedRepartitionTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes",
                    "duration": 7.496,
                    "name": "testShouldCountClicksPerRegionJava",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes",
                    "duration": 8.197,
                    "name": "testShouldCountClicksPerRegion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.03,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaJoin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.021,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaCogroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.003,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.005,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaCogroupSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.004,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaAggregate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.095,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaProperties",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.TopologyTest",
                    "duration": 0.024,
                    "name": "shouldBuildIdenticalTopologyInJavaNScalaTransform",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.WordCountTest",
                    "duration": 28.149,
                    "name": "testShouldCountWordsMaterialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.WordCountTest",
                    "duration": 15.278,
                    "name": "testShouldCountWordsJava",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.WordCountTest",
                    "duration": 16.242,
                    "name": "testShouldCountWords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ConsumedTest",
                    "duration": 0.059,
                    "name": "Create a Consumed should create a Consumed with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ConsumedTest",
                    "duration": 0.002,
                    "name": "Create a Consumed with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ConsumedTest",
                    "duration": 0.001,
                    "name": "Create a Consumed with timestampExtractor should create a Consumed with Serdes and timestampExtractor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ConsumedTest",
                    "duration": 0.001,
                    "name": "Create a Consumed with resetPolicy should create a Consumed with Serdes and resetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.GroupedTest",
                    "duration": 0.002,
                    "name": "Create a Grouped should create a Grouped with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.GroupedTest",
                    "duration": 0.001,
                    "name": "Create a Grouped with repartition topic name should create a Grouped with Serdes, and repartition topic name",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.JoinedTest",
                    "duration": 0.004,
                    "name": "Create a Joined should create a Joined with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.JoinedTest",
                    "duration": 0.001,
                    "name": "Create a Joined should create a Joined with Serdes and repartition topic name",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.008,
                    "name": "filter a KStream should filter records satisfying the predicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.006,
                    "name": "filterNot a KStream should filter records not satisfying the predicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.007,
                    "name": "foreach a KStream should run foreach actions on records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.007,
                    "name": "peek a KStream should run peek actions on records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.005,
                    "name": "selectKey a KStream should select a new key",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.01,
                    "name": "repartition should repartition a KStream",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.744,
                    "name": "join 2 KStreams should join correctly records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.008,
                    "name": "transform a KStream should transform correctly records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.013,
                    "name": "flatTransform a KStream should flatTransform correctly records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.02,
                    "name": "flatTransformValues a KStream should correctly flatTransform values in records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.014,
                    "name": "flatTransformValues with key in a KStream should correctly flatTransformValues in records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KStreamTest",
                    "duration": 0.932,
                    "name": "join 2 KStreamToTables should join correctly records",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 0.893,
                    "name": "filter a KTable should filter records satisfying the predicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 3.105,
                    "name": "filterNot a KTable should filter records not satisfying the predicate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 1.201,
                    "name": "join 2 KTables should join correctly records",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 1.913,
                    "name": "join 2 KTables with a Materialized should join correctly records and state store",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 3.22,
                    "name": "windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 1.212,
                    "name": "windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 1.395,
                    "name": "session windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.KTableTest",
                    "duration": 1.407,
                    "name": "non-windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.MaterializedTest",
                    "duration": 0.001,
                    "name": "Create a Materialized should create a Materialized with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.MaterializedTest",
                    "duration": 0.001,
                    "name": "Create a Materialize with a store name should create a Materialized with Serdes and a store name",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.MaterializedTest",
                    "duration": 0.001,
                    "name": "Create a Materialize with a window store supplier should create a Materialized with Serdes and a store supplier",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.MaterializedTest",
                    "duration": 0.001,
                    "name": "Create a Materialize with a key value store supplier should create a Materialized with Serdes and a store supplier",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.MaterializedTest",
                    "duration": 0.0,
                    "name": "Create a Materialize with a session store supplier should create a Materialized with Serdes and a store supplier",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ProducedTest",
                    "duration": 0.002,
                    "name": "Create a Produced should create a Produced with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.ProducedTest",
                    "duration": 0.002,
                    "name": "Create a Produced with streamPartitioner should create a Produced with Serdes and streamPartitioner",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.RepartitionedTest",
                    "duration": 0.001,
                    "name": "Create a Repartitioned should create a Repartitioned with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.RepartitionedTest",
                    "duration": 0.001,
                    "name": "Create a Repartitioned with numPartitions should create a Repartitioned with Serdes and numPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.RepartitionedTest",
                    "duration": 0.0,
                    "name": "Create a Repartitioned with topicName should create a Repartitioned with Serdes and topicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.RepartitionedTest",
                    "duration": 0.002,
                    "name": "Create a Repartitioned with streamPartitioner should create a Repartitioned with Serdes, numPartitions, topicName and streamPartitioner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.RepartitionedTest",
                    "duration": 0.002,
                    "name": "Create a Repartitioned with numPartitions, topicName, and streamPartitioner should create a Repartitioned with Serdes, numPartitions, topicName and streamPartitioner",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.StreamJoinedTest",
                    "duration": 0.004,
                    "name": "Create a StreamJoined should create a StreamJoined with Serdes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.StreamJoinedTest",
                    "duration": 0.006,
                    "name": "Create a StreamJoined should create a StreamJoined with Serdes and Store Suppliers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.StreamJoinedTest",
                    "duration": 0.001,
                    "name": "Create a StreamJoined should create a StreamJoined with Serdes and a State Store name",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.014,
                    "name": "Suppressed.untilWindowCloses should produce the correct suppression",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.004,
                    "name": "Suppressed.untilTimeLimit should produce the correct suppression",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.003,
                    "name": "BufferConfig.maxRecords should produce the correct buffer config",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.001,
                    "name": "BufferConfig.maxBytes should produce the correct buffer config",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.001,
                    "name": "BufferConfig.unbounded should produce the correct buffer config",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.scala.kstream.SuppressedTest",
                    "duration": 0.002,
                    "name": "BufferConfig should support very long chains of factory methods",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.564,
                    "name": "shouldStoreAndReturnStateStores",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.009,
                    "name": "shouldCaptureOutputRecordsUsingTo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.006,
                    "name": "shouldCaptureOutputRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.003,
                    "name": "fullConstructorShouldSetAllExpectedAttributes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.002,
                    "name": "shouldCaptureCommitsAndAllowReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.002,
                    "name": "shouldThrowIfForwardedWithDeprecatedChildName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.002,
                    "name": "shouldThrowIfForwardedWithDeprecatedChildIndex",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.003,
                    "name": "shouldCaptureApplicationAndRecordMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.001,
                    "name": "shouldCaptureRecordsOutputToChildByName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockProcessorContextTest",
                    "duration": 0.011,
                    "name": "shouldCapturePunctuator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.MockTimeTest",
                    "duration": 0.0,
                    "name": "shouldGetNanosAsMillis",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockTimeTest",
                    "duration": 0.0,
                    "name": "shouldSetStartTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockTimeTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNegativeSleep",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.MockTimeTest",
                    "duration": 0.001,
                    "name": "shouldAdvanceTimeOnSleep",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.957,
                    "name": "testNonUsedOutputTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.083,
                    "name": "testEmptyTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.046,
                    "name": "testStartTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.013,
                    "name": "testNegativeAdvance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.014,
                    "name": "shouldNotAllowToCreateWithNullDriver",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.011,
                    "name": "testDuration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.016,
                    "name": "testOutputToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.016,
                    "name": "testValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.021,
                    "name": "testTimestampAutoAdvance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.012,
                    "name": "testOutputWrongSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.012,
                    "name": "shouldNotAllowToCreateOutputTopicWithNullTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.021,
                    "name": "testWrongSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.018,
                    "name": "testKeyValuesToMapWithNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.009,
                    "name": "testNonExistingOutputTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.013,
                    "name": "testMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.025,
                    "name": "testKeyValueList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.009,
                    "name": "shouldNotAllowToCreateOutputWithNullDriver",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.027,
                    "name": "testValueList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.016,
                    "name": "testRecordList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.009,
                    "name": "testNonExistingInputTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.019,
                    "name": "testKeyValuesToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.018,
                    "name": "testRecordsToList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.019,
                    "name": "testKeyValueListDuration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.007,
                    "name": "testInputToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.02,
                    "name": "testTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.012,
                    "name": "testWithHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.011,
                    "name": "testKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TestTopicsTest",
                    "duration": 0.008,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.466,
                    "name": "shouldCloseProcessor[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.057,
                    "name": "shouldFeedStoreFromGlobalKTable[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.626,
                    "name": "shouldCleanUpPersistentStateStoresOnClose[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.003,
                    "name": "shouldThrowForUnknownTopicDeprecated[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.014,
                    "name": "shouldThrowPatternNotValidForTopicNameException[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.048,
                    "name": "shouldEnqueueLaterOutputsAfterEarlierOnes[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.027,
                    "name": "shouldUseSourceSpecificDeserializersDeprecated[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.031,
                    "name": "shouldPunctuateIfEvenTimeAdvances[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.006,
                    "name": "shouldInitProcessor[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.003,
                    "name": "shouldThrowForUnknownTopic[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.023,
                    "name": "shouldPunctuateOnStreamsTime[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.542,
                    "name": "shouldCaptureGlobalTopicNameIfWrittenInto[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.126,
                    "name": "shouldThrowIfInMemoryBuiltInStoreIsAccessedWithUntypedMethod[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.018,
                    "name": "shouldProcessFromSourcesThatMatchMultiplePattern[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldPopulateGlobalStore[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.072,
                    "name": "shouldThrowIfPersistentBuiltInStoreIsAccessedWithUntypedMethod[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldAllowPrePopulatingStatesStoresWithCachingEnabled[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.176,
                    "name": "shouldReturnCorrectPersistentStoreTypeOnly[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.012,
                    "name": "shouldRespectTaskIdling[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldUseSourceSpecificDeserializers[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldReturnAllStores[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldNotCreateStateDirectoryForStatelessTopology[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.018,
                    "name": "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldReturnAllStoresNames[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldPassRecordHeadersIntoSerializersAndDeserializers[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldProcessConsumerRecordList[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldUseSinkSpecificSerializers[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldFlushStoreForFirstInput[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldProcessFromSourceThatMatchPattern[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.012,
                    "name": "shouldCaptureSinkTopicNamesIfWrittenInto[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldUpdateStoreForNewKey[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldSendRecordViaCorrectSourceTopicDeprecated[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldPunctuateOnWallClockTime[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.006,
                    "name": "shouldSetRecordMetadata[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.009,
                    "name": "shouldNotUpdateStoreForLargerValue[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.016,
                    "name": "shouldReturnCorrectInMemoryStoreTypeOnly[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.003,
                    "name": "shouldThrowForMissingTime[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.78,
                    "name": "shouldCaptureInternalTopicNamesIfWrittenInto[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldPunctuateOnWallClockTimeDeprecated[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldProcessRecordForTopic[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldForwardRecordsFromSubtopologyToSubtopology[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldNotUpdateStoreForSmallerValue[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.362,
                    "name": "shouldCreateStateDirectoryForStatefulTopology[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.01,
                    "name": "shouldPunctuateIfWallClockTimeAdvances[Eos enabled = true]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.003,
                    "name": "shouldCloseProcessor[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.457,
                    "name": "shouldFeedStoreFromGlobalKTable[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.567,
                    "name": "shouldCleanUpPersistentStateStoresOnClose[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.001,
                    "name": "shouldThrowForUnknownTopicDeprecated[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldThrowPatternNotValidForTopicNameException[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.016,
                    "name": "shouldEnqueueLaterOutputsAfterEarlierOnes[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.011,
                    "name": "shouldUseSourceSpecificDeserializersDeprecated[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.012,
                    "name": "shouldPunctuateIfEvenTimeAdvances[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldInitProcessor[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.001,
                    "name": "shouldThrowForUnknownTopic[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.014,
                    "name": "shouldPunctuateOnStreamsTime[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.491,
                    "name": "shouldCaptureGlobalTopicNameIfWrittenInto[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.011,
                    "name": "shouldThrowIfInMemoryBuiltInStoreIsAccessedWithUntypedMethod[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldProcessFromSourcesThatMatchMultiplePattern[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldPopulateGlobalStore[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.172,
                    "name": "shouldThrowIfPersistentBuiltInStoreIsAccessedWithUntypedMethod[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldAllowPrePopulatingStatesStoresWithCachingEnabled[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.339,
                    "name": "shouldReturnCorrectPersistentStoreTypeOnly[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.011,
                    "name": "shouldRespectTaskIdling[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldUseSourceSpecificDeserializers[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldReturnAllStores[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldNotCreateStateDirectoryForStatelessTopology[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.011,
                    "name": "shouldApplyGlobalUpdatesCorrectlyInRecursiveTopologies[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldReturnAllStoresNames[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldPassRecordHeadersIntoSerializersAndDeserializers[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldProcessConsumerRecordList[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldUseSinkSpecificSerializers[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldFlushStoreForFirstInput[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldProcessFromSourceThatMatchPattern[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldCaptureSinkTopicNamesIfWrittenInto[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldUpdateStoreForNewKey[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.006,
                    "name": "shouldSendRecordViaCorrectSourceTopicDeprecated[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldPunctuateOnWallClockTime[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.004,
                    "name": "shouldSetRecordMetadata[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.006,
                    "name": "shouldNotUpdateStoreForLargerValue[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.011,
                    "name": "shouldReturnCorrectInMemoryStoreTypeOnly[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.001,
                    "name": "shouldThrowForMissingTime[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 1.329,
                    "name": "shouldCaptureInternalTopicNamesIfWrittenInto[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldPunctuateOnWallClockTimeDeprecated[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.007,
                    "name": "shouldProcessRecordForTopic[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.005,
                    "name": "shouldForwardRecordsFromSubtopologyToSubtopology[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.008,
                    "name": "shouldNotUpdateStoreForSmallerValue[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.285,
                    "name": "shouldCreateStateDirectoryForStatefulTopology[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.TopologyTestDriverTest",
                    "duration": 0.006,
                    "name": "shouldPunctuateIfWallClockTimeAdvances[Eos enabled = false]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.172,
                    "name": "shouldReturnIsOpen",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.005,
                    "name": "shouldDeleteAndReturnPlainValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldReturnName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.0,
                    "name": "shouldPutWithUnknownTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.002,
                    "name": "shouldPutAllWithUnknownTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.0,
                    "name": "shouldReturnIsPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.0,
                    "name": "shouldPutIfAbsentWithUnknownTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldForwardClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldForwardFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.KeyValueStoreFacadeTest",
                    "duration": 0.017,
                    "name": "shouldForwardInit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.106,
                    "name": "shouldReturnIsOpen",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.0,
                    "name": "shouldReturnName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.004,
                    "name": "shouldPutWithUnknownTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldPutWindowStartTimestampWithUnknownTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldReturnIsPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldForwardClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.001,
                    "name": "shouldForwardFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.internals.WindowStoreFacadeTest",
                    "duration": 0.012,
                    "name": "shouldForwardInit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.029,
                    "name": "shouldCreateConsumerRecordsFromKeyValuePairs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicNameWithNullKeyAndDefaultTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicNameWithDefaultTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicNameWithNullKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateNullKeyConsumerRecordWithOtherTopicNameAndTimestampWithTimetamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateConsumerRecordWithTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowToCreateTopicWithNullHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicNameWithDefaultTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicNameWithNullKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateNullKeyConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateConsumerRecordWithOtherTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldAdvanceTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicNameWithKeyValuePairs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.002,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicNameWithKeyValuePairsAndCustomTimestamps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicNameWithKeyValuePairs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateConsumerRecordWithOtherTopicNameAndTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicNameWithKeyValuePairsAndCustomTimestamps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowToCreateTopicWithNullTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.001,
                    "name": "shouldCreateConsumerRecordsFromKeyValuePairsWithCustomTimestampAndIncrementsAndNotAdvanceTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateNullKeyConsumerRecordWithTimestampWithTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldRequireCustomTopicNameIfNotDefaultFactoryTopicNameWithNullKeyAndDefaultTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.ConsumerRecordFactoryTest",
                    "duration": 0.0,
                    "name": "shouldCreateConsumerRecordsFromKeyValuePairsWithTimestampAndIncrements",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.01,
                    "name": "shouldNotAllowNullProducerRecordForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfKeyIsDifferentWithNullForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullReverseForCompareValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfValueIsEqualForCompareValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullExpectedRecordForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfTimestampDifferentWithNullReverseForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.002,
                    "name": "shouldNotAllowNullProducerRecordWithExpectedRecordForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullReversForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfKeyAndValueIsEqualWithNullForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfValueAndTimestampIsEqualWithNullForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.002,
                    "name": "shouldFailIfKeyIsDifferentForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfTimestampIsDifferentForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueIsEqualForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullProducerRecordForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueIsEqualWithNullForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfValueAndTimestampIsEqualForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullExpectedRecordForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullReversForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullExpectedRecordForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentForCompareValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfValueIsEqualForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullProducerRecordWithExpectedRecordForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullProducerRecordWithExpectedRecordForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueAndTimestampIsEqualForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfValueIsEqualWithNullForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfValueAndTimestampIsEqualWithNullForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullReversForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullReversForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueIsEqualForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullProducerRecordForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfValueIsEqualWithNullForCompareValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullReverseForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullReverseForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfTimestampIsDifferentForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueAndTimestampIsEqualWithNullForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullProducerRecordWithExpectedRecordForCompareValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldNotAllowNullExpectedRecordForCompareValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullReversForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldNotAllowNullProducerRecordForCompareKeyValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullReversForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfKeyAndValueAndTimestampIsEqualForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfKeyIsDifferentWithNullReversForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldPassIfKeyAndValueIsEqualWithNullForCompareKeyValueWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfKeyIsDifferentWithNullForCompareKeyValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldPassIfValueAndTimestampIsEqualForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.0,
                    "name": "shouldFailIfValueIsDifferentWithNullReversForCompareKeyValueTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.OutputVerifierTest",
                    "duration": 0.001,
                    "name": "shouldFailIfValueIsDifferentWithNullReverseForCompareValueTimestampWithProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.045,
                    "name": "testConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.013,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.002,
                    "name": "testInvalidRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.001,
                    "name": "testPartialConstructorEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.104,
                    "name": "testMultiFieldMatcher",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.001,
                    "name": "testFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.005,
                    "name": "testProducerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.streams.test.TestRecordTest",
                    "duration": 0.001,
                    "name": "testEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 2.548,
                    "name": "testConfigureClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.393,
                    "name": "testNoMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.006,
                    "name": "testConfigureBadUrl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.004,
                    "name": "testConfigureMissingPeriod",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.023,
                    "name": "testClientError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.022,
                    "name": "testServerError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.tools.PushHttpMetricsReporterTest",
                    "duration": 0.287,
                    "name": "testMetricValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 6.006,
                    "name": "testAgentCreateWorkers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.288,
                    "name": "testAgentGetStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.296,
                    "name": "testAgentGetUptime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.2,
                    "name": "testAgentStartShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.284,
                    "name": "testCreateExpiredWorkerIsNotScheduled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.194,
                    "name": "testAgentProgrammaticShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.285,
                    "name": "testDestroyWorkers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.302,
                    "name": "testKiboshFaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.213,
                    "name": "testAgentExecWithTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.175,
                    "name": "testAgentExecWithNormalExit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.205,
                    "name": "testWorkerCompletions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.agent.AgentTest",
                    "duration": 0.23,
                    "name": "testAgentFinishesTasks",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.basic.BasicPlatformTest",
                    "duration": 0.005,
                    "name": "testCreateBasicPlatform",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.JsonSerializationTest",
                    "duration": 0.139,
                    "name": "testDeserializationDoesNotProduceNulls",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.JsonUtilTest",
                    "duration": 1.607,
                    "name": "testObjectFromCommandLineArgument",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.JsonUtilTest",
                    "duration": 0.001,
                    "name": "testOpenBraceComesFirst",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.StringExpanderTest",
                    "duration": 0.003,
                    "name": "testExpansions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.StringExpanderTest",
                    "duration": 0.001,
                    "name": "testNoExpansionNeeded",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.StringFormatterTest",
                    "duration": 0.002,
                    "name": "testDurationString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.StringFormatterTest",
                    "duration": 0.002,
                    "name": "testDateString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.StringFormatterTest",
                    "duration": 0.002,
                    "name": "testPrettyPrintGrid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.TopologyTest",
                    "duration": 0.009,
                    "name": "testAgentNodeNames",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.03,
                    "name": "testCreatesNotExistingTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.001,
                    "name": "testCreateZeroTopicsDoesNothing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.0,
                    "name": "testCreateNonExistingTopicsWithZeroTopicsDoesNothing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.004,
                    "name": "testCreateTopicsFailsIfAtLeastOneTopicExists",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.004,
                    "name": "testCreatesOneTopicVerifiesOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.0,
                    "name": "testCommonConfigOverwritesDefaultProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.0,
                    "name": "testClientConfigOverwritesBothDefaultAndCommonConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.009,
                    "name": "testVerifyTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.001,
                    "name": "testExistingTopicsNotCreated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.003,
                    "name": "testGetMatchingTopicPartitionsCorrectlyMatchesExactTopicName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.002,
                    "name": "testCreateRetriesOnTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.001,
                    "name": "testExistingTopicsMustHaveRequestedNumberOfPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.001,
                    "name": "testAddConfigsToPropertiesAddsAllConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.003,
                    "name": "testGetMatchingTopicPartitionsCorrectlyMatchesTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.common.WorkerUtilsTest",
                    "duration": 0.0,
                    "name": "testCreateOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorClientTest",
                    "duration": 0.386,
                    "name": "testPrettyPrintTaskInfo",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 1.512,
                    "name": "testTaskRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 1.592,
                    "name": "testTaskDestruction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.003,
                    "name": "testTasksRequestMatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 3.452,
                    "name": "testWorkersExitingAtDifferentTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 3.353,
                    "name": "testAgentFailureAndTaskExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 2.456,
                    "name": "testTaskDistribution",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.251,
                    "name": "testTaskRequestWithOldStartMsGetsUpdated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.572,
                    "name": "testNetworkPartitionFault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.231,
                    "name": "testTaskRequestWithFutureStartMsDoesNotGetRun",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 1.598,
                    "name": "testTaskCancellation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 2.311,
                    "name": "testCreateTask",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 1.335,
                    "name": "testTasksRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.119,
                    "name": "testCoordinatorStatus",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.coordinator.CoordinatorTest",
                    "duration": 0.121,
                    "name": "testCoordinatorUptime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.001,
                    "name": "testToResponseInvalidRequestException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.003,
                    "name": "testToResponseJsonMappingException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.002,
                    "name": "testToResponseNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.0,
                    "name": "testToExceptionClassNotFoundException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.002,
                    "name": "testToResponseInvalidTypeIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.0,
                    "name": "testToExceptionNotFoundException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.001,
                    "name": "testToResponseUnknownException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.0,
                    "name": "testToExceptionSerializationException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.001,
                    "name": "testToResponseClassNotFoundException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.001,
                    "name": "testToResponseSerializationException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.rest.RestExceptionMapperTest",
                    "duration": 0.0,
                    "name": "testToExceptionRuntimeException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.task.TaskSpecTest",
                    "duration": 0.184,
                    "name": "testTaskSpecSerialization",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.ConsumeBenchSpecTest",
                    "duration": 0.015,
                    "name": "testMaterializeTopicsWithSomePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ConsumeBenchSpecTest",
                    "duration": 0.001,
                    "name": "testMaterializeTopicsWithNoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ConsumeBenchSpecTest",
                    "duration": 0.004,
                    "name": "testInvalidTopicNameRaisesExceptionInMaterialize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.ExternalCommandWorkerTest",
                    "duration": 0.04,
                    "name": "testProcessWithFailedExit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ExternalCommandWorkerTest",
                    "duration": 0.005,
                    "name": "testProcessNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ExternalCommandWorkerTest",
                    "duration": 0.024,
                    "name": "testProcessForceKillTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ExternalCommandWorkerTest",
                    "duration": 0.009,
                    "name": "testProcessStop",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.ExternalCommandWorkerTest",
                    "duration": 0.01,
                    "name": "testProcessWithNormalExit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.HistogramTest",
                    "duration": 0.002,
                    "name": "testHistogramPercentiles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.HistogramTest",
                    "duration": 0.0,
                    "name": "testHistogramSamples",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.HistogramTest",
                    "duration": 0.0,
                    "name": "testHistogramAverage",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.006,
                    "name": "testRandomComponentPayloadGeneratorErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.007,
                    "name": "testConstantPayloadGenerator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.002,
                    "name": "testSequentialPayloadGenerator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.0,
                    "name": "testNullPayloadGenerator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.036,
                    "name": "testUniformRandomPayloadGenerator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.003,
                    "name": "testPayloadIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.001,
                    "name": "testUniformRandomPayloadGeneratorPaddingBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.PayloadGeneratorTest",
                    "duration": 0.009,
                    "name": "testRandomComponentPayloadGenerator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.ThrottleTest",
                    "duration": 0.003,
                    "name": "testThrottle",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.TimeIntervalTransactionsGeneratorTest",
                    "duration": 0.012,
                    "name": "testCommitsTransactionAfterIntervalPasses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.trogdor.workload.TopicsSpecTest",
                    "duration": 0.002,
                    "name": "testPartitionNumbers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.TopicsSpecTest",
                    "duration": 0.004,
                    "name": "testMaterialize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.trogdor.workload.TopicsSpecTest",
                    "duration": 0.023,
                    "name": "testPartitionsSpec",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        }
    ]
}