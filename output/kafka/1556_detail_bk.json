{
    "_class": "hudson.tasks.junit.TestResult",
    "suites": [
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ApiVersionsTest",
                    "duration": 0.007,
                    "name": "testMaxUsableProduceMagic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.007,
                    "name": "testResolveDnsLookupResolveCanonicalBootstrapServers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testFilterPreferredAddresses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.037,
                    "name": "testResolveUnknownHostException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.002,
                    "name": "testOnlyBadHostname",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testInvalidConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.0,
                    "name": "testResolveDnsLookupAllIps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testResolveDnsLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testParseAndValidateAddresses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.044,
                    "name": "testParseAndValidateAddressesWithReverseLookup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClientUtilsTest",
                    "duration": 0.001,
                    "name": "testNoPort",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testIsPreparingConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testNodeWithNewHostname",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testHostResolveChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testAuthorizationFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testMultipleIPsWithDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testThrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testExponentialReconnectBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testRemoveNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testSingleIPWithUseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testMultipleIPsWithUseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testMultipleNodeConnectionStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testClusterConnectionStateChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.001,
                    "name": "testMaxReconnectBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.ClusterConnectionStatesTest",
                    "duration": 0.0,
                    "name": "testSingleIPWithDefault",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.CommonClientConfigsTest",
                    "duration": 0.003,
                    "name": "testExponentialBackoffDefaults",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.002,
                    "name": "testSessionless",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.002,
                    "name": "testVerifyFullFetchResponsePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testIncrementals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testIncrementalPartitionRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.003,
                    "name": "testFindMissing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.FetchSessionHandlerTest",
                    "duration": 0.001,
                    "name": "testDoubleBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.007,
                    "name": "testCompleteNextThrowsIfNoInflights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.001,
                    "name": "testCompleteLastSentThrowsIfNoInFlights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 2.0,
                    "name": "testCompleteNext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.002,
                    "name": "testCompleteLastSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.264,
                    "name": "testClearAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.InFlightRequestsTest",
                    "duration": 0.007,
                    "name": "testTimedOutNodes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.MetadataCacheTest",
                    "duration": 0.001,
                    "name": "testMissingLeaderEndpoint",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.223,
                    "name": "testTimeToNextUpdateRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 1.997,
                    "name": "testClusterCopy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.021,
                    "name": "testMetadataTopicErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.016,
                    "name": "testPartialMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.004,
                    "name": "testInvalidTopicError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.009,
                    "name": "testOutOfBandEpochUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.009,
                    "name": "testUpdateLastEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testUpdateMetadataAllowedImmediatelyAfterBootstrap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testFailedUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.007,
                    "name": "testRequestUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.004,
                    "name": "testTopicAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testClusterListenerGetsNotifiedOfUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testStaleMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.014,
                    "name": "testMetadataMerge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.008,
                    "name": "testLeaderMetadataInconsistentWithBrokerMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.003,
                    "name": "testMetadataUpdateAfterClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.007,
                    "name": "testRejectOldMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.005,
                    "name": "testIgnoreLeaderEpochInOlderMetadataResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testRequestVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.003,
                    "name": "testTimeToNextUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.002,
                    "name": "testNoEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.MetadataTest",
                    "duration": 0.004,
                    "name": "testNodeIfOffline",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.005,
                    "name": "testDefaultRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.004,
                    "name": "testSimpleRequestResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.004,
                    "name": "testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testUnsupportedVersionDuringInternalMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.003,
                    "name": "testDisconnectDuringUserMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayDisconnectedWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testLeastLoadedNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testConnectionDelayConnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.006,
                    "name": "testAuthenticationFailureWithInFlightMetadataRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testUnsupportedApiVersionsRequestWithoutVersionProvidedByTheBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayConnectedWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testSimpleRequestResponseWithNoBrokerDiscovery",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testThrottlingNotEnabledForConnectionToOlderBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testSimpleRequestResponseWithStaticNodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testLeastLoadedNodeConsidersThrottledConnections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testClientDisconnectAfterInternalApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testCallDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.035,
                    "name": "testDnsLookupFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testConnectionDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.002,
                    "name": "testConnectionThrottling",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testServerDisconnectAfterInternalApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testConnectionDelayWithNoExponentialBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.004,
                    "name": "testCorrelationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.0,
                    "name": "testSendToUnreadyNode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.001,
                    "name": "testConnectionDelayDisconnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NetworkClientTest",
                    "duration": 0.003,
                    "name": "testDisconnectWithMultipleInFlights",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.002,
                    "name": "testConstructionFromApiVersionsResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testLatestUsableVersionOutOfRangeHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testLatestUsableVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testUsableVersionCalculationNoKnownVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.003,
                    "name": "testVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testUnsupportedVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testLatestUsableVersionOutOfRangeLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.0,
                    "name": "testLatestUsableVersionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testUnknownApiVersionsToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.NodeApiVersionsTest",
                    "duration": 0.001,
                    "name": "testUsableVersionLatestVersions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.018,
                    "name": "shouldGetAllEntries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.002,
                    "name": "shouldImplementHashCodeProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.005,
                    "name": "shouldImplementToStringProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.002,
                    "name": "shouldReturnNullOnGetUnknownEntry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.001,
                    "name": "shouldImplementEqualsProperly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.ConfigTest",
                    "duration": 0.001,
                    "name": "shouldGetEntry",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.105,
                    "name": "testPartitionMissingInResponseErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.001,
                    "name": "testPartitionLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.001,
                    "name": "testTopLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.0,
                    "name": "testNoErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest",
                    "duration": 0.002,
                    "name": "testPartitionMissingInRequestErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.028,
                    "name": "testGetOrCreateListValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.357,
                    "name": "testOffsetCommitNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.058,
                    "name": "testListOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.021,
                    "name": "testIncrementalAlterConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.012,
                    "name": "testDescribeConsumerGroupNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.021,
                    "name": "testCreateTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.416,
                    "name": "testListConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.008,
                    "name": "testDescribeNonConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.019,
                    "name": "testAlterReplicaLogDirsUnrequested",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.021,
                    "name": "testDeleteRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.112,
                    "name": "testConnectionFailureOnMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.116,
                    "name": "testDefaultApiTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.001,
                    "name": "testGetSubLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.016,
                    "name": "testDeleteConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testInvalidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.311,
                    "name": "testAlterConsumerGroupOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.015,
                    "name": "testDescribeAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.206,
                    "name": "testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testDeleteConsumerGroupOffsetsFindCoordinatorNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testRequestTimeoutExceedingDefaultApiTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testCreateTopicsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testListOffsetsMetadataNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.106,
                    "name": "testCreateTopicsHandleNotControllerException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testEqualsOfClientQuotaFilterComponent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.001,
                    "name": "testPrettyPrintException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.015,
                    "name": "testDescribeMultipleConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.12,
                    "name": "testAlterPartitionReassignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testDescribeConsumerGroupsWithAuthorizedOperationsOmitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 1.007,
                    "name": "testTimeoutWithoutMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.207,
                    "name": "testDeleteConsumerGroupOffsetsFindCoordinatorRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testListConsumerGroupOffsetsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDeleteRecordsTopicAuthorizationError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.009,
                    "name": "testAlterClientQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.013,
                    "name": "testListConsumerGroupsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testListOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.207,
                    "name": "testListOffsetsMetadataRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testListConsumerGroupsMetadataFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.012,
                    "name": "testRemoveMembersFromGroupNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.012,
                    "name": "testDeleteConsumerGroupsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterReplicaLogDirsSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testAlterReplicaLogDirsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testCloseAdminClientInCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.305,
                    "name": "testDefaultApiTimeoutOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.113,
                    "name": "testListPartitionReassignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testListOffsetsWithLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.107,
                    "name": "testRemoveMembersFromGroupRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.508,
                    "name": "testDescribeConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.011,
                    "name": "testDeleteTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.008,
                    "name": "testListOffsetsWithMultiplePartitionsLeaderChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testDeleteConsumerGroupOffsetsNumRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.107,
                    "name": "testListConsumerGroupOffsetsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testAlterConsumerGroupOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.109,
                    "name": "testDeleteConsumerGroupOffsetsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDescribeCluster",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testAlterConsumerGroupOffsetsFindCoordinatorNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.008,
                    "name": "testDescribeConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.006,
                    "name": "testCreateAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testCloseAdminClient",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.087,
                    "name": "testDefaultApiTimeoutAndRequestTimeoutConflicts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.003,
                    "name": "testPropagatedMetadataFetchException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.008,
                    "name": "testCreatePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.015,
                    "name": "testAdminClientApisAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.306,
                    "name": "testListConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.507,
                    "name": "testDeleteConsumerGroups",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.109,
                    "name": "testMetadataRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testCreateTopicsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.107,
                    "name": "testDescribeConsumerGroupRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDeleteAcls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testAlterConsumerGroupOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.21,
                    "name": "testElectLeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDeleteRecordsMultipleSends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.107,
                    "name": "testDeleteConsumerGroupsRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testAlterReplicaLogDirsLogDirNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDescribeClientQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.303,
                    "name": "testDeleteConsumerGroupOffsetsRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testListConsumerGroupsWithStatesOlderBrokerVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.002,
                    "name": "testGenerateClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.005,
                    "name": "testSuccessfulRetryAfterRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.106,
                    "name": "testOffsetCommitRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.004,
                    "name": "testDeleteTopicsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.512,
                    "name": "testRemoveMembersFromGroup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.001,
                    "name": "testCalcTimeoutMsRemainingAsInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.204,
                    "name": "testUnreachableBootstrapServer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.KafkaAdminClientTest",
                    "duration": 0.007,
                    "name": "testDeleteConsumerGroupOffsetsNonRetriableErrors",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.001,
                    "name": "testEqualsWithoutGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.0,
                    "name": "testEqualsWithGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.MemberDescriptionTest",
                    "duration": 0.0,
                    "name": "testNonEqual",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupOptionsTest",
                    "duration": 0.003,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.235,
                    "name": "testMemberLevelErrorInResponseConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.0,
                    "name": "testTopLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.001,
                    "name": "testMemberMissingErrorInRequestConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.002,
                    "name": "testMemberLevelErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest",
                    "duration": 0.001,
                    "name": "testNoErrorConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.015,
                    "name": "testAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.001,
                    "name": "testMetadataReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest",
                    "duration": 0.0,
                    "name": "testMetadataRefreshBackoff",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.004,
                    "name": "testOverrideEnableAutoCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "testOverrideClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.0,
                    "name": "testDeserializerToPropertyConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "ensureDefaultThrowOnUnsupportedStableFlagToFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerConfigTest",
                    "duration": 0.001,
                    "name": "testDeserializerToMapConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.003,
                    "name": "testInvalidMemberId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.0,
                    "name": "testAssignmentConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.002,
                    "name": "testInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.002,
                    "name": "testInvalidInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest",
                    "duration": 0.001,
                    "name": "testGroupIdConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordTest",
                    "duration": 0.001,
                    "name": "testNullChecksumInConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordTest",
                    "duration": 0.001,
                    "name": "testOldConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.ConsumerRecordsTest",
                    "duration": 0.011,
                    "name": "iterator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.008,
                    "name": "testNoExceptionThrownWhenOnlySubscribedTopicDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testStickiness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAddRemoveConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.009,
                    "name": "testAssignmentUpdatedForDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 9.549,
                    "name": "testReassignmentWithRandomSubscriptionsAndChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testNewSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testAddRemoveTopicTwoConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testMoveExistingAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testPoorRoundRobinAssignmentScenario",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.048,
                    "name": "testReassignmentAfterOneConsumerLeaves",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 6.549,
                    "name": "testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.013,
                    "name": "testSameSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.003,
                    "name": "testReassignmentAfterOneConsumerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 6.343,
                    "name": "testLargeAssignmentAndGroupWithUniformSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.002,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.018,
                    "name": "testCloseShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.063,
                    "name": "testOffsetIsValidAfterSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.316,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.035,
                    "name": "testMetricConfigRecordingLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.013,
                    "name": "testRegexSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.021,
                    "name": "testPollWithEmptySubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.02,
                    "name": "testSubscriptionWithEmptyPartitionAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.111,
                    "name": "testCloseTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.037,
                    "name": "testOperationsBySubscribingConsumerWithDefaultGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.013,
                    "name": "shouldIgnoreGroupInstanceIdForEmptyGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.017,
                    "name": "testPollWithEmptyUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testConstructorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.012,
                    "name": "testFetchStableOffsetThrowInPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.012,
                    "name": "testAssignOnNullTopicInPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.016,
                    "name": "testManualAssignmentChangeWithAutoCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.03,
                    "name": "testSubscriptionChangesWithAutoCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.011,
                    "name": "testChangingRegexSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.011,
                    "name": "testPollWithNoSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testFetchProgressWithMissingPartitionPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.012,
                    "name": "testSubscriptionOnEmptyPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testBeginningOffsetsAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.027,
                    "name": "testUnsubscribeShouldTriggerPartitionsRevokedWithValidGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testCommittedAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "verifyNoCoordinatorLookupForManualAssignmentWithSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.001,
                    "name": "testInvalidSocketSendBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testConsumerJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testOffsetsForTimesAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testCommitsFetchedDuringAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.011,
                    "name": "testOsDefaultSocketBufferSizes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testResetToCommittedOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testPollTimeMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testCloseNoWait",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testEndOffsetsAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.211,
                    "name": "testCloseInterrupt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testPollIdleRatio",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testGetGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testAssignOnNullTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "verifyPollTimesOutDuringMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "verifyDeprecatedPollDoesNotTimeOutDuringMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testMetricsReporterAutoGeneratedClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testManualAssignmentChangeWithAutoCommitDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testOffsetOfPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testSubscriptionChangesWithAutoCommitDisabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testSeekNegative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testPollAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.009,
                    "name": "testAssignOnEmptyTopicInPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.026,
                    "name": "testRebalanceException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testMissingOffsetNoResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.0,
                    "name": "testInvalidSocketReceiveBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testClosingConsumerUnregistersConsumerMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testSubscriptionOnInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.011,
                    "name": "testAutoCommitSentBeforePositionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "fetchResponseWithUnexpectedPartitionIsIgnored",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testPollThrowsInterruptExceptionIfInterrupted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testSubscriptionOnNullPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testEnforceRebalanceTriggersRebalanceOnNextPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testEnforceRebalanceWithManualAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.018,
                    "name": "testShouldAttemptToRejoinGroupAfterSyncGroupFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.007,
                    "name": "testCommitSyncAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.008,
                    "name": "verifyHeartbeatSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.009,
                    "name": "verifyHeartbeatSentWhenFetchedDataReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testResetUsingAutoResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.003,
                    "name": "testNoCommittedOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.006,
                    "name": "testOperationsByAssigningConsumerWithDefaultGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testAssignOnEmptyTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.004,
                    "name": "testFetchStableOffsetThrowInCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.117,
                    "name": "testUnsubscribeShouldTriggerPartitionsLostWithNoGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.013,
                    "name": "testSubscriptionOnNullTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.01,
                    "name": "testSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.014,
                    "name": "testInterceptorConstructorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.014,
                    "name": "testSubscriptionOnEmptyTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.037,
                    "name": "testWakeupWithFetchDataAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.03,
                    "name": "testReturnRecordsDuringRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.108,
                    "name": "testLeaveGroupTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.005,
                    "name": "testFetchStableOffsetThrowInPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.002,
                    "name": "testPartitionsForAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 0.008,
                    "name": "testSubscriptionOnNullTopicCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.KafkaConsumerTest",
                    "duration": 1.781,
                    "name": "testCloseWithTimeUnit",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.011,
                    "name": "testSimpleMock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.002,
                    "name": "testConsumerRecordsIsEmptyWhenReturningNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.001,
                    "name": "shouldNotClearRecordsForPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.0,
                    "name": "endOffsetsShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.MockConsumerTest",
                    "duration": 0.001,
                    "name": "testSimpleMockDeprecated",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.011,
                    "name": "testSerializationRoundtrip",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.001,
                    "name": "testInvalidNegativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.001,
                    "name": "testDeserializationCompatibilityBeforeLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.OffsetAndMetadataTest",
                    "duration": 0.001,
                    "name": "testDeserializationCompatibilityWithLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.003,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.003,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testStaticMemberRangeAssignmentPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.002,
                    "name": "testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoStaticConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RangeAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.006,
                    "name": "testStaticMemberRoundRobinAssignmentPersistentAfterMemberIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testStaticMemberRoundRobinAssignmentPersistent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoDynamicConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testMultipleConsumersMixedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoStaticConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.RoundRobinAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.012,
                    "name": "testAssignmentWithConflictingPreviousGenerations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.003,
                    "name": "testSchemaBackwardCompatibility",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.003,
                    "name": "testAssignmentWithMultipleGenerations1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAssignmentWithMultipleGenerations2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testNoExceptionThrownWhenOnlySubscribedTopicDeleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testStickiness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNoTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testAddRemoveConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersTwoTopicsSixPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.003,
                    "name": "testAssignmentUpdatedForDeletedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 8.023,
                    "name": "testReassignmentWithRandomSubscriptionsAndChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testNewSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testAddRemoveTopicTwoConsumers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testMoveExistingAssignments",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testMultipleConsumersMixedTopicSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.002,
                    "name": "testOneConsumerOneTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testPoorRoundRobinAssignmentScenario",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.043,
                    "name": "testReassignmentAfterOneConsumerLeaves",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 6.153,
                    "name": "testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.008,
                    "name": "testSameSubscriptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.003,
                    "name": "testReassignmentAfterOneConsumerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testTwoConsumersOneTopicOnePartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 8.17,
                    "name": "testLargeAssignmentAndGroupWithUniformSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.004,
                    "name": "testOneConsumerMultipleTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testOnlyAssignsPartitionsFromSubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.001,
                    "name": "testTwoConsumersOneTopicTwoPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.StickyAssignorTest",
                    "duration": 0.0,
                    "name": "testOneConsumerNonexistentTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.274,
                    "name": "testPollHeartbeatAwakesHeartbeatThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.213,
                    "name": "testHeartbeatInstanceFencedResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.108,
                    "name": "testWakeupAfterSyncGroupReceivedExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.02,
                    "name": "testJoinGroupProtocolTypeAndName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCoordinatorDiscoveryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.108,
                    "name": "testSyncGroupUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testLookupCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.006,
                    "name": "testSyncGroupRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.108,
                    "name": "testWakeupAfterJoinGroupSentExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testJoinGroupRequestWithMemberIdRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.025,
                    "name": "testHeartbeatRequestWithFencedInstanceIdException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.209,
                    "name": "testWakeupAfterJoinGroupSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.009,
                    "name": "testHandleLeaveGroupResponseWithException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.205,
                    "name": "testWakeupAfterJoinGroupReceivedExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.206,
                    "name": "testWakeupInOnJoinComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.007,
                    "name": "testNoGenerationWillNotTriggerProtocolNameCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.207,
                    "name": "testWakeupAfterSyncGroupSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.005,
                    "name": "testGroupMaxSizeExceptionIsFatal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.206,
                    "name": "testWakeupAfterSyncGroupSentExternalCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.207,
                    "name": "testWakeupAfterSyncGroupReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.007,
                    "name": "testMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupRequestWithGroupInstanceIdNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHandleNormalLeaveGroupResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.008,
                    "name": "testLeaveGroupSentWithGroupInstanceIdUnSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHandleMultipleMembersLeaveGroupResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.105,
                    "name": "testHeartbeatIllegalGenerationResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.109,
                    "name": "testSyncGroupIllegalGenerationResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.026,
                    "name": "testUncaughtExceptionInHeartbeatThread",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.004,
                    "name": "testHandleLeaveGroupResponseWithEmptyMemberResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testJoinGroupRequestTimeoutLowerBoundedByDefaultRequestTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.008,
                    "name": "testTimeoutAndRetryJoinGroupIfNeeded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAuthenticationErrorInEnsureCoordinatorReady",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupRequestMaxTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.105,
                    "name": "testWakeupAfterJoinGroupReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.113,
                    "name": "testHeartbeatUnknownMemberResponseDuringRebalancing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest",
                    "duration": 0.108,
                    "name": "testHeartbeatUnknownMemberResponseWithOldGeneration",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.004,
                    "name": "testMergeSortManyMemberInfo",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.002,
                    "name": "testMemberInfoSortingSomeGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.001,
                    "name": "testMemberInfoSortingWithAllGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest",
                    "duration": 0.0,
                    "name": "testMemberInfoSortingWithoutGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.122,
                    "name": "testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testInvalidSessionTimeout[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testFetchCommittedOffsets[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testExcludeInternalTopicsConfigOption[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCoordinatorDisconnect[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.012,
                    "name": "testCommitAfterLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testGroupDescribeUnauthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.019,
                    "name": "testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.515,
                    "name": "testCloseNoResponseForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testThreadSafeAssignedPartitionsMetric[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testRefreshOffsetLoadInProgress[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetOnly[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testAutoCommitRetryBackoff[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testSelectRebalanceProtcol[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.707,
                    "name": "testCloseCoordinatorNotKnownWithCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testMaybeLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.012,
                    "name": "testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.612,
                    "name": "testHeartbeatThreadClose[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.013,
                    "name": "testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testMetadataChangeTriggersRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.011,
                    "name": "testRebalanceWithMetadataChange[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testPatternJoinGroupLeader[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testThrowOnUnsupportedStableFlag[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.704,
                    "name": "testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testUnknownMemberIdOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testUnexpectedErrorOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testUnknownMemberId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testUpdateMetadataDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testPendingMemberShouldLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.205,
                    "name": "testCloseCoordinatorUnavailableNoCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testIllegalGenerationOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.012,
                    "name": "testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.207,
                    "name": "testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetMetadata[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNoThrowWhenStableFlagIsSupported[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.104,
                    "name": "testCloseNoWait[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testDisconnectInJoin[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testGetGroupMetadata[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffsetWithPendingTransactions[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRetryCommitUnknownTopicOrPartition[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testRefreshOffsetWithValidation[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetSyncNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.017,
                    "name": "testMetadataRefreshDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.011,
                    "name": "testCommitOffsetRebalanceInProgress[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testCloseDynamicAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.706,
                    "name": "testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testIllegalGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNormalHeartbeat[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffset[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffsetsGroupNotAuthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testAutoCommitDynamicAssignmentRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testNormalJoinGroupFollower[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.706,
                    "name": "testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.014,
                    "name": "testConsumerRejoinAfterRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.011,
                    "name": "testMetadataTopicsDuringSubscriptionChange[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMetrics[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testOutdatedCoordinatorAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testWakeupDuringJoin[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testPatternJoinGroupFollower[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testGroupReadUnauthorized[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testIncludeInternalTopicsConfigOption[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testUnsubscribeWithInvalidGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRebalanceInProgressOnSyncGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testCommitOffsetUnknownMemberId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.605,
                    "name": "testCloseNoResponseForLeaveGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testUnsubscribeWithValidGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCloseManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetMetadataTooLarge[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testWakeupFromAssignmentCallback[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncDisconnected[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitDynamicAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testLeaveGroupOnClose[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.07,
                    "name": "testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testRejoinGroup[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAutoCommitManualAssignment[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.105,
                    "name": "testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.008,
                    "name": "testNormalJoinGroupLeader[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testAutoCommitAfterCoordinatorBackToService[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testJoinGroupInvalidGroupId[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGeneration[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorNotAvailable[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.203,
                    "name": "testCloseCoordinatorNotKnownNoCommits[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testNotCoordinator[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitAwaitsInterval[rebalance protocol = EAGER]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testInvalidSessionTimeout[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testFetchCommittedOffsets[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testExcludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnect[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitAfterLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testGroupDescribeUnauthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.604,
                    "name": "testCloseNoResponseForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testThreadSafeAssignedPartitionsMetric[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetLoadInProgress[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetOnly[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAutoCommitRetryBackoff[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testSelectRebalanceProtcol[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.704,
                    "name": "testCloseCoordinatorNotKnownWithCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testMaybeLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.606,
                    "name": "testHeartbeatThreadClose[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMetadataChangeTriggersRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testRebalanceWithMetadataChange[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testPatternJoinGroupLeader[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testThrowOnUnsupportedStableFlag[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.703,
                    "name": "testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testUnknownMemberIdOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnexpectedErrorOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testUnknownMemberId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testUpdateMetadataDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testPendingMemberShouldLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.204,
                    "name": "testCloseCoordinatorUnavailableNoCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.01,
                    "name": "testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testIllegalGenerationOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.203,
                    "name": "testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetMetadata[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testNoThrowWhenStableFlagIsSupported[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.106,
                    "name": "testCloseNoWait[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.012,
                    "name": "testDisconnectInJoin[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testGetGroupMetadata[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetWithPendingTransactions[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRetryCommitUnknownTopicOrPartition[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testRefreshOffsetWithValidation[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetSyncNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.009,
                    "name": "testMetadataRefreshDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testCommitOffsetRebalanceInProgress[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCloseDynamicAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.705,
                    "name": "testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testIllegalGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNormalHeartbeat[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffset[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRefreshOffsetsGroupNotAuthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAutoCommitDynamicAssignmentRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testNormalJoinGroupFollower[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.703,
                    "name": "testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testConsumerRejoinAfterRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testMetadataTopicsDuringSubscriptionChange[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.0,
                    "name": "testMetrics[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testOutdatedCoordinatorAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testWakeupDuringJoin[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testPatternJoinGroupFollower[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testGroupReadUnauthorized[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testIncludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testUnsubscribeWithInvalidGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testRebalanceInProgressOnSyncGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetUnknownMemberId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.603,
                    "name": "testCloseNoResponseForLeaveGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.005,
                    "name": "testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testUnsubscribeWithValidGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCloseManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetMetadataTooLarge[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testWakeupFromAssignmentCallback[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCommitOffsetAsyncDisconnected[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.001,
                    "name": "testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testAutoCommitDynamicAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testLeaveGroupOnClose[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.007,
                    "name": "testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.046,
                    "name": "testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testRejoinGroup[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitManualAssignment[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.103,
                    "name": "testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.006,
                    "name": "testNormalJoinGroupLeader[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.003,
                    "name": "testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testAutoCommitAfterCoordinatorBackToService[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testJoinGroupInvalidGroupId[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCommitOffsetIllegalGeneration[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testCoordinatorNotAvailable[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.204,
                    "name": "testCloseCoordinatorNotKnownNoCommits[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.002,
                    "name": "testNotCoordinator[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest",
                    "duration": 0.004,
                    "name": "testAutoCommitAwaitsInterval[rebalance protocol = COOPERATIVE]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest",
                    "duration": 0.004,
                    "name": "testOnCommitChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest",
                    "duration": 0.002,
                    "name": "testOnConsumeChain",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.003,
                    "name": "testPatternSubscriptionNoInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.002,
                    "name": "testTransientTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.003,
                    "name": "testNormalSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.002,
                    "name": "testUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest",
                    "duration": 0.001,
                    "name": "testPatternSubscriptionIncludeInternalTopics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.002,
                    "name": "testMetadataFailurePropagated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testTrySend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "multiSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.003,
                    "name": "testInvalidTopicExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.011,
                    "name": "sendWithinBlackoutPeriodAfterAuthenticationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.002,
                    "name": "wakeup",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testTimeoutUnsentRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testDisconnectWithInFlightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.367,
                    "name": "blockWhenPollConditionNotSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "send",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testAuthenticationExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "sendExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.003,
                    "name": "blockOnlyForRetryBackoffIfNoInflightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.002,
                    "name": "testAwaitForMetadataUpdateWithTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.001,
                    "name": "testDisconnectWakesUpPoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.004,
                    "name": "testTopicAuthorizationExceptionPropagatedFromMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.103,
                    "name": "testFutureCompletionOutsidePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.003,
                    "name": "doNotBlockIfPollConditionIsSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest",
                    "duration": 0.0,
                    "name": "testDisconnectWithUnsentRequests",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.001,
                    "name": "deserializeFutureSubscriptionVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeNullSubscriptionUserData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.001,
                    "name": "deserializeNullAssignmentUserData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeNewSubscriptionWithOldVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "serializeDeserializeAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.001,
                    "name": "serializeDeserializeMetadataAndGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeFutureAssignmentVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest",
                    "duration": 0.0,
                    "name": "deserializeOldSubscriptionVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.078,
                    "name": "testUpdateFetchPositionResetToLatestOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetOffsetsFencedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.048,
                    "name": "testMultipleAbortMarkers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.01,
                    "name": "testEndOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.01,
                    "name": "testOffsetValidationSkippedForOldResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testUpdateFetchPositionOfPausedPartitionsWithAValidPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchUnknownTopicOrPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.017,
                    "name": "testGetOffsetByTimeWithPartitionsRetryCouldTriggerMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testResetOffsetsMetadataRefresh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testClearBufferedDataForTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchOffsetErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testReturnAbortedTransactionsinUncommittedMode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testConsumerPositionUpdatedWhenSkippingAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testCompletedFetchRemoval",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsUnknownLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.011,
                    "name": "testUpdatePositionWithLastRecordMissingFromBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testUpdatePositionOnEmptyBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.006,
                    "name": "testListOffsetUpdateEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchOffsetOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchDiscardedAfterPausedPartitionResumedAndSeekedToNewOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 2.707,
                    "name": "testFetcherConcurrency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.019,
                    "name": "testOffsetValidationResetOffsetForUndefinedOffsetWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.006,
                    "name": "testFetchedRecordsRaisesOnSerializationErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testListOffsetNoUpdateMissingEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionNoOpWithPositionSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testAssignmentChangeWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.048,
                    "name": "testQuotaMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testSeekWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchMaxPollRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.008,
                    "name": "testPreferredReadReplicaOffsetError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testParseInvalidRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.297,
                    "name": "testFetcherSessionEpochUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testSeekBeforeException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testUpdateFetchPositionDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testConsumingViaIncrementalFetchRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testFetchOnCompletedFetchesForPausedAndResumedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testGetTopicMetadataOfflinePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testFetchResponseMetricsPartialResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetTopicMetadataInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testUpdateFetchPositionResetToDefaultOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationResetOffsetForUndefinedEpochWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testSkippingAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testBeginningOffsetsMultipleTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testEpochSetInFetchRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testEndOffsetsMultipleTopicPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchNonContinuousRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchRequestInternalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testReadCommittedWithCompactedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testListOffsetSendsReadUncommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchNormal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopicsTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReadCommittedAbortMarkerWithNoData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testUnauthorizedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetAllTopicsUnauthorized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsetsDuplicateTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testEndOffsetsDuplicateTopicPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchNotLeaderForPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOnCompletedFetchesForSomePausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchPositionAfterException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testOffsetValidationFencing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testEndOffsetsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsIncludesLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationAwaitsNodeApiVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchFencedLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchedRecordsAfterSeek",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchOffsetOutOfRangeException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testOffsetValidationRequestGrouping",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchDuringCooperativeRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchResponseMetricsWithOnePartitionAtTheWrongOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBatchedListOffsetsMetadataErrors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchOnPausedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.022,
                    "name": "testParseCorruptedRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.011,
                    "name": "testGetOffsetsForTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testLeaderEpochInConsumerRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testInvalidDefaultRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchResponseMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetchDuringEagerRebalance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchResponseMetricsWithOnePartitionError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testUpdateFetchPositionResetToEarliestOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testMissingLeaderEpochInRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.0,
                    "name": "testUpdateFetchPositionOfPausedPartitionsWithoutAValidPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testStaleOutOfRangeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testChangeResetWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReadCommittedWithCommittedAndAbortedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testInFlightFetchOnPausedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testResetOffsetsSkipsBlackedOutConnections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 1.824,
                    "name": "testEarlierOffsetResetArrivesLate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testRestOffsetsAuthorizationFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testFetcherMetricsTemplates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReturnCommittedTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetOffsetsForTimesTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testReadCommittedLagMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testOffsetValidationSkippedForOldBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchDisconnected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetAllTopicsDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationResetOffsetForUndefinedOffsetWithDefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchSkipsBlackedOutNodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testOffsetValidationResetOffsetForUndefinedEpochWithDefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testOffsetValidationHandlesSeekWithInflightOffsetForLeaderRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testListOffsetSendsReadCommitted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testPartialFetchWithPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchAfterPartitionWithFetchedRecordsIsUnassigned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetTopicMetadataLeaderNotAvailable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchRequestWhenRecordTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetchUnknownLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testEmptyControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testOffsetValidationTriggerLogTruncationForBadOffsetWithUndefinedResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testIdempotentResetWithInFlightReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testGetTopicMetadataUnknownTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testPreferredReadReplica",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testCorruptMessageError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testFetchCompletedBeforeHandlerAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testBeginningOffsetsEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testSubscriptionPositionUpdatedWithEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testFetchOnCompletedFetchesForAllPausedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.003,
                    "name": "testUpdateFetchPositionOfPausedPartitionsRequiringOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.004,
                    "name": "testTruncationDetected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.005,
                    "name": "testFetcherIgnoresControlRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.002,
                    "name": "testFetcherMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.FetcherTest",
                    "duration": 0.001,
                    "name": "testFetcherLeadMetric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testResetSession",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.001,
                    "name": "testResetTimeouts",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testShouldHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testTimeToNextHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testSessionTimeoutExpired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testShouldNotHeartbeat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.HeartbeatTest",
                    "duration": 0.0,
                    "name": "testPollTimeout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.001,
                    "name": "testOkResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testEmptyResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.001,
                    "name": "testUnauthorizedTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.0,
                    "name": "testUnexpectedEmptyResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest",
                    "duration": 0.001,
                    "name": "testRetriableError",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.004,
                    "name": "shouldThrowKafkaExceptionOnAssignorNotFound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.415,
                    "name": "shouldInstantiateFromListOfOldAndNewClassTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.001,
                    "name": "shouldThrowKafkaExceptionOnNonAssignor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.001,
                    "name": "shouldAdaptOldAssignors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.003,
                    "name": "testOnAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.0,
                    "name": "shouldInstantiateNewAssignors",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.003,
                    "name": "testAssign",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest",
                    "duration": 0.017,
                    "name": "shouldThrowKafkaExceptionOnListWithNonAssignorClassType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.004,
                    "name": "invokeValueAfterFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "listenersInvokedIfAddedBeforeAndAfterFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "invokeCompleteAfterAlreadyFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedBeforeFutureFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenersInvokedIfAddedBeforeAndAfterCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeCompleteAfterAlreadyComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "listenerInvokedIfAddedBeforeFutureCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.002,
                    "name": "testComposeFailureCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeExceptionAfterSuccess",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testComposeSuccessCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testBasicCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "testRuntimeExceptionInComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "invokeRaiseAfterAlreadyFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testBasicFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.001,
                    "name": "listenerInvokedIfAddedAfterFutureCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.002,
                    "name": "invokeRaiseAfterAlreadyCompleted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "listenerInvokedIfAddedAfterFutureFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.RequestFutureTest",
                    "duration": 0.0,
                    "name": "testVoidFuture",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.02,
                    "name": "testMaybeCompleteValidationAfterPositionChange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "unsubscribeUserAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.023,
                    "name": "testSeekUnvalidatedWithOffsetEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribePartitionAndPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "partitionAssignment",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testGroupSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "topicSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testOffsetResetWhileAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "partitionPause",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "partitionReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testMaybeCompleteValidationAfterOffsetReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "unsubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testSeekUnvalidatedWithNoEpochClearsAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "patternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "partitionAssignmentChangeOnTopicSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribeTopicAndPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "invalidPositionUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "unsubscribeUserSubscribe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantChangePositionForNonAssignedPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testCompleteValidationShouldClearAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantAssignPartitionForUnsubscribedTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testSeekValidatedShouldClearAwaitingValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "verifyAssignmentId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "testTruncationDetectionWithResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "partitionAssignmentChangeOnPatternSubscription",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "testMaybeCompleteValidation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantSubscribePatternAndTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "testSeekUnvalidatedWithNoOffsetEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.001,
                    "name": "cantSubscribePatternAndPartition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.004,
                    "name": "testPreferredReadReplicaLease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.0,
                    "name": "cantAssignPartitionForUnmatchedPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.002,
                    "name": "testMaybeValidatePositionForCurrentLeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.consumer.internals.SubscriptionStateTest",
                    "duration": 0.004,
                    "name": "testTruncationDetectionWithoutResetPolicy",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.025,
                    "name": "testInvalidGenerationIdAndMemberIdCombinedInSendOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.107,
                    "name": "testCloseIsForcedOnPendingAddOffsetRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.033,
                    "name": "closeShouldBeIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.107,
                    "name": "testCloseIsForcedOnPendingInitProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.014,
                    "name": "testPartitionerClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.017,
                    "name": "testMetricConfigRecordingLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 1.106,
                    "name": "testCloseIsForcedOnPendingFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.062,
                    "name": "testHeadersWithExtendedClasses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.008,
                    "name": "testCloseWhenWaitingForMetadataUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.21,
                    "name": "testTopicExpiryInMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.211,
                    "name": "testMetadataWithPartitionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testTopicRefreshInMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.011,
                    "name": "testNullGroupMetadataInSendOffsets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testNoSerializerProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.028,
                    "name": "testSendTxnOffsetsWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.531,
                    "name": "testInitTransactionTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testInvalidSocketSendBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.21,
                    "name": "shouldCloseProperlyAndThrowIfInterrupted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.012,
                    "name": "testTransactionalMethodThrowsWhenSenderClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.013,
                    "name": "testOsDefaultSocketBufferSizes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.011,
                    "name": "testInterceptorConstructClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testPartitionsForWithNullTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.061,
                    "name": "testInterceptorPartitionSetOnTooLargeRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.009,
                    "name": "testMetricsReporterAutoGeneratedClientId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.024,
                    "name": "testMetadataFetch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.013,
                    "name": "testOnlyCanExecuteCloseAfterInitTransactionsTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.011,
                    "name": "testConstructorWithSerializers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.02,
                    "name": "testMetadataExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.05,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.0,
                    "name": "testInvalidSocketReceiveBufferSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.001,
                    "name": "testConstructorWithNotStringKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.012,
                    "name": "testSerializerClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.008,
                    "name": "testInitTransactionWhileThrottled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.012,
                    "name": "testMetadataTimeoutWithPartitionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.012,
                    "name": "testMetadataTimeoutWithMissingTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.002,
                    "name": "testOverwriteAcksAndRetriesForIdempotentProducers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.007,
                    "name": "testSendTxnOffsetsWithGroupMetadataDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.01,
                    "name": "testProducerJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.038,
                    "name": "testConstructorFailureCloseResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.011,
                    "name": "testSendTxnOffsetsWithGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.KafkaProducerTest",
                    "duration": 0.006,
                    "name": "testSendToInvalidTopic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.009,
                    "name": "shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldBeFlushedWithAutoCompleteIfBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlushedAfterFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnBeginTransactionIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnCommitTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.003,
                    "name": "shouldPublishLatestAndCumulativeConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnNullConsumerGroupMetadataWhenSendOffsetsToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.002,
                    "name": "shouldPublishConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnNullConsumerGroupIdWhenSendOffsetsToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionByGroupMetadataIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortForNonAutoCompleteIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.002,
                    "name": "shouldAddOffsetsWhenSendOffsetsToTransactionByGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldResetSentOffsetsFlagOnlyWhenBeginningNewTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldAddOffsetsWhenSendOffsetsToTransactionByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowSendOffsetsToTransactionByGroupIdIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnInitTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldPreserveCommittedMessagesOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInitTransactionIfProducerAlreadyInitializedForTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "testManualCompletion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "testAutoCompleteMock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnFlushProducerIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowSendOffsetsToTransactionByGroupMetadataIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlushedWithNoAutoCompleteIfBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldNotCountAbortedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.002,
                    "name": "testPartitioner",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnFenceProducerIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnCommitTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldPreserveOffsetsFromCommitByGroupIdOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowFenceProducerIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnBeginTransactionsIfTransactionInflight",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldCountCommittedTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldBeFlushedIfNoBufferedRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldPublishMessagesOnlyAfterCommitIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldFlushOnCommitForNonAutoCompleteIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortTransactionIfNoTransactionGotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnBeginTransactionIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldDropMessagesOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendIfProducerIsClosed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnCommitIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnBeginTransactionsIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAbortIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldBeginTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionByGroupIdIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnSendOffsetsToTransactionIfTransactionsNotInitialized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnCommitTransactionIfProducerGotFenced",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldAbortEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.0,
                    "name": "shouldCommitEmptyTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.MockProducerTest",
                    "duration": 0.001,
                    "name": "shouldDropConsumerGroupOffsetsOnAbortIfTransactionsAreEnabled",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.ProducerConfigTest",
                    "duration": 0.001,
                    "name": "testSerializerToPropertyConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.ProducerConfigTest",
                    "duration": 0.0,
                    "name": "testSerializerToMapConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.ProducerRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.ProducerRecordTest",
                    "duration": 0.001,
                    "name": "testEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.0,
                    "name": "testNullChecksum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.001,
                    "name": "testConstructionWithRelativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordMetadataTest",
                    "duration": 0.0,
                    "name": "testConstructionWithMissingRelativeOffset",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.006,
                    "name": "testTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.051,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RecordSendTest",
                    "duration": 0.051,
                    "name": "testBlocking",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.003,
                    "name": "testRoundRobinWithNullKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.RoundRobinPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithUnavailablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.001,
                    "name": "testRoundRobinWithNullKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.001,
                    "name": "testRoundRobinWithKeyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.UniformStickyPartitionerTest",
                    "duration": 0.0,
                    "name": "testRoundRobinWithUnavailablePartitions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 2.845,
                    "name": "testStressfulSituation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.003,
                    "name": "testCloseAllocations",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 1.503,
                    "name": "testCleanupMemoryAvailabilityWaiterOnInterruption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.015,
                    "name": "testBlockTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "testLargeAvailableMemory",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 1.117,
                    "name": "testCleanupMemoryAvailabilityOnMetricsException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.0,
                    "name": "testCantAllocateMoreMemoryThanWeHave",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.011,
                    "name": "testCleanupMemoryAvailabilityWaiterOnBlockTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.0,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.004,
                    "name": "testDelayedAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.003,
                    "name": "testCloseNotifyWaiters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.001,
                    "name": "outOfMemoryOnAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.BufferPoolTest",
                    "duration": 0.01,
                    "name": "testBufferExhaustedExceptionIsThrown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.DefaultPartitionerTest",
                    "duration": 0.002,
                    "name": "testKeyPartitionIsStable",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest",
                    "duration": 0.071,
                    "name": "testFutureGetWithSeconds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest",
                    "duration": 0.004,
                    "name": "testFutureGetWithMilliSeconds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testBatchExpirationAfterReenqueue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.001,
                    "name": "testChecksumNullForMagicV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testBatchExpiration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.001,
                    "name": "testBatchAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumMagicV0AndV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.001,
                    "name": "testBatchCannotCompleteTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.566,
                    "name": "testSplitPreservesMagicAndCompressionType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.001,
                    "name": "testBatchCannotAbortTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.0,
                    "name": "testShouldNotAttemptAppendOnceRecordsBuilderIsClosedForAppends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerBatchTest",
                    "duration": 0.011,
                    "name": "testSplitPreservesHeaders",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.004,
                    "name": "testOnAcknowledgementWithErrorChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.0,
                    "name": "testOnAcknowledgementChain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest",
                    "duration": 0.0,
                    "name": "testOnSendChain",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.003,
                    "name": "testRequestUpdateForTopic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.004,
                    "name": "testMetadataAwaitAfterClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.002,
                    "name": "testTopicExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 2.001,
                    "name": "testMetadataUpdateWaitTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.001,
                    "name": "testMetadataWaitAbortedOnFatalException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.003,
                    "name": "testMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.001,
                    "name": "testMetadataPartialUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.ProducerMetadataTest",
                    "duration": 0.001,
                    "name": "testTimeToNextUpdateOverwriteBackoff",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.014,
                    "name": "testSplitBatchOffAccumulator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testRetryBackoff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.006,
                    "name": "testNextReadyCheckDelay",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testExpiredBatchSingle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.248,
                    "name": "testStressfulSituation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeNonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 1.002,
                    "name": "testAwaitFlushComplete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testSoonToExpireBatchesArePickedUpForExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testFlush",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testFull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 2.905,
                    "name": "testSplitFrequency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.007,
                    "name": "testAbortUnsentBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testExpiredBatchSingleMaxValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testStickyBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testIdempotenceWithOldMagic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.003,
                    "name": "testAppendLargeOldMessageFormatNonCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testAbortIncompleteBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.002,
                    "name": "testMutedPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testExpiredBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testExpiredBatchesRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testAppendLargeOldMessageFormatCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testLinger",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testPartialDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.RecordAccumulatorTest",
                    "duration": 0.001,
                    "name": "testSplitAndReenqueue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.057,
                    "name": "testIdempotenceWithMultipleInflightsWhereFirstFailsFatallyAndSequenceOfFutureBatchesIsAdjusted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testCancelInFlightRequestAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.02,
                    "name": "testIdempotentSplitBatchAndSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testUnknownProducerErrorShouldBeRetriedWhenLogStartOffsetIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testIdempotentUnknownProducerHandlingWhenRetentionLimitReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testEpochBumpOnOutOfOrderSequenceForNextBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testMetadataTopicExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.016,
                    "name": "testTransactionalRequestsSentOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.009,
                    "name": "testExpiryOfFirstBatchShouldCauseEpochBumpIfFutureBatchesFail",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.019,
                    "name": "testMessageFormatDownConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testTransactionalUnknownProducerHandlingWhenRetentionLimitReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testExpiryOfAllSentBatchesShouldCauseUnresolvedSequences",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.311,
                    "name": "testDoNotPollWhenNoRequestSent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testNoDoubleDeallocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.04,
                    "name": "testQuotaMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testExpiryOfUnsentBatchesShouldNotCauseUnresolvedSequences",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.006,
                    "name": "testTransactionalSplitBatchAndSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testClusterAuthorizationExceptionInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testCorrectHandlingOfDuplicateSequenceError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testAppendInExpiryCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testExpiredBatchDoesNotSplitOnMessageTooLargeError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testBatchesDrainedWithOldProducerIdShouldSucceedOnSubsequentRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testIdempotenceWithMultipleInflights",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.206,
                    "name": "testCloseWithProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testShouldRaiseOutOfOrderSequenceExceptionToUserIfLogWasNotTruncated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testSenderMetricsTemplates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testInitProducerIdRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testForceCloseWithProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testTooLargeBatchesAreSafelyRemoved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testCorrectHandlingOfOutOfOrderResponses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testCanRetryWithoutIdempotence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testRetryWhenProducerIdChanges",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testRetries",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testInflightBatchesExpireOnDeliveryTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testResetOfProducerStateShouldAllowQueuedBatchesToDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testDownConversionForMismatchedMagicValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testSendInOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testClusterAuthorizationExceptionInInitProducerIdRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testUnsupportedVersionInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testForceShutdownWithIncompleteTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testUnresolvedSequencesAreNotFatal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testCorrectHandlingOfOutOfOrderResponsesWhenSecondSucceeds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.026,
                    "name": "testResetNextBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.007,
                    "name": "testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.004,
                    "name": "testUnsupportedForMessageFormatInProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testIncompleteTransactionAbortOnShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testSequenceNumberIncrement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testExpiredBatchesInMultiplePartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.002,
                    "name": "testBumpEpochWhenOutOfOrderSequenceReceived",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.005,
                    "name": "testIdempotenceWithMultipleInflightsRetriedInOrder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.SenderTest",
                    "duration": 0.003,
                    "name": "testExpiredBatchDoesNotRetry",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest",
                    "duration": 0.006,
                    "name": "unavailablePartitionsTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest",
                    "duration": 0.0,
                    "name": "testStickyPartitionCache",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.062,
                    "name": "testTopicAuthorizationFailureInAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "shouldFailAbortIfAddOffsetsFailsWithFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.011,
                    "name": "testDropCommitOnBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.011,
                    "name": "testSendOffsetsWithGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.007,
                    "name": "testBatchFailureAfterProducerReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBumpEpochAndResetSequenceNumbersAfterUnknownProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testAllowDrainInAbortableErrorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testEpochBumpAfterLastInflightBatchFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testTransitionToFatalErrorWhenRetriedBatchIsExpired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testNoFailedBatchHandlingWhenTxnManagerIsInFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testLookupCoordinatorOnDisconnectAfterSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testAbortTransactionAndResetSequenceNumberOnUnknownProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testSendOffsetWithGroupMetadataSuccessAsAutoDowngradeTxnCommitEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithInFlightPartitionAddAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testCanBumpEpochDuringCoordinatorDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testMaybeAddPartitionToTransactionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionBeforeInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testMaybeAddPartitionToTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testHandlingOfCoordinatorLoadingErrorOnTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithPartitionNotAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testAddPartitionToTransactionOverridesRetryBackoffForConcurrentTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testIsSendToPartitionAllowedWithAddedPartitionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testProducerFencedException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testIsSendToPartitionAllowedWithInFlightPartitionAddAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testTransactionalIdAuthorizationFailureInFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testAllowAbortOnProduceFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testCommitTransactionWithUnsentProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendNoProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransitionToAbortableErrorOnBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testRecoveryFromAbortableErrorTransactionStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testTransactionalIdAuthorizationFailureInAddOffsetsToTxn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testIsSendToPartitionAllowedWithPendingPartitionAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testTransitionToAbortableErrorOnMultipleBatchExpiry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransactionalIdAuthorizationFailureInInitProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testAbortResendsAddPartitionErrorIfRetried",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testIsSendToPartitionAllowedWithPendingPartitionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBumpTransactionalEpochOnRecoverableAddOffsetsRequestError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testBatchCompletedAfterProducerReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testRaiseErrorWhenNoPartitionsPendingOnDrain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testLookupCoordinatorOnDisconnectBeforeSend",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotSendAbortTxnRequestWhenOnlyAddPartitionsRequestFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.005,
                    "name": "testRetryCommitTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.005,
                    "name": "testFailedInflightBatchAfterEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testMultipleAddPartitionsPerForOneProduce",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testGroupAuthorizationFailureInFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendIdempotentProducerFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testHasOngoingTransactionAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotAddPartitionsToTransactionWhenTopicAuthorizationFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHealthyPartitionRetriesDuringEpochBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testDefaultSequenceNumber",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testDisallowCommitOnProduceFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testLookupCoordinatorOnNotCoordinatorError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testInitializeTransactionsTwiceRaisesError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHandlingOfUnknownTopicPartitionErrorOnTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testCancelUnsentAddPartitionsAndProduceOnAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testMaybeAddPartitionToTransactionBeforeBeginTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "resendFailedProduceRequestAfterAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testUnsupportedForMessageFormatInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlreadyAdded",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testBumpTransactionalEpochOnRecoverableAddPartitionRequestError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.003,
                    "name": "testRetryAbortTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testSendOffsetWithGroupMetadataFailAsAutoDowngradeTxnCommitNotEnabled",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendIdempotentProducer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testFailIfNotReadyForSendNoOngoingTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.004,
                    "name": "testRetryAbortTransactionAfterCommitTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testTransactionalIdAuthorizationFailureInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testUnsupportedInitTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHasOngoingTransactionSuccessfulCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 1.004,
                    "name": "testRetryCommitTransactionAfterAbortTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIsSendToPartitionAllowedWithAddedPartitionAfterFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testUnknownMemberIdInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testSequenceNumberOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testHandlingOfUnknownTopicPartitionErrorOnAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testFlushPendingPartitionsOnCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testUnsupportedFindCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testNoDrainWhenPartitionsPending",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testBumpTransactionalEpochOnTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testSenderShutdownWithPendingTransactions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "shouldNotSendAbortTxnRequestWhenOnlyAddOffsetsRequestFailed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testRecoveryFromAbortableErrorTransactionNotStarted",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testFencedInstanceIdInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testAddPartitionToTransactionRetainsRetryBackoffForRegularRetriableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBumpTransactionalEpochOnUnknownProducerIdError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testNoProducerIdResetAfterLastInFlightBatchSucceeds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testCommitTransactionWithInFlightProduceRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.006,
                    "name": "testRecoveryFromAbortableErrorProduceRequestInRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testGroupAuthorizationFailureInTxnOffsetCommit",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testBumpEpochAfterTimeoutWithoutPendingInflightRequests",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testAbortableErrorWhileAbortInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testBasicTransaction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testProducerIdReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testCommitWithTopicAuthorizationFailureInAddPartitionsInFlight",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testAbortResendsProduceRequestIfRetried",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testHasOngoingTransactionSuccessfulAbort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testIllegalGenerationInTxnOffsetCommitByGroupMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.003,
                    "name": "testFindCoordinatorAllowedInAbortableErrorState",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.002,
                    "name": "testTransactionalIdAuthorizationFailureInAddPartitions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testBumpTransactionalEpochOnAbortableError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testDisconnectAndRetry",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testHasOngoingTransactionFatalError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.004,
                    "name": "testAbortTransactionAndReuseSequenceNumberOnError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.clients.producer.internals.TransactionManagerTest",
                    "duration": 0.001,
                    "name": "testEndTxnNotSentIfIncompleteBatches",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.ClusterTest",
                    "duration": 0.005,
                    "name": "testReturnUnmodifiableCollections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.ClusterTest",
                    "duration": 0.0,
                    "name": "testBootstrap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.006,
                    "name": "testCompletingFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.005,
                    "name": "testThenApply",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.001,
                    "name": "testCompleteFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.002,
                    "name": "testAllOfFuturesHandlesZeroFutures",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.001,
                    "name": "testFutureTimeoutWithZeroWait",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.KafkaFutureTest",
                    "duration": 0.008,
                    "name": "testAllOfFutures",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.PartitionInfoTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.TopicPartitionTest",
                    "duration": 0.003,
                    "name": "testSerializationRoundtrip",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.TopicPartitionTest",
                    "duration": 0.001,
                    "name": "testTopiPartitionSerializationCompatibility",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.007,
                    "name": "shouldThrowOnMatchPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAnyPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "testUnknowns",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "testMatching",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnAnyResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "shouldNotThrowOnUnknownResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.001,
                    "name": "testMatchesAtMostOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclBindingTest",
                    "duration": 0.0,
                    "name": "shouldNotThrowOnUnknownPatternType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.002,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.0,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.001,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclOperationTest",
                    "duration": 0.0,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.AclPermissionTypeTest",
                    "duration": 0.0,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldBeUnknownIfResourceTypeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchPrefixedIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWherePatternTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceNameIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWherePatternTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchLiteralWildcardAgainstOtherName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldBeUnknownIfPatternTypeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentPatternType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralIfNamePrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.001,
                    "name": "shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentNameCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralWildcardTheWayAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchLiteralWildcardIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.006,
                    "name": "shouldThrowIfResourceNameIsNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.0,
                    "name": "shouldThrowIfPatternTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.0,
                    "name": "shouldThrowIfResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.acl.ResourcePatternTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfPatternTypeIsMatch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.003,
                    "name": "testEviction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.0,
                    "name": "testPutGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.cache.LRUCacheTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.003,
                    "name": "testOriginalsWithPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.012,
                    "name": "testConfigProvidersPropsAsParam",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.002,
                    "name": "testConfiguredInstances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.002,
                    "name": "testAutoConfigResolutionWithDuplicateConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testOriginalsWithConfigProvidersProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testValuesWithSecondaryPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testConfigProviderConfigurationWithConfigParams",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testImmutableOriginalsWithConfigProvidersProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testAutoConfigResolutionWithMultipleConfigProviders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testValuesWithPrefixOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testDocumentationOf",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testAutoConfigResolutionWithMissingConfigKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testDocumentationOfExpectNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testAutoConfigResolutionWithInvalidConfigProviderClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testValuesWithPrefixAllOrNothing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.0,
                    "name": "testAutoConfigResolutionWithMissingConfigProvider",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.001,
                    "name": "testUnused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.AbstractConfigTest",
                    "duration": 0.004,
                    "name": "testClassConfigs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testNiceTimeUnits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testBasicTypes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNullDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.003,
                    "name": "testParseForValidate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testInvalidDefaultRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testGroupInference",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testConvertValueToStringNestedClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.009,
                    "name": "testValidators",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testValidateCannotParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testValidate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.002,
                    "name": "testInternalConfigDoesntShowUpInDocs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testInvalidDefaultString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testClassWithAlias",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testSslPasswords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testDynamicUpdateModeInDocs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testBaseConfigDefDependents",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringShort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testInvalidDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "toRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testCanAddInternalConfig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testMissingRequired",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testParsingEmptyDefaultValueForStringFieldShouldSucceed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringPassword",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNiceMemoryUnits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringBoolean",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testNullDefaultWithValidator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testMissingDependentConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testConvertValueToStringDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "toEnrichedRst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testDefinedTwice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.0,
                    "name": "testConvertValueToStringString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testNestedClass",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.003,
                    "name": "testBadInputs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigDefTest",
                    "duration": 0.001,
                    "name": "testValidateMissingConfigKey",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.001,
                    "name": "shouldReturnUnknownForUnknownCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.0,
                    "name": "shouldGetTypeFromId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigResourceTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripEveryType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.006,
                    "name": "testNoReplacement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceVariable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceMultipleVariablesWithoutPathInValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.001,
                    "name": "testReplaceVariableWithTTL",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testNullConfigValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.001,
                    "name": "testSingleLevelOfIndirection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceMultipleVariablesInValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.ConfigTransformerTest",
                    "duration": 0.0,
                    "name": "testReplaceVariableNoPath",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshWindowJitterMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshMinPeriodSecondsMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshBufferSecondsMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshWindowFactorMinValueIsReallyMinimum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshMaxValuesAreValid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshWindowJitterMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshMinPeriodSecondsMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshBufferSecondsMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.001,
                    "name": "testSaslLoginRefreshWindowFactorMaxValueIsReallyMaximum",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.SaslConfigsTest",
                    "duration": 0.0,
                    "name": "testSaslLoginRefreshMinValuesAreValid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.001,
                    "name": "testEmptyPathWithKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testNullPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testEmptyPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testNullPathWithKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testGetOneKeyAtPath",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.config.provider.FileConfigProviderTest",
                    "duration": 0.0,
                    "name": "testGetAllKeysAtPath",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.001,
                    "name": "shouldThrowNpeWhenAddingNullHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.001,
                    "name": "testAdd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testNew",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testReadOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.002,
                    "name": "testHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testLastHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.header.internals.RecordHeadersTest",
                    "duration": 0.0,
                    "name": "testAddRemoveInterleaved",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.001,
                    "name": "testSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testClear",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testMoveToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testUpdateAndMoveToEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.PartitionStatesTest",
                    "duration": 0.0,
                    "name": "testPartitionValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInvalidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.001,
                    "name": "shouldAcceptValidTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "testTopicHasCollision",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.0,
                    "name": "testTopicHasCollisionChars",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.internals.TopicTest",
                    "duration": 0.001,
                    "name": "shouldRecognizeInvalidCharactersInTopicNames",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.006,
                    "name": "testReleaseForeignBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 1.409,
                    "name": "testBuffersGarbageCollected",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.005,
                    "name": "testAllocationBound",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testReleaseNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testDoubleFree",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testNegativeMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationOverMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testMaxAllocationLargerThanSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testZeroMaxAllocation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testZeroSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.001,
                    "name": "testNegativeSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest",
                    "duration": 0.0,
                    "name": "testAllocationNegative",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.003,
                    "name": "testUniqueness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.0,
                    "name": "testFromApiKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.001,
                    "name": "testInvalidFromApiKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.ApiMessageTypeTest",
                    "duration": 0.001,
                    "name": "testHeaderVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.042,
                    "name": "testOffsetCommitDefaultGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.007,
                    "name": "testResponseSchemas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.008,
                    "name": "testJoinGroupRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.015,
                    "name": "testJoinGroupResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testAddPartitionsToTxnVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.006,
                    "name": "testMessageVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.006,
                    "name": "testDefaultValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testRequestSchemas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testCompareWithUnknownTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.012,
                    "name": "testProduceResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.005,
                    "name": "testLeaveGroupResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.01,
                    "name": "testTxnOffsetCommitRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.006,
                    "name": "testMetadataVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testTxnOffsetCommitResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.004,
                    "name": "testSyncGroupDefaultGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.005,
                    "name": "testHeartbeatVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.015,
                    "name": "testOffsetCommitResponseVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.001,
                    "name": "testAddOffsetsToTxnVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testDescribeAclsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.003,
                    "name": "testLeaderAndIsrVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.015,
                    "name": "testOffsetCommitRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.024,
                    "name": "testSimpleMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testUnknownTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testCreateTopicsVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testNonIgnorableFieldWithDefaultNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.002,
                    "name": "testWriteNullForNonNullableFieldRaisesException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.025,
                    "name": "testOffsetFetchVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.MessageTest",
                    "duration": 0.004,
                    "name": "testOffsetForLeaderEpochVersions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.013,
                    "name": "shouldRoundTripFieldThroughStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripFieldThroughStructWithNullable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.006,
                    "name": "testMyTaggedStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyNullableString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldStoreField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyStructUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripFieldThroughBufferWithNullable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testMyStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyTaggedIntArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfCannotWriteNonIgnorableField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldImplementEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.003,
                    "name": "testMyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.002,
                    "name": "testMyInt16",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.0,
                    "name": "shouldDefaultField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripFieldThroughBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testTaggedLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.message.SimpleExampleMessageTest",
                    "duration": 0.001,
                    "name": "testTaggedUuid",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.002,
                    "name": "testPredicateAndDynamicReload",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.001,
                    "name": "testJmxRegistration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.001,
                    "name": "testJmxPrefix",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.002,
                    "name": "testJmxRegistrationSanitization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.JmxReporterTest",
                    "duration": 0.0,
                    "name": "testDeprecatedJmxPrefixWithDefaultMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.003,
                    "name": "testSetAttribute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.0,
                    "name": "testSetAttributes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttribute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttributeUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testInvoke",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.0,
                    "name": "testGetAttributesWithUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMbeanTest",
                    "duration": 0.001,
                    "name": "testGetAttributes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithValidNamespaceAndNoLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithValidNamespaceAndLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithNullNamespaceAndLabels",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testKafkaMetricsContextLabelsAreImmutable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.KafkaMetricsContextTest",
                    "duration": 0.0,
                    "name": "testCreationWithValidNamespaceAndNullLabelValues",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.007,
                    "name": "testSimpleRate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.015,
                    "name": "testSimpleStats",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testOldDataHasNoEffect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testQuotasEquality",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testRemoveInactiveMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRemoveChildSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.181,
                    "name": "testPercentilesWithRandomNumbersAndLinearBucketing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "shouldPinLargerValuesToMax",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "shouldPinSmallerValuesToMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testMetricName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testSampledStatReturnsInitialValueWhenNoValuesExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.005,
                    "name": "testDeprecatedMetricValueMethod",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRateWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testMetricInstances",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testTimeWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testEventWindowing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testSampledStatReturnsNaNWhenNoValuesExist",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.586,
                    "name": "testConcurrentReadUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRemoveMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testBadSensorHierarchy",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testRemoveSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.667,
                    "name": "testConcurrentReadUpdateReport",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.003,
                    "name": "testPercentiles",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.001,
                    "name": "testDuplicateMetricName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testQuotas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.MetricsTest",
                    "duration": 0.002,
                    "name": "testHierarchicalSensors",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.0,
                    "name": "testIdempotentAdd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.001,
                    "name": "testExpiredSensor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.0,
                    "name": "testShouldRecord",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.006,
                    "name": "testCheckQuotasInMultiThreads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.0,
                    "name": "shouldReturnPresenceOfMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.SensorTest",
                    "duration": 0.0,
                    "name": "testRecordLevelEnum",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.001,
                    "name": "testCreateAndRemoveMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.0,
                    "name": "testCreateAndClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest",
                    "duration": 0.0,
                    "name": "testCreateMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.014,
                    "name": "testFrequencyCenterValueAboveMax",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.001,
                    "name": "testFrequencyCenterValueBelowMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.004,
                    "name": "testUseWithMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.001,
                    "name": "testMoreFrequencyParametersThanBuckets",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.FrequenciesTest",
                    "duration": 0.001,
                    "name": "testBooleanFrequencies",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.003,
                    "name": "testHistogram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.001,
                    "name": "testConstantBinScheme",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.001,
                    "name": "testLinearBinScheme",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.metrics.stats.HistogramTest",
                    "duration": 0.0,
                    "name": "testConstantBinSchemeWithPositiveRange",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.metrics.stats.MeterTest",
                    "duration": 0.005,
                    "name": "testMeter",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 0.002,
                    "name": "testChannelBuilderConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 0.001,
                    "name": "testCreateConfigurableKafkaPrincipalBuilder",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.ChannelBuildersTest",
                    "duration": 0.113,
                    "name": "testCreateOldPrincipalBuilder",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.KafkaChannelTest",
                    "duration": 0.154,
                    "name": "testReceiving",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.KafkaChannelTest",
                    "duration": 0.006,
                    "name": "testSending",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.NetworkReceiveTest",
                    "duration": 0.035,
                    "name": "testBytesRead",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.323,
                    "name": "testNativeGssapiCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.001,
                    "name": "testCloseBeforeConfigureIsIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.076,
                    "name": "testCloseAfterConfigIsIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 1.779,
                    "name": "testClientChannelBuilderWithBrokerConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SaslChannelBuilderTest",
                    "duration": 0.001,
                    "name": "testLoginManagerReleasedIfConfigureThrowsException",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.028,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.023,
                    "name": "testSendLargeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 1.074,
                    "name": "testLargeMessageSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.019,
                    "name": "testLowestPriorityChannel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.202,
                    "name": "testConnectDisconnectDuringInSinglePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.007,
                    "name": "testConnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "registerFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.008,
                    "name": "testMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.007,
                    "name": "testExpireConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.007,
                    "name": "testCantSendWithInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.012,
                    "name": "testOutboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.007,
                    "name": "testImmediatelyConnectedCleaned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testExistingConnectionId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.003,
                    "name": "testCantSendWithoutConnecting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testCloseOldestConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.012,
                    "name": "testServerDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testMetricsCleanupOnSelectorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 2.225,
                    "name": "testPartialSendAndReceiveReflectedInMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testWriteCompletesSendWithNoBytesWritten",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.005,
                    "name": "testIdleExpiryWithoutReadyKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.017,
                    "name": "testConnectionsByClientMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.011,
                    "name": "testInboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testNoRouteToHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testClearCompletedSendsAndReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.109,
                    "name": "testPartialReceiveGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.383,
                    "name": "testNormalOperation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.014,
                    "name": "testMuteOnOOM",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.051,
                    "name": "testCloseOldestConnectionWithMultiplePendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testExpireClosedConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.004,
                    "name": "testConnectionRefused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.095,
                    "name": "testChannelCloseWhileProcessingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SelectorTest",
                    "duration": 0.006,
                    "name": "testEmptyRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 2.307,
                    "name": "testBytesBufferedChannelAfterMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.258,
                    "name": "testBytesBufferedChannelWithNoIncomingBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.393,
                    "name": "testRenegotiationFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.952,
                    "name": "testDisconnectWithIntermediateBufferedBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.143,
                    "name": "testConnectionWithCustomKeyManager",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.461,
                    "name": "testGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.49,
                    "name": "testSendLargeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 65.112,
                    "name": "testLargeMessageSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.437,
                    "name": "testLowestPriorityChannel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.141,
                    "name": "testConnectDisconnectDuringInSinglePoll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.125,
                    "name": "testConnectException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.29,
                    "name": "registerFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.28,
                    "name": "testMute",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.249,
                    "name": "testExpireConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.56,
                    "name": "testCantSendWithInProgress",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.384,
                    "name": "testOutboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.155,
                    "name": "testImmediatelyConnectedCleaned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.407,
                    "name": "testExistingConnectionId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.416,
                    "name": "testCantSendWithoutConnecting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.551,
                    "name": "testCloseOldestConnection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.678,
                    "name": "testServerDisconnect",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.416,
                    "name": "testMetricsCleanupOnSelectorClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.613,
                    "name": "testPartialSendAndReceiveReflectedInMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.178,
                    "name": "testWriteCompletesSendWithNoBytesWritten",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.218,
                    "name": "testIdleExpiryWithoutReadyKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.979,
                    "name": "testConnectionsByClientMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.272,
                    "name": "testInboundConnectionsCountInConnectionCreationMetric",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.282,
                    "name": "testNoRouteToHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.349,
                    "name": "testClearCompletedSendsAndReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.345,
                    "name": "testPartialReceiveGracefulClose",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.889,
                    "name": "testNormalOperation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 1.255,
                    "name": "testMuteOnOOM",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.364,
                    "name": "testCloseOldestConnectionWithMultiplePendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.296,
                    "name": "testExpireClosedConnectionWithPendingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.187,
                    "name": "testConnectionRefused",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.44,
                    "name": "testChannelCloseWhileProcessingReceives",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslSelectorTest",
                    "duration": 0.263,
                    "name": "testEmptyRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.003,
                    "name": "testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.0,
                    "name": "testListenerConfigOverride[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.139,
                    "name": "testValidEndpointIdentificationCN[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.135,
                    "name": "testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.193,
                    "name": "testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.64,
                    "name": "testClientEndpointNotValidated[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.738,
                    "name": "testUnsupportedCiphers[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.497,
                    "name": "testUnsupportedTLSVersion[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 7.138,
                    "name": "testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.837,
                    "name": "testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 7.711,
                    "name": "testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.659,
                    "name": "testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 6.728,
                    "name": "testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.405,
                    "name": "testInvalidKeystorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.847,
                    "name": "testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.294,
                    "name": "testCustomClientSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.572,
                    "name": "testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.614,
                    "name": "testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 6.692,
                    "name": "testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 8.052,
                    "name": "testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.776,
                    "name": "testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.06,
                    "name": "testInvalidEndpointIdentification[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.127,
                    "name": "testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.672,
                    "name": "testEndpointIdentificationDisabled[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.979,
                    "name": "testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.649,
                    "name": "testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.332,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.749,
                    "name": "testNullTruststorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 6.807,
                    "name": "testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.499,
                    "name": "testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.346,
                    "name": "testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.092,
                    "name": "testTLSDefaults[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.356,
                    "name": "testSelectorPollReadSize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.072,
                    "name": "testNetReadBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.188,
                    "name": "testNetWriteBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.251,
                    "name": "testCustomServerSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.411,
                    "name": "testInvalidTruststorePassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.518,
                    "name": "testServerRequestMetrics[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.602,
                    "name": "testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.844,
                    "name": "testApplicationBufferResize[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.766,
                    "name": "testClosePlaintext[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.298,
                    "name": "testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.786,
                    "name": "testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.554,
                    "name": "testInvalidKeyPassword[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.728,
                    "name": "testCloseSsl[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.547,
                    "name": "testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.786,
                    "name": "testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.418,
                    "name": "testListenerConfigOverride[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.502,
                    "name": "testValidEndpointIdentificationCN[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.23,
                    "name": "testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.505,
                    "name": "testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.05,
                    "name": "testClientEndpointNotValidated[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.704,
                    "name": "testUnsupportedCiphers[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.086,
                    "name": "testUnsupportedTLSVersion[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.372,
                    "name": "testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.909,
                    "name": "testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.839,
                    "name": "testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.636,
                    "name": "testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.518,
                    "name": "testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.876,
                    "name": "testInvalidKeystorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.072,
                    "name": "testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.574,
                    "name": "testCustomClientSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.194,
                    "name": "testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.441,
                    "name": "testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.575,
                    "name": "testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.779,
                    "name": "testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.887,
                    "name": "testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.161,
                    "name": "testInvalidEndpointIdentification[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.724,
                    "name": "testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.847,
                    "name": "testEndpointIdentificationDisabled[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.106,
                    "name": "testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.636,
                    "name": "testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.721,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.132,
                    "name": "testNullTruststorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.744,
                    "name": "testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.745,
                    "name": "testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.807,
                    "name": "testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 3.947,
                    "name": "testTLSDefaults[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.893,
                    "name": "testSelectorPollReadSize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.043,
                    "name": "testNetReadBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.112,
                    "name": "testNetWriteBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.946,
                    "name": "testCustomServerSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.342,
                    "name": "testInvalidTruststorePassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.591,
                    "name": "testServerRequestMetrics[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.947,
                    "name": "testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 1.307,
                    "name": "testApplicationBufferResize[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.774,
                    "name": "testClosePlaintext[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 2.295,
                    "name": "testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.786,
                    "name": "testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.701,
                    "name": "testInvalidKeyPassword[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.49,
                    "name": "testCloseSsl[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportLayerTest",
                    "duration": 0.653,
                    "name": "testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.532,
                    "name": "testCiphersSuiteForTls12FailsForTls13",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.726,
                    "name": "testCiphersSuiteForTls12",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 1.029,
                    "name": "testCiphersSuiteForTls13",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslTransportTls12Tls13Test",
                    "duration": 0.776,
                    "name": "testCiphersSuiteFailForServerTls12ClientTls13",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 3.228,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 0.482,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 0.793,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.505,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.169,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.45,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 0.796,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.757,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 1.996,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.086,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 1.92,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.044,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.3, TLSv1.2],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.023,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.182,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 1.871,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.2, TLSv1.3]]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.network.SslVersionsTransportLayerTest",
                    "duration": 2.555,
                    "name": "testTlsDefaults[tlsServerProtocol=[TLSv1.2, TLSv1.3],tlsClientProtocol=[TLSv1.3, TLSv1.2]]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "testForIdWithInvalidIdLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "schemaVersionOutOfRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.001,
                    "name": "testForIdWithInvalidIdHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ApiKeysTest",
                    "duration": 0.0,
                    "name": "testResponseThrottleTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testExceptionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.001,
                    "name": "testForExceptionDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testUniqueExceptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testForExceptionInheritance",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testNoneException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testUniqueErrorCodes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.ErrorsTest",
                    "duration": 0.0,
                    "name": "testExceptionsAreNotGeneric",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testCompareRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testDeepToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.001,
                    "name": "testByteBufferToArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.MessageUtilTest",
                    "duration": 0.0,
                    "name": "testDuplicate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.ProtoUtilsTest",
                    "duration": 0.0,
                    "name": "testDelayedAllocationSchemaDetection",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadWithMissingNonOptionalExtraDataAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testNulls",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadStringSizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadCompactArraySizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testNullableDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadIgnoringExtraDataAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeStringSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadWhenOptionalDataMissingAtTheEndIsTolerated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadWhenOptionalDataMissingAtTheEndIsNotTolerated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadArraySizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testDefault",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadZeroCompactArraySize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeBytesSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testStructEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.001,
                    "name": "testReadBytesSizeTooLarge",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.002,
                    "name": "testSimple",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.ProtocolSerializationTest",
                    "duration": 0.0,
                    "name": "testReadNegativeArraySize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testOutOfOrderTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testWritingZeroRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.0,
                    "name": "testInvalidNextDefinedTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest",
                    "duration": 0.001,
                    "name": "testWritingSeveralRawTaggedFields",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.protocol.types.StructTest",
                    "duration": 0.002,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetCreateTimeNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetNoTimestampTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidWrapperOffsetV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetLogAppendTimeV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetPartitionLeaderEpochNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetPartitionLeaderEpochNotAllowedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetCreateTimeV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLastOffsetCompressed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.0,
                    "name": "testZStdCompressionTypeWithV0OrV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLogAppendTimeNotAllowedV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.AbstractLegacyRecordBatchTest",
                    "duration": 0.001,
                    "name": "testIterateCompressedRecordWithWrapperOffsetZero",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.BufferSupplierTest",
                    "duration": 0.001,
                    "name": "testGrowableBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.001,
                    "name": "iteratorRaisesOnTooSmallRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.0,
                    "name": "iteratorRaisesOnInvalidMagic",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.0,
                    "name": "iteratorRaisesOnTooLargeRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ByteBufferLogInputStreamTest",
                    "duration": 0.0,
                    "name": "iteratorIgnoresIncompleteEntries",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.CompressionRatioEstimatorTest",
                    "duration": 0.001,
                    "name": "testUpdateEstimation",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.CompressionTypeTest",
                    "duration": 0.0,
                    "name": "testLZ4FramingMagicV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.CompressionTypeTest",
                    "duration": 0.0,
                    "name": "testLZ4FramingMagicV1",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.ControlRecordTypeTest",
                    "duration": 0.002,
                    "name": "testParseUnknownType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.ControlRecordTypeTest",
                    "duration": 0.0,
                    "name": "testParseUnknownVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetNoTimestampTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidRecordCountTooLittleCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidRecordCountTooLittleNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testStreamingIteratorConsistency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetLogAppendTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testDecrementSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.004,
                    "name": "testSkipKeyValueIteratorCorrectness",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testSetLastOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "buildDefaultRecordBatchWithSequenceWrapAround",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidRecordSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSetPartitionLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "buildDefaultRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testReadAndWriteControlBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testInvalidRecordCountTooManyNonCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "buildDefaultRecordBatchWithProducerId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidRecordCountTooManyCompressedV2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testSizeInBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.001,
                    "name": "testInvalidCrc",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordBatchTest",
                    "duration": 0.0,
                    "name": "testIncrementSequence",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidHeaderKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testBasicSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testBasicSerdeInvalidHeaderCountTooLow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidHeaderValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testNullHeaderKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidNumHeadersPartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidKeySizePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testBasicSerdeInvalidHeaderCountTooHigh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidHeaderKeyPartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidHeaderValuePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.001,
                    "name": "testInvalidValueSizePartial",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testUnderflowReadingVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testUnderflowReadingTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidValueSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.002,
                    "name": "testInvalidNumHeaders",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testInvalidKeySize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testSerdeNoSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.DefaultRecordTest",
                    "duration": 0.0,
                    "name": "testNullHeaderKeyPartial",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.001,
                    "name": "testNotEnoughBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testIllegalNegativeVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testCannotDeserializeUnknownControlType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.001,
                    "name": "testUnknownControlTypeNotAllowed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.EndTransactionMarkerTest",
                    "duration": 0.0,
                    "name": "testDeserializeNewerVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.012,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testSimpleBatchIteration[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.001,
                    "name": "testBatchIterationV2[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.066,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.001,
                    "name": "testBatchIterationV2[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.109,
                    "name": "testSimpleBatchIteration[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.001,
                    "name": "testBatchIterationV2[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.058,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.084,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testWriteTo[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.434,
                    "name": "testSimpleBatchIteration[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.058,
                    "name": "testWriteTo[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.001,
                    "name": "testSimpleBatchIteration[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationIncompleteBatch[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteTo[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testSimpleBatchIteration[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testWriteTo[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testSimpleBatchIteration[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.031,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.02,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testSimpleBatchIteration[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.068,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.059,
                    "name": "testWriteTo[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testSimpleBatchIteration[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationV2[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testBatchIterationIncompleteBatch[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteTo[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=1, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testSimpleBatchIteration[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationV2[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testWriteTo[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.042,
                    "name": "testSimpleBatchIteration[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.111,
                    "name": "testBatchIterationV2[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.382,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testSimpleBatchIteration[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testBatchIterationV2[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.017,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.058,
                    "name": "testSimpleBatchIteration[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.073,
                    "name": "testBatchIterationV2[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.045,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.067,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithMaxedParams[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.1,
                    "name": "testSimpleBatchIteration[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.05,
                    "name": "testBatchIterationV2[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.092,
                    "name": "testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.083,
                    "name": "testBatchIterationIncompleteBatch[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.051,
                    "name": "testWriteTo[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileLogInputStreamTest",
                    "duration": 0.016,
                    "name": "testNextBatchSelectionWithZeroedParams[magic=2, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.037,
                    "name": "testTruncate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.033,
                    "name": "testIterationOverPartialAndTruncation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.033,
                    "name": "testRead",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.124,
                    "name": "testDownconversionAfterMessageFormatDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.254,
                    "name": "testAppendProtectsFromOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.04,
                    "name": "testTruncateNotCalledIfSizeIsBiggerThanTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.032,
                    "name": "testOutOfRangeSlice",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.035,
                    "name": "testFileSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.032,
                    "name": "testIteratorWithLimits",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.036,
                    "name": "testTruncateNotCalledIfSizeIsSameAsTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.031,
                    "name": "testPreallocateTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.036,
                    "name": "testOpenOversizeFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.034,
                    "name": "testTruncateIfSizeIsDifferentToTargetSize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.031,
                    "name": "testFormatConversionWithPartialMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.034,
                    "name": "testIterationDoesntChangePosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.033,
                    "name": "testPreallocateFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.069,
                    "name": "testPreallocateClearShutdown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.442,
                    "name": "testConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 2.535,
                    "name": "testSliceSizeLimitWithConcurrentWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.028,
                    "name": "testSearchForTimestamp",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.FileRecordsTest",
                    "duration": 0.022,
                    "name": "testSearch",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.002,
                    "name": "testHeaderPrematureEnd[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.006,
                    "name": "testDirectBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.002,
                    "name": "testDirectBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.002,
                    "name": "testDirectBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testSkip[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadFrameChecksum[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testHeaderPrematureEnd[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadBlockSize[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testCompression[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testDirectBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testArrayBackedBufferSlice[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testNotSupported[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testHeaderPrematureEnd[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testBadBlockSize[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testSkip[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testCompression[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testDirectBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testArrayBackedBufferSlice[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.001,
                    "name": "testNotSupported[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.KafkaLZ4Test",
                    "duration": 0.0,
                    "name": "testBadFrameChecksum[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.087,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.065,
                    "name": "testConversion[compressionType=NONE, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.081,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.078,
                    "name": "testConversion[compressionType=GZIP, toMagic=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.075,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.075,
                    "name": "testConversion[compressionType=NONE, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.076,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.084,
                    "name": "testConversion[compressionType=GZIP, toMagic=1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.075,
                    "name": "testConversionWithOverflow[compressionType=NONE, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.067,
                    "name": "testConversion[compressionType=NONE, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.079,
                    "name": "testConversionWithOverflow[compressionType=GZIP, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest",
                    "duration": 0.072,
                    "name": "testConversion[compressionType=GZIP, toMagic=2]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LazyDownConversionRecordsTest",
                    "duration": 0.069,
                    "name": "testConversionOfCommitMarker",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[1]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[5]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[6]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[7]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[8]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[9]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[10]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[11]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[12]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[13]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[14]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.014,
                    "name": "testChecksum[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[15]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.016,
                    "name": "testChecksum[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[16]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.018,
                    "name": "testChecksum[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[17]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.013,
                    "name": "testChecksum[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[18]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[19]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[20]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[21]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[22]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[23]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[24]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[25]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[26]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[27]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[28]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[29]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[30]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[31]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[32]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[33]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[34]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[35]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[36]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.009,
                    "name": "testChecksum[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[37]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[38]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[39]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[40]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[41]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[42]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[43]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[44]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[45]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[46]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[47]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[48]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[49]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[50]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[51]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[52]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[53]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[54]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[55]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[56]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[57]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.01,
                    "name": "testChecksum[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[58]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[59]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[60]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[61]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[62]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[63]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[64]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[65]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[66]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[67]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[68]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[69]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[70]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[71]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[72]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[73]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[74]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[75]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[76]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[77]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.026,
                    "name": "testChecksum[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[78]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[79]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[80]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[81]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[82]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[83]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[84]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[85]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[86]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[87]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[88]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[89]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[90]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[91]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[92]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[93]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[94]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[95]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[96]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[97]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[98]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[99]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[100]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[101]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[102]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[103]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[104]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[105]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[106]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[107]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[108]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[109]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[110]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[111]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[112]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[113]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[114]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.016,
                    "name": "testChecksum[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[115]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[116]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[117]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[118]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[119]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[120]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[121]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[122]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[123]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[124]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[125]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[126]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[127]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[128]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[129]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[130]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[131]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[132]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[133]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[134]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[135]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[136]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[137]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[138]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[139]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[140]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[141]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[142]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[143]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[144]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[145]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[146]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[147]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[148]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[149]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[150]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[151]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[152]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[153]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[154]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.025,
                    "name": "testChecksum[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[155]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.018,
                    "name": "testChecksum[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[156]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[157]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[158]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.02,
                    "name": "testChecksum[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[159]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[160]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[161]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[162]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[163]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[164]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[165]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[166]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[167]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[168]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[169]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[170]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[171]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[172]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[173]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[174]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[175]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[176]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[177]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[178]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[179]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[180]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[181]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[182]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[183]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[184]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[185]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[186]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[187]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[188]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[189]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[190]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[191]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[192]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[193]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[194]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[195]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[196]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[197]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[198]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[199]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[201]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[202]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[203]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[204]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[205]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[206]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[207]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[208]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[209]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[210]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[211]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[212]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[213]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[214]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[215]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[216]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[217]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[218]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[219]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[220]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[221]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[222]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[223]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[224]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[225]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[226]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[227]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[228]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[229]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[230]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[231]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[232]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[233]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[234]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[235]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.021,
                    "name": "testChecksum[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[236]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.017,
                    "name": "testChecksum[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[237]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[238]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[239]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[240]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[241]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[242]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[243]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[244]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[245]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[246]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[247]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[248]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[249]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[250]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[251]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[252]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[253]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[254]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[255]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[256]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[257]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[258]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[259]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[260]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[261]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[262]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[263]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[264]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[265]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[266]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[267]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[268]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[269]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[270]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[271]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[272]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[273]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[274]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[275]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[276]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[277]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[278]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[279]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[280]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[281]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[282]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[283]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[284]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[285]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[286]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[287]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[288]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[289]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[290]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[291]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[292]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[293]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[294]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[295]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[296]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[297]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[298]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[299]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[300]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[301]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[302]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[303]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[304]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[305]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[306]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[307]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[308]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[309]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[310]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[311]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[312]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[313]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[314]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[315]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[316]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[317]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.02,
                    "name": "testChecksum[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[318]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[319]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[320]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[321]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[322]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[323]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[324]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[325]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[326]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[327]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[328]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[329]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[330]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[331]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[332]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[333]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[334]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[335]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[336]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[337]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[338]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[339]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[340]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[341]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[342]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[343]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[344]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[345]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[346]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[347]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[348]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[349]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[350]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[351]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[352]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[353]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[354]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[355]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[356]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[357]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[358]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[359]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[360]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[361]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[362]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[363]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[364]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[365]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[366]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[367]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[368]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[369]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[370]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[371]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[372]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[373]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[374]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[375]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[376]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[377]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[378]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[379]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[380]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[381]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[382]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[383]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[384]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[385]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[386]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[387]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[388]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[389]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[390]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[391]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[392]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[393]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[394]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.02,
                    "name": "testChecksum[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[395]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[396]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.024,
                    "name": "testChecksum[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[397]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.02,
                    "name": "testChecksum[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[398]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.018,
                    "name": "testChecksum[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[399]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[400]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[401]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[402]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[403]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[404]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[405]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[406]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[407]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[408]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[409]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[410]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[411]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[412]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[413]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[414]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[415]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[416]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[417]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[418]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[419]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[420]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[421]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[422]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[423]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[424]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[425]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[426]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[427]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[428]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[429]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[430]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[431]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testFields[432]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[433]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[434]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[435]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[436]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[437]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[438]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[439]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[440]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[441]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[442]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[443]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[444]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[445]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testChecksum[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[446]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[447]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[448]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[449]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[450]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[451]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[452]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[453]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testChecksum[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[454]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[455]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[456]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[457]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.007,
                    "name": "testChecksum[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[458]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[459]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[460]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[461]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[462]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[463]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[464]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[465]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[466]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.008,
                    "name": "testChecksum[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[467]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[468]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[469]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[470]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.004,
                    "name": "testChecksum[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[471]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[472]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.005,
                    "name": "testChecksum[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[473]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.006,
                    "name": "testChecksum[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[474]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[475]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.001,
                    "name": "testEquality[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[476]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.015,
                    "name": "testChecksum[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[477]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.023,
                    "name": "testChecksum[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[478]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.022,
                    "name": "testChecksum[479]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testEquality[479]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.LegacyRecordTest",
                    "duration": 0.0,
                    "name": "testFields[479]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.007,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.517,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.449,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.249,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.233,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.003,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.004,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.284,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=0, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=0, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.221,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.002,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.449,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.224,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.237,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "writePastLimit[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "buildUsingCreateTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testCompressionRateV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "buildUsingLogAppendTime[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalRecordSet[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendedChecksumConsistency[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteEmptyRecordSet[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testEstimatedSizeInBytes[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.234,
                    "name": "testBuffersDereferencedOnClose[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "testSmallWriteLimit[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.001,
                    "name": "writePastLimit[bufferOffset=15, compression=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsBuilderTest",
                    "duration": 0.0,
                    "name": "testAppendAtInvalidOffset[bufferOffset=15, compression=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchDeletion[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testIterator[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethodWithHeaders[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToBatchDiscard[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testFilterToPreservesLogAppendTime[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.003,
                    "name": "testFilterToPreservesProducerInfo[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethodWithHeaders[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testChecksum[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterTo[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testIterator[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToWithUndersizedBuffer[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": true,
                    "status": "SKIPPED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testHasRoomForMethod[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesLogAppendTime[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterTo[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesProducerInfo[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesProducerInfo[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToBatchDiscard[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testBuildEndTxnMarker[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testNextBatchSize[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToAlreadyCompactedLog[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToWithUndersizedBuffer[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesProducerInfo[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testWithRecords[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testIterator[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testChecksum[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testNextBatchSize[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToAlreadyCompactedLog[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToBatchDiscard[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testBuildEndTxnMarker[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethod[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToPreservesLogAppendTime[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testFilterToPreservesPartitionLeaderEpoch[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterTo[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testFilterToWithUndersizedBuffer[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testHasRoomForMethodWithHeaders[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.002,
                    "name": "testFilterToPreservesProducerInfo[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testWithRecords[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testIterator[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.0,
                    "name": "testEmptyBatchDeletion[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.MemoryRecordsTest",
                    "duration": 0.001,
                    "name": "testEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.MultiRecordsSendTest",
                    "duration": 0.005,
                    "name": "testSendsFreedAfterWriting",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.001,
                    "name": "testCompressedIterationWithNullValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.0,
                    "name": "testCompressedIterationWithEmptyRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.0,
                    "name": "testIsValidWithChecksumMismatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.record.SimpleLegacyRecordTest",
                    "duration": 0.0,
                    "name": "testIsValidWithTooSmallBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.replica.ReplicaSelectorTest",
                    "duration": 0.011,
                    "name": "testSameRackSelector",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest",
                    "duration": 0.0,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest",
                    "duration": 0.008,
                    "name": "testErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest",
                    "duration": 0.003,
                    "name": "testPartitionDir",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.AlterReplicaLogDirsResponseTest",
                    "duration": 0.001,
                    "name": "testErrorCounts",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.0,
                    "name": "shouldReturnAllKeysWhenMagicIsCurrentValueAndThrottleMsIsDefaultThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.0,
                    "name": "shouldCreateApiResponseThatHasAllApiKeysSupportedByBroker",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldHaveCorrectDefaultApiVersionsResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ApiVersionsResponseTest",
                    "duration": 0.001,
                    "name": "shouldCreateApiResponseOnlyWithKeysSupportedByMagicValue",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ControlledShutdownRequestTest",
                    "duration": 0.002,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ControlledShutdownRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.002,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.CreateAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.004,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnV0IfPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripLiteralV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripAnyV0AsLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnUnknownElements",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.002,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.001,
                    "name": "testGetErrorWithInvalidGroupId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.0,
                    "name": "testGetThrottleTimeMs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DeleteGroupsResponseTest",
                    "duration": 0.001,
                    "name": "testGetErrorWithExistingGroupIds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripPrefixedV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripAnyV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.001,
                    "name": "shouldThrowOnV0IfPrefixed",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripLiteralV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripLiteralV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsRequestTest",
                    "duration": 0.0,
                    "name": "shouldRoundTripAnyV0AsLiteral",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.002,
                    "name": "shouldThrowIfUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.002,
                    "name": "testAclBindings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnV0IfNotLiteral",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.002,
                    "name": "shouldRoundTripV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.DescribeAclsResponseTest",
                    "duration": 0.001,
                    "name": "shouldRoundTripV1",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EndTxnRequestTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EndTxnResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.001,
                    "name": "testWithUndefinedEndOffset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.0,
                    "name": "testWithUndefinedEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.EpochEndOffsetTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.HeartbeatRequestTest",
                    "duration": 0.0,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldRecognizeInvalidCharactersInGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.001,
                    "name": "testRebalanceTimeoutDefaultsToSessionTimeoutV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldAcceptValidGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.JoinGroupRequestTest",
                    "duration": 0.0,
                    "name": "shouldThrowOnInvalidGroupInstanceIds",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.005,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.003,
                    "name": "testTopicPartitionGroupingSizeReduction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.002,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrRequestTest",
                    "duration": 0.007,
                    "name": "testVersionLogic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsWithTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsNoTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaderAndIsrResponseTest",
                    "duration": 0.006,
                    "name": "testErrorCountsFromGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.001,
                    "name": "testSingleLeaveConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.0,
                    "name": "testBuildEmptyMembers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupRequestTest",
                    "duration": 0.0,
                    "name": "testMultiLeaveConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.0,
                    "name": "testShouldThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.001,
                    "name": "testEqualityWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.004,
                    "name": "testEqualityWithMemberResponses",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.LeaveGroupResponseTest",
                    "duration": 0.0,
                    "name": "testConstructorWithMemberResponses",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.0,
                    "name": "testEmptyMeansAllTopicsV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.0,
                    "name": "testEmptyMeansEmptyForVersionsAboveV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.MetadataRequestTest",
                    "duration": 0.001,
                    "name": "testMetadataRequestVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.0,
                    "name": "testGetErrorResponseTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.0,
                    "name": "testVersionSupportForGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetCommitResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.002,
                    "name": "testBuildThrowForUnsupportedRequireStable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.0,
                    "name": "testConstructorFailForUnsupportedRequireStable",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchRequestTest",
                    "duration": 0.001,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.0,
                    "name": "testShouldThrottle",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.0,
                    "name": "testNullableMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.001,
                    "name": "testStructBuild",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.0,
                    "name": "testUseDefaultLeaderEpoch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetFetchResponseTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest",
                    "duration": 0.001,
                    "name": "testForConsumerRequiresVersion3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest",
                    "duration": 0.001,
                    "name": "testDefaultReplicaId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testMixedTransactionalData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testMixedIdempotentData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlaggedAsIdempotentWhenRecordsNotIdempotent",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.002,
                    "name": "testV6AndBelowCannotUseZStdCompression",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldBeFlaggedAsTransactionalWhenTransactionalRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldNotBeFlaggedAsTransactionalWhenNoRecords",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV3AndAboveCannotHaveNoRecordBatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testBuildWithCurrentMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testBuildWithOldMessageFormat",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV3AndAboveShouldContainOnlyOneRecordBatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "testV3AndAboveCannotUseMagicV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.001,
                    "name": "testV3AndAboveCannotUseMagicV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceRequestTest",
                    "duration": 0.0,
                    "name": "shouldBeFlaggedAsIdempotentWhenIdempotentRecords",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.001,
                    "name": "produceResponseVersionTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.001,
                    "name": "produceResponseV5Test",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.ProduceResponseTest",
                    "duration": 0.001,
                    "name": "produceResponseRecordErrorsTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestContextTest",
                    "duration": 0.003,
                    "name": "testSerdeUnsupportedApiVersionRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.0,
                    "name": "testSerdeControlledShutdownV0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.001,
                    "name": "testRequestHeaderV1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestHeaderTest",
                    "duration": 0.0,
                    "name": "testRequestHeaderV2",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testValidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "cannotUseFindCoordinatorV0ToFindTransactionCoordinator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testJoinGroupRequestVersion0RebalanceTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "testFetchRequestIsolationLevel",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testApiVersionResponseStructParsingFallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.004,
                    "name": "testCreateTopicRequestV3FailsIfNoPartitionsOrReplicas",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testOffsetFetchRequestBuilderToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testResponseHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.155,
                    "name": "testSerialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.007,
                    "name": "verifyFetchResponseFullWrites",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "fetchResponseVersionTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testFetchResponseV4",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testFetchRequestMaxBytesOldVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testListGroupRequestV3FailsWithStates",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.002,
                    "name": "produceRequestToStringTest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testCreateTopicRequestV0FailsIfValidateOnly",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testControlledShutdownResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testApiVersionResponseStructParsing",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseWithNotUnsupportedError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testFetchRequestWithMetadata",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testInitProducerIdRequestVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionsRequestBeforeV3Validation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.001,
                    "name": "testApiVersionResponseStructParsingFallbackException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "testApiVersionResponseWithUnsupportedError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.RequestResponseTest",
                    "duration": 0.0,
                    "name": "produceRequestGetErrorResponseTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.001,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.001,
                    "name": "testBuilderNormalizationWithAllDeletePartitionEqualToTrue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.0,
                    "name": "testBuilderNormalizationWithAllDeletePartitionEqualToFalse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.001,
                    "name": "testPartitionStatesNormalization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.001,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaRequestTest",
                    "duration": 0.0,
                    "name": "testTopicStatesNormalization",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.001,
                    "name": "testToString",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.0,
                    "name": "testErrorCountsWithTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.001,
                    "name": "testErrorCountsNoTopLevelError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.StopReplicaResponseTest",
                    "duration": 0.007,
                    "name": "testErrorCountsFromGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.SyncGroupRequestTest",
                    "duration": 0.0,
                    "name": "testRequestVersionCompatibilityFailBuild",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.003,
                    "name": "testDisableGroupMetadataAutoDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.001,
                    "name": "testEnableGroupMetadataAutoDowngrade",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.005,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.0,
                    "name": "testGetErrorResponseTopics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitRequestTest",
                    "duration": 0.002,
                    "name": "testVersionSupportForGroupInstanceId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitResponseTest",
                    "duration": 0.002,
                    "name": "testConstructorWithErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.TxnOffsetCommitResponseTest",
                    "duration": 0.0,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.002,
                    "name": "testUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.002,
                    "name": "testTopicPartitionGroupingSizeReduction",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.0,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.UpdateMetadataRequestTest",
                    "duration": 0.006,
                    "name": "testVersionLogic",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersRequestTest",
                    "duration": 0.006,
                    "name": "testGetErrorResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersRequestTest",
                    "duration": 0.0,
                    "name": "testConstructor",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.requests.WriteTxnMarkersResponseTest",
                    "duration": 0.001,
                    "name": "testConstructorWithStruct",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchWildcardIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchWhereResourceTypeIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.001,
                    "name": "shouldMatchWhereResourceNameIsAny",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentResourceType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchWildcardAgainstOtherName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldMatchIfExactMatch",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchIfDifferentNameCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceFilterTest",
                    "duration": 0.0,
                    "name": "shouldNotMatchLiteralWildcardTheWayAround",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.001,
                    "name": "testCode",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.0,
                    "name": "testName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.0,
                    "name": "testExhaustive",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.resource.ResourceTypeTest",
                    "duration": 0.001,
                    "name": "testIsUnknown",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.005,
                    "name": "testLoadForServerWithListenerNameOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMissingOptionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testSingleOption",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testNumericOptionWithoutQuotes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testConfigNoOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testLoadForServerWithWrongListenerName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testNumericOptionWithQuotes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testQuotedOptionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMissingLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testMissingSemicolon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testInvalidControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMultipleOptions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.002,
                    "name": "testMultipleLoginModules",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testMissingControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.001,
                    "name": "testLoadForServerWithListenerNameAndFallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.003,
                    "name": "testQuotedOptionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.JaasContextTest",
                    "duration": 0.012,
                    "name": "testControlFlag",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.SaslExtensionsTest",
                    "duration": 0.0,
                    "name": "testCannotAddValueToMapReferenceAndGetFromExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.SaslExtensionsTest",
                    "duration": 0.001,
                    "name": "testReturnedMapIsImmutable",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.037,
                    "name": "testUseOldPrincipalBuilderForPlaintextIfProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.023,
                    "name": "testPrincipalBuilderScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.035,
                    "name": "testPrincipalWithSslPrincipalMapper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.001,
                    "name": "testPrincipalIfSSLPeerIsNotAuthenticated",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.02,
                    "name": "testPrincipalBuilderGssapi",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.001,
                    "name": "testUseSessionPeerPrincipalForSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.002,
                    "name": "testUseOldPrincipalBuilderForSslIfProvided",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest",
                    "duration": 0.0,
                    "name": "testReturnAnonymousPrincipalForPlaintext",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.auth.KafkaPrincipalTest",
                    "duration": 0.0,
                    "name": "testEqualsAndHashCode",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.185,
                    "name": "testProducerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.13,
                    "name": "testTransactionalProducerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.14,
                    "name": "testConsumerWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest",
                    "duration": 0.121,
                    "name": "testAdminClientWithInvalidCredentials",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.LoginManagerTest",
                    "duration": 0.009,
                    "name": "testClientLoginManager",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.LoginManagerTest",
                    "duration": 0.004,
                    "name": "testServerLoginManager",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 1.26,
                    "name": "testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 0.538,
                    "name": "testClientConnectionClose[failedAuthenticationDelayMs=0]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 1.203,
                    "name": "testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=200]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest",
                    "duration": 1.368,
                    "name": "testClientConnectionClose[failedAuthenticationDelayMs=200]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.475,
                    "name": "testMissingUsernameSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.694,
                    "name": "testValidSaslScramMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.689,
                    "name": "testValidSaslOauthBearerMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.571,
                    "name": "testValidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.739,
                    "name": "oldSaslScramSslServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.529,
                    "name": "oldSaslScramPlaintextServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.632,
                    "name": "oldSaslScramPlaintextServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.427,
                    "name": "testServerLoginOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.404,
                    "name": "testAuthenticateCallbackHandlerMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.681,
                    "name": "testMechanismPluggability",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.922,
                    "name": "testScramUsernameWithSpecialCharacters",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.608,
                    "name": "testConvertListOffsetResponseToSaslHandshakeResponse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.909,
                    "name": "testMissingPasswordSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.504,
                    "name": "testClientAuthenticateCallbackHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.331,
                    "name": "testValidSaslOauthBearerMechanismWithoutServerTokens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.65,
                    "name": "testCannotReauthenticateWithDifferentPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.824,
                    "name": "testInvalidLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.753,
                    "name": "testTokenAuthenticationOverSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.834,
                    "name": "oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.107,
                    "name": "oldSaslPlainSslClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.51,
                    "name": "testClientExceptionDoesNotContainSensitiveData",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.749,
                    "name": "oldSaslPlainSslClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.709,
                    "name": "testValidSaslScramSha256",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.585,
                    "name": "testInvalidApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.33,
                    "name": "testClientLoginCallbackOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.469,
                    "name": "oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.519,
                    "name": "testInvalidMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.948,
                    "name": "testInsufficientScopeSaslOauthBearerMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.778,
                    "name": "testDisabledMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.798,
                    "name": "oldSaslScramSslClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.661,
                    "name": "testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.084,
                    "name": "testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.587,
                    "name": "testPacketSizeTooBig",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.424,
                    "name": "testServerLoginCallbackOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.953,
                    "name": "oldSaslScramPlaintextClientWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.868,
                    "name": "oldSaslScramSslClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.427,
                    "name": "oldSaslScramPlaintextClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.563,
                    "name": "testInvalidUsernameSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.592,
                    "name": "testUserCredentialsUnavailableForScramMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.898,
                    "name": "testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion0",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.226,
                    "name": "testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion1",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 3.065,
                    "name": "testMultipleServerMechanisms",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 9.012,
                    "name": "testRepeatedValidSaslPlainOverSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.729,
                    "name": "testValidSaslPlainOverPlaintext",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.753,
                    "name": "testValidSaslPlainOverSsl",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.672,
                    "name": "testInvalidApiVersionsRequestSequence",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.297,
                    "name": "testSaslUnsupportedClientVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.753,
                    "name": "testCannotReauthenticateAgainFasterThanOneSecond",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.74,
                    "name": "testDisallowedKafkaRequestsBeforeAuthentication",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.431,
                    "name": "testClientLoginOverride",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.201,
                    "name": "testClientDynamicJaasConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.469,
                    "name": "oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.885,
                    "name": "oldSaslPlainSslServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.59,
                    "name": "testForBrokenSaslHandshakeVersionBump",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.851,
                    "name": "testServerAuthenticateCallbackHandler",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.588,
                    "name": "testInvalidPasswordSaslPlain",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.342,
                    "name": "testInvalidPasswordSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.979,
                    "name": "testApiVersionsRequestWithServerUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.742,
                    "name": "oldSaslPlainSslServerWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.722,
                    "name": "testCorrelationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.412,
                    "name": "testServerDynamicJaasConfiguration",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.845,
                    "name": "testTokenReauthenticationOverSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.874,
                    "name": "testInvalidSaslPacket",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.672,
                    "name": "testSaslHandshakeRequestWithUnsupportedVersion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 1.047,
                    "name": "testCannotReauthenticateWithDifferentMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.893,
                    "name": "testJaasConfigurationForListener",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 2.003,
                    "name": "oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeaderFailure",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.519,
                    "name": "testUnknownUserSaslScram",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest",
                    "duration": 0.76,
                    "name": "oldSaslScramSslServerWithoutSaslAuthenticateHeader",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.008,
                    "name": "testUnexpectedRequestType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.002,
                    "name": "testOversizeRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.298,
                    "name": "testOldestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest",
                    "duration": 0.005,
                    "name": "testLatestApiVersionsRequest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.008,
                    "name": "testToLowerCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.0,
                    "name": "testParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.001,
                    "name": "testToUpperCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosNameTest",
                    "duration": 0.0,
                    "name": "testInvalidRules",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.kerberos.KerberosRuleTest",
                    "duration": 0.003,
                    "name": "testReplaceParameters",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.003,
                    "name": "testCannotValidateExtensionWhichWasNotGiven",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.001,
                    "name": "testUnvalidatedExtensionsAreIgnored",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testValidatedExtensionsAreReturned",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest",
                    "duration": 0.0,
                    "name": "testInvalidExtensionsAndErrorMessagesAreReturned",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.061,
                    "name": "login1Commit1Login2Abort2Login3Commit3Logout3",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.001,
                    "name": "commitDoesNotThrowOnUnsupportedExtensionsCallback",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.001,
                    "name": "login1Commit1Logout1Login2Commit2Logout2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.002,
                    "name": "login1Commit1Login2Commit2Logout1Login3Commit3Logout2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest",
                    "duration": 0.0,
                    "name": "loginAbortLoginCommitLogout",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest",
                    "duration": 0.018,
                    "name": "testWithZeroTokens",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest",
                    "duration": 0.003,
                    "name": "testWithPotentiallyMultipleTokens",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest",
                    "duration": 0.001,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest",
                    "duration": 0.0,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest",
                    "duration": 0.001,
                    "name": "testError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest",
                    "duration": 0.001,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testValidateNullExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testNoExtensionsFromByteArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testAuthorizationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testRfc7688Example",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testThrowsSaslExceptionOnInvalidExtensionKey",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testNoExtensionsFromTokenAndNullExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.001,
                    "name": "testBuildClientResponseToBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest",
                    "duration": 0.0,
                    "name": "testBuildServerResponseToBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.006,
                    "name": "testWrapsExtensionsCallbackHandlingErrorInSaslExceptionInFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.0,
                    "name": "testNoExtensionsDoesNotAttachAnythingToFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest",
                    "duration": 0.0,
                    "name": "testAttachesExtensionsToFirstClientMessage",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.021,
                    "name": "negotiatedProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.003,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.003,
                    "name": "savesCustomExtensionAsNegotiatedProperty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "unrecognizedExtensionsAreNotSaved",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "illegalToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest",
                    "duration": 0.002,
                    "name": "throwsAuthenticationExceptionOnInvalidExtensions",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshConfigTest",
                    "duration": 0.0,
                    "name": "fromGoodConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.073,
                    "name": "testRefreshWithExpirationSmallerThanConfiguredBuffers",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.004,
                    "name": "testRefreshWithMinPeriodIntrusion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.004,
                    "name": "testRefreshWithPreExpirationBufferIntrusion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.005,
                    "name": "testLoginExceptionCausesCorrectLogout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.029,
                    "name": "testRefresh",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest",
                    "duration": 0.005,
                    "name": "testRefreshWithExpirationSmallerThanConfiguredBuffersAndOlderCreateTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest",
                    "duration": 0.0,
                    "name": "validScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest",
                    "duration": 0.001,
                    "name": "invalidScope",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.619,
                    "name": "blankPrincipalName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.002,
                    "name": "validCompactSerialization",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.001,
                    "name": "missingPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest",
                    "duration": 0.001,
                    "name": "validClaims",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.003,
                    "name": "addsExtensions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.001,
                    "name": "throwsErrorOnInvalidExtensionValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.004,
                    "name": "validOptionsWithExplicitOptionValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.0,
                    "name": "throwsErrorOnInvalidExtensionName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest",
                    "duration": 0.001,
                    "name": "minimalToken",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.661,
                    "name": "tooEarlyExpirationTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.003,
                    "name": "missingRequiredScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.002,
                    "name": "validToken",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.004,
                    "name": "badOrMissingPrincipal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest",
                    "duration": 0.001,
                    "name": "includesRequiredScope",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.006,
                    "name": "validateClaimForExistenceAndType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.004,
                    "name": "validateExpirationTimeAndIssuedAtConsistency",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.012,
                    "name": "validateScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.004,
                    "name": "validateIssuedAt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest",
                    "duration": 0.002,
                    "name": "validateExpirationTime",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.001,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.0,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.0,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.plain.internals.PlainSaslServerTest",
                    "duration": 0.004,
                    "name": "emptyTokens",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.012,
                    "name": "missingFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.007,
                    "name": "stringConversion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.045,
                    "name": "generateCredential",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.012,
                    "name": "extraneousFields",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.032,
                    "name": "scramCredentialCache",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest",
                    "duration": 0.0,
                    "name": "invalidCredential",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramFormatterTest",
                    "duration": 0.019,
                    "name": "rfc7677Example",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramFormatterTest",
                    "duration": 0.0,
                    "name": "saslName",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.004,
                    "name": "validClientFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.003,
                    "name": "invalidClientFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.003,
                    "name": "validServerFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "invalidServerFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "invalidClientFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.0,
                    "name": "validClientFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.0,
                    "name": "invalidServerFirstMessage",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramMessagesTest",
                    "duration": 0.001,
                    "name": "validServerFinalMessage",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.056,
                    "name": "noAuthorizationIdSpecified",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.053,
                    "name": "authorizatonIdEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.scram.internals.ScramSaslServerTest",
                    "duration": 0.049,
                    "name": "authorizatonIdNotEqualsAuthenticationId",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.597,
                    "name": "testKeyStoreTrustStoreValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.629,
                    "name": "testReconfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.385,
                    "name": "testReconfigurationWithoutTruststore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.159,
                    "name": "testSslFactoryWithoutPasswordConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.311,
                    "name": "testReconfigurationWithoutKeystore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.802,
                    "name": "testKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 1.305,
                    "name": "staleSslEngineFactoryShouldBeClosed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.28,
                    "name": "testServerSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.642,
                    "name": "testUntrustedKeyStoreValidationFails[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.004,
                    "name": "testSslFactoryWithIncorrectProviderClassConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.688,
                    "name": "testCertificateEntriesValidation[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.581,
                    "name": "testSslFactoryWithCustomKeyManagerConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientMode[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.204,
                    "name": "testSslFactoryConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.003,
                    "name": "testClientSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.002,
                    "name": "testEngineFactoryClosed[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.0,
                    "name": "testSslFactoryWithoutProviderClassConfiguration[tlsProtocol=TLSv1.2]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.353,
                    "name": "testKeyStoreTrustStoreValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.476,
                    "name": "testReconfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.609,
                    "name": "testReconfigurationWithoutTruststore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.32,
                    "name": "testSslFactoryWithoutPasswordConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.501,
                    "name": "testReconfigurationWithoutKeystore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.53,
                    "name": "testKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.345,
                    "name": "staleSslEngineFactoryShouldBeClosed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.145,
                    "name": "testServerSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.441,
                    "name": "testUntrustedKeyStoreValidationFails[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.003,
                    "name": "testSslFactoryWithIncorrectProviderClassConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 1.056,
                    "name": "testCertificateEntriesValidation[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testInvalidSslEngineFactory[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.215,
                    "name": "testSslFactoryWithCustomKeyManagerConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientMode[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.798,
                    "name": "testSslFactoryConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.001,
                    "name": "testClientSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.002,
                    "name": "testEngineFactoryClosed[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslFactoryTest",
                    "duration": 0.0,
                    "name": "testSslFactoryWithoutProviderClassConfiguration[tlsProtocol=TLSv1.3]",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.006,
                    "name": "testRulesSplitting",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.001,
                    "name": "testValidRules",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.0,
                    "name": "testCommaWithWhitespace",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.001,
                    "name": "testSslPrincipalMapper",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.security.ssl.SslPrincipalMapperTest",
                    "duration": 0.0,
                    "name": "testInvalidRules",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.006,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnZeroBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.003,
                    "name": "testSerializeVoid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "testSerdeFromUnknown",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.017,
                    "name": "allSerdesShouldRoundtripInput",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnTooManyBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "allSerdesShouldSupportNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "voidDeserializerShouldThrowOnNotNullValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "floatSerdeShouldPreserveNaNValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "testSerdeFromNotNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.007,
                    "name": "stringSerdeShouldSupportDifferentEncodings",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.001,
                    "name": "testDeserializeVoid",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.serialization.SerializationTest",
                    "duration": 0.0,
                    "name": "floatDeserializerShouldThrowSerializationExceptionOnTooFewBytes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.AbstractIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.AbstractIteratorTest",
                    "duration": 0.0,
                    "name": "testIterator",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.AppInfoParserTest",
                    "duration": 0.002,
                    "name": "testUnregisterAppInfoUnregistersMetrics",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.AppInfoParserTest",
                    "duration": 0.0,
                    "name": "testRegisterAppInfoRegistersMetrics",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.001,
                    "name": "testExpandByteBufferOnWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteDirectByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testExpandDirectByteBufferOnWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testWriteByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.0,
                    "name": "testExpandByteBufferOnPositionIncrease",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferOutputStreamTest",
                    "duration": 0.001,
                    "name": "testExpandDirectByteBufferOnPositionIncrease",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteBufferUnmapperTest",
                    "duration": 0.005,
                    "name": "testUnmap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testInvalidVarlong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testUnsignedVarintSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.002,
                    "name": "testVarlongSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testReadUnsignedInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testWriteUnsignedIntLEToArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testInvalidVarint",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testVarintSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testReadUnsignedIntLEFromArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.001,
                    "name": "testReadUnsignedIntLEFromInputStream",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testDouble",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ByteUtilsTest",
                    "duration": 0.0,
                    "name": "testWriteUnsignedIntLEToOutputStream",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.005,
                    "name": "testIncrementWithSubmap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.0,
                    "name": "testIncrement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.BytesTest",
                    "duration": 0.001,
                    "name": "testIncrementUpperBoundary",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.001,
                    "name": "testUpdateInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateLong",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.0,
                    "name": "testUpdateByteBufferWithOffsetPosition",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ChecksumsTest",
                    "duration": 0.001,
                    "name": "testUpdateByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testCycleCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CircularIteratorTest",
                    "duration": 0.001,
                    "name": "testNullCollection",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.CollectionUtilsTest",
                    "duration": 0.001,
                    "name": "testSubtractMapRemovesSecondMapsKeys",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.CollectionUtilsTest",
                    "duration": 0.001,
                    "name": "testSubtractMapDoesntRemoveAnythingWhenEmptyMap",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.Crc32CTest",
                    "duration": 0.0,
                    "name": "testValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.Crc32CTest",
                    "duration": 0.0,
                    "name": "testUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.Crc32Test",
                    "duration": 0.0,
                    "name": "testValue",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.Crc32Test",
                    "duration": 0.0,
                    "name": "testUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.004,
                    "name": "shouldAddShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.0,
                    "name": "shouldHaltImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.001,
                    "name": "shouldExitImmediately",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ExitTest",
                    "duration": 0.0,
                    "name": "shouldNotInvokeShutdownHookImmediately",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.008,
                    "name": "shouldMaintainOrderWhenAdding",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.002,
                    "name": "shouldForbidConditionalRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FixedOrderMapTest",
                    "duration": 0.0,
                    "name": "shouldForbidRemove",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.003,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.001,
                    "name": "testNestedSingleEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testEmptyListAtTheEnd",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testEmptyListInBetweenNonEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.001,
                    "name": "testEmptyListFollowedByNonEmpty",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.FlattenedIteratorTest",
                    "duration": 0.002,
                    "name": "testNestedLists",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.004,
                    "name": "testSetViewModification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testSetViewGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testInsertingTheSameObjectMultipleTimes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListIteratorCreation",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testEnlargement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListIteratorTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListViewGet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testFindContainsRemoveOnEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListViewModification",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testNullForbidden",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testSameKeysDifferentValues",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testEmptyListIterator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.0,
                    "name": "testInsertDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testListIteratorRemove",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.002,
                    "name": "testTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.001,
                    "name": "testCollisions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest",
                    "duration": 0.046,
                    "name": "testManyInsertsAndDeletes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testFindFindAllContainsRemoveOnEmptyCollection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testEnlargement",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.0,
                    "name": "testNullForbidden",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testInsertDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.001,
                    "name": "testTraversal",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest",
                    "duration": 0.042,
                    "name": "testManyInsertsAndDeletes",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.006,
                    "name": "testLoadKerberosLoginModule",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.0,
                    "name": "testIsIBMJdk",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.JavaTest",
                    "duration": 0.0,
                    "name": "testJavaVersion",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.LoggingSignalHandlerTest",
                    "duration": 0.007,
                    "name": "testRegister",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.MappedIteratorTest",
                    "duration": 0.003,
                    "name": "testEmptyList",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MappedIteratorTest",
                    "duration": 0.001,
                    "name": "testStringToInteger",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.001,
                    "name": "testAutoTickMs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.001,
                    "name": "testAdvanceClock",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.005,
                    "name": "testWaitObjectTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.MockTimeTest",
                    "duration": 0.004,
                    "name": "testWaitObjectConditionSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SanitizerTest",
                    "duration": 0.002,
                    "name": "testSanitize",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SanitizerTest",
                    "duration": 1.941,
                    "name": "testJmxSanitize",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.004,
                    "name": "testParseKafkaPrincipalWithNonUserPrincipalType",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.0,
                    "name": "testPrincipalNameCanContainSeparator",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SecurityUtilsTest",
                    "duration": 0.001,
                    "name": "testAddCustomSecurityProvider",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.035,
                    "name": "testEchoHello",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.005,
                    "name": "testRunProgramWithErrorReturn",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.011,
                    "name": "testHeadDevZero",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ShellTest",
                    "duration": 0.002,
                    "name": "testAttemptToRunNonExistentProgram",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.SystemTimeTest",
                    "duration": 0.1,
                    "name": "testWaitObjectTimeout",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.SystemTimeTest",
                    "duration": 0.0,
                    "name": "testWaitObjectConditionSatisfied",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.004,
                    "name": "testThreadNameWithNumberNoDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.0,
                    "name": "testThreadNameWithoutNumberDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.0,
                    "name": "testThreadNameWithNumberDemon",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.ThreadUtilsTest",
                    "duration": 0.001,
                    "name": "testThreadNameWithoutNumberNoDemon",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerUpdateAndReset",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerUpdate",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.001,
                    "name": "testTimerSleep",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimerResetUsesCurrentTime",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testTimeoutOverflow",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.TimerTest",
                    "duration": 0.0,
                    "name": "testNonMonotonicUpdate",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testIntersectionOfOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testAbs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testMin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testPropsToMap",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testIntersectionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testUnion",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "toArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "utf8ByteBufferSerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testDiff",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testJoin",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.089,
                    "name": "testReadFullyOrFailWithPartialFileChannelReads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "toArrayDirectByteBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.003,
                    "name": "testReadBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testGetHost",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testGetPort",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.006,
                    "name": "testReadFullyWithPartialFileChannelReads",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.009,
                    "name": "testRecursiveDelete",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testUnionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testUnionOfNone",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.033,
                    "name": "testReadFullyOrFailWithRealFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "writeToBuffer",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.029,
                    "name": "testFileAsStringNamedPipe",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testConvertTo32BitField",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testReadFullyIfEofIsReached",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testHostPattern",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testDisjointIntersectionOfMany",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testFormatBytes",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testMurmur2",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testIntersection",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "utf8ByteArraySerde",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.06,
                    "name": "testFileAsStringSimpleFile",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.002,
                    "name": "testCloseAll",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.001,
                    "name": "testLoadProps",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testUnionOfOne",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.common.utils.UtilsTest",
                    "duration": 0.0,
                    "name": "testFormatAddress",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.002,
                    "name": "testWrite",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.001,
                    "name": "testIndentMustBeNonNegative",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.CodeBufferTest",
                    "duration": 0.001,
                    "name": "testEquals",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.028,
                    "name": "testVerifyTypeMismatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.007,
                    "name": "testVerifyTypeMatches",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.EntityTypeTest",
                    "duration": 0.005,
                    "name": "testUnknownEntityType",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.01,
                    "name": "testNotNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.002,
                    "name": "testNeverNullWithBlockScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.002,
                    "name": "testNeverNull",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.005,
                    "name": "testAnotherNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.IsNullConditionalTest",
                    "duration": 0.002,
                    "name": "testNullCheck",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 1.716,
                    "name": "testInvalidTaggedVersionsNotASubetOfVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.134,
                    "name": "testInvalidNullDefaultForPotentiallyNonNullableArray",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.006,
                    "name": "testInvalidFieldName",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.003,
                    "name": "testInvalidTaggedVersionsWithoutTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.004,
                    "name": "testInvalidFlexibleVersionsRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.017,
                    "name": "testInvalidNullDefaultForInt",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.004,
                    "name": "testDuplicateTags",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.004,
                    "name": "testInvalidTaggedVersionsRange",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.129,
                    "name": "testNullDefaults",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.003,
                    "name": "testInvalidTagWithoutTaggedVersions",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.002,
                    "name": "testInvalidNegativeTag",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageDataGeneratorTest",
                    "duration": 0.003,
                    "name": "testInvalidSometimesNullableTaggedField",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 1.419,
                    "name": "testToSnakeCase",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.004,
                    "name": "testCapitalizeFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.011,
                    "name": "testLowerCaseFirst",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.004,
                    "name": "testFirstIsCapitalized",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.MessageGeneratorTest",
                    "duration": 0.001,
                    "name": "stripSuffixTest",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.004,
                    "name": "testDuplicateCommonStructError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.003,
                    "name": "testSingleStruct",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.003,
                    "name": "testReSpecifiedCommonStructError",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.StructRegistryTest",
                    "duration": 0.025,
                    "name": "testCommonStructs",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.015,
                    "name": "testAlwaysTrueConditionalWithAlwaysEmitBlockScope",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.006,
                    "name": "testLowerRangeCheckWithElse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.005,
                    "name": "testFullRangeCheck",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.004,
                    "name": "testAlwaysTrueConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.004,
                    "name": "testAlwaysFalseConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.004,
                    "name": "testLowerRangeCheckWithIfMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.007,
                    "name": "testUpperRangeCheckWithIfNotMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.013,
                    "name": "testUpperRangeCheckWithIfMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.005,
                    "name": "testAnotherAlwaysFalseConditional",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.014,
                    "name": "testAllowMembershipCheckAlwaysFalseFails",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.089,
                    "name": "testLowerRangeCheckWithIfNotMember",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionConditionalTest",
                    "duration": 0.011,
                    "name": "testUpperRangeCheckWithElse",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testIntersections",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.001,
                    "name": "testSubtract",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.008,
                    "name": "testRoundTrips",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testVersionsParse",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.message.VersionsTest",
                    "duration": 0.002,
                    "name": "testContains",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        },
        {
            "cases": [
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.773,
                    "name": "testLog4jAppendsWithSyncSendWithoutIgnoringExceptionsShouldNotThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.716,
                    "name": "testLog4jAppendsWithRealProducerConfigWithSyncSendAndNotIgnoringExceptionsShouldThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.054,
                    "name": "testLog4jAppends",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.019,
                    "name": "testSetSaslMechanism",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.014,
                    "name": "testJaasConfigNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.006,
                    "name": "testKafkaLog4jConfigs",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.008,
                    "name": "testLog4jAppendsWithSyncSendAndSimulateProducerFailShouldThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.132,
                    "name": "testLog4jAppendsWithRealProducerConfigWithSyncSendShouldNotThrowException",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.013,
                    "name": "testSaslMechanismNotSet",
                    "skipped": false,
                    "status": "PASSED"
                },
                {
                    "className": "org.apache.kafka.log4jappender.KafkaLog4jAppenderTest",
                    "duration": 0.003,
                    "name": "testSetJaasConfig",
                    "skipped": false,
                    "status": "PASSED"
                }
            ]
        }
    ]
}